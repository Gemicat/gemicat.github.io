<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浏览器加载、解析、渲染]]></title>
      <url>http://yoursite.com/2017/04/06/2017-04-06-browserWorking-browser/</url>
      <content type="html"><![CDATA[<h3 id="我们为什么要了解这些过程？"><a href="#我们为什么要了解这些过程？" class="headerlink" title="我们为什么要了解这些过程？"></a>我们为什么要了解这些过程？</h3><p>只有了解了浏览器的加载、解析、渲染过程，才会知道为什么 js 脚本要写在页面的最下面，才会知道如何构建 dom 结构才能在最短的时间解析完成。</p>
<h3 id="浏览器的主要功能"><a href="#浏览器的主要功能" class="headerlink" title="浏览器的主要功能"></a>浏览器的主要功能</h3><p>浏览器的主要功能是将用户选择的web资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是HTML，也包括PDF、image及其他格式。用户用URI（Uniform Resource Identifier统一资源标识符）来指定所请求资源的位置。</p>
<p>这些年来，浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为web开发者带来了严重的兼容性问题。</p>
<h3 id="浏览器的构成"><a href="#浏览器的构成" class="headerlink" title="浏览器的构成"></a>浏览器的构成</h3><p>用户界面、浏览器引擎、渲染引擎、网络、UI后端、JS解释器、数据存储</p>
<blockquote>
<p>要注意的是，不同于大部分浏览器，Chrome为每个Tab分配了各自的渲染引擎实例，每个Tab就是一个独立的进程。</p>
</blockquote>
<h3 id="浏览器加载"><a href="#浏览器加载" class="headerlink" title="浏览器加载"></a>浏览器加载</h3><p>当我们在浏览器的输入框输入一个网址，会发生什么呢？</p>
<ol>
<li>输入网址</li>
<li>浏览器查找域名的 IP 地址</li>
<li>浏览器给 web 服务器发送一个 HTTP 请求</li>
<li>网站服务的永久重定向响应</li>
<li>浏览器跟踪重定向地址并发送另一个获取请求</li>
<li>服务器接收到获取请求，然后处理并返回一个响应</li>
<li>服务器发回一个HTML响应</li>
<li>浏览器开始加载解析HTML</li>
</ol>
<p>当然，我们现在的网页都包含大量的图片、css、js等资源文件，使页面的显示更优雅。</p>
<h4 id="js-脚本"><a href="#js-脚本" class="headerlink" title="js 脚本"></a>js 脚本</h4><p>web 的模式是同步的，开发者希望解析到一个script标签时立即解析执行脚本，并阻塞文档的解析直到脚本执行完。如果脚本是外引的，则网络必须先请求到这个资源——这个过程也是同步的，会阻塞文档的解析直到资源被请求到。这个模式保持了很多年，并且在html4及html5中都特别指定了。开发者可以将脚本标识为defer，以使其不阻塞文档解析，并在文档解析结束后执行。</p>
<h4 id="css-样式表"><a href="#css-样式表" class="headerlink" title="css 样式表"></a>css 样式表</h4><p>样式表采用另一种不同的模式。理论上，既然样式表不改变Dom树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，js 脚本可能会获取 dom 的样式，如果样式还没有加载解析完成，那么脚本可能会获取到错误的信息，展示的内容可能会和预想的结果有很大的偏差。这看起来是个边缘情况，但确实很常见。Firefox在存在样式表还在加载和解析时阻塞所有的脚本，而Chrome只在当脚本试图访问某些可能被未加载的样式表所影响的特定的样式属性时才阻塞这些脚本。</p>
<blockquote>
<p>当然，现在的浏览器支持页面资源预加载（prefetch），会预先下载页面所需要的js、css等文件。不过，真正的执行过程还是在其原来的位置。</p>
</blockquote>
<p>因此，可以使用预加载来提前加载资源文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"prefetch"</span> href=<span class="string">"http://css.css"</span> /&gt;</div></pre></td></tr></table></figure>
<p>使用 defer 属性异步加载js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script defer=<span class="string">"true"</span> src=<span class="string">"JavaScript.js"</span> type=<span class="string">"text/javascript"</span>/&gt;</div></pre></td></tr></table></figure>
<p>使用 script 操作dom来动态加载js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.type = <span class="string">'text/javascript'</span>;</div><div class="line">    <span class="keyword">if</span>(script.readyState)&#123;  <span class="comment">//IE下</span></div><div class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">'loaded'</span> || script.readyState == <span class="string">'complete'</span>)&#123;</div><div class="line">                script.onreadystatechange = <span class="literal">null</span>;</div><div class="line">                callback();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//其他浏览器</span></div><div class="line">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    script.src = url;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h3><p>渲染引擎的目的就是呈现出浏览器请求到的数据，每个浏览器都有自己的渲染引擎。目前，Firefox 使用的是 Gecko，Safari 和 Chrome 浏览器使用的都是 WebKit，IE不想用。</p>
<p>下面是渲染引擎的基本流程：</p>
<p><img src="/images/2017-04-06/process.png" alt="过程"></p>
<p>浏览器解析 html 文档，并将里面的各个tag转化成 dom 树上的节点，同时解析 css 样式形成 render 树。</p>
<p>render 树上面会包含有一些样式属性的节点，排序顺序就是它们在屏幕上展示的顺序。</p>
<p>当两棵树构建完成，进入布局阶段，浏览器会为每个节点分配它在浏览器上的确切坐标。</p>
<p>下一个阶段是绘制阶段，浏览器的渲染引擎会遍历 render 树，并将每个节点绘制出来。</p>
<p><img src="/images/2017-04-06/render_tree.png" alt="render tree"></p>
<blockquote>
<p>需要注意的是，为了更好的用户体验，渲染引擎会尽早将内容显示在屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>
</blockquote>
<h3 id="浏览器解析"><a href="#浏览器解析" class="headerlink" title="浏览器解析"></a>浏览器解析</h3><p>解析是渲染过程中非常重要的一环。</p>
<h4 id="html-解析"><a href="#html-解析" class="headerlink" title="html 解析"></a>html 解析</h4><p>HTML的解析分为两个过程，词法解析和语法解析。词法分析就是将输入分解为符号，符号是语言的词汇表。语法分析指对语言应用语法规则。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"example.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可翻译成如下的 DOM 树：</p>
<p><img src="/images/2017-04-06/dom_tree.png" alt="dom tree"></p>
<p>我们在浏览html网页时从来不会遇到 「语法错误」 的情况，因为浏览器具有一定的容错机制，会纠正无效的内容。但是，在书写 html 代码时最好不要有错误的写法。</p>
<h4 id="css-解析"><a href="#css-解析" class="headerlink" title="css 解析"></a>css 解析</h4><p>CSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，<a href="http://www.w3.org/TR/CSS2/grammar.html" target="_blank" rel="external">CSS 规范定义了 CSS 的词法和语法</a>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>, <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">error</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这段 css 代码将会解析成如下规则：</p>
<p><img src="/images/2017-04-06/css_tree.png" alt="css tree"></p>
<p>css 的匹配是从左到右的匹配，如果换成从右到左，那么就要找到最顶层的元素，依次向下寻找，如果都不匹配要回到最顶层元素，换另一条路继续匹配，这样需要回溯若干次才能确定是否匹配成功。如果采用从左到右匹配规则，在匹配的第一时间就可以排除一大部分元素。</p>
<p>根据匹配规则，在书写 css 时要尽量做到高效匹配：</p>
<p>1、不要在ID选择器前使用标签名</p>
<blockquote>
<p>div#divBox</p>
</blockquote>
<p>因为 id 选择器是唯一的，加上前面的标签名反而增加了不必要的匹配。</p>
<p>2、尽量不要在 class 选择器前使用标签名</p>
<p>3、尽量少使用层级关系</p>
<blockquote>
<p>#div #span.red{color:red;}</p>
</blockquote>
<p>4、id 和 class 之间的效率差距并不大。不过 css 的语义化可以参考下面的文章。</p>
<p><a href="https://github.com/kuitos/kuitos.github.io/issues/33" target="_blank" rel="external">Web语义化标准解读</a></p>
<hr>
<p>本文参考文章:</p>
<p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="external">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>
]]></content>
      
        <categories>
            
            <category> broswer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> broswer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redux学习笔记]]></title>
      <url>http://yoursite.com/2016/09/12/2016-09-12-reducxDoc-javascript/</url>
      <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。</p>
<p>在 Redux 中的 action 创建函数只是简单的返回一个 action:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: ADD_TODO,</div><div class="line">    text</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Redux 中只需把 action 创建函数的结果传给 dispatch() 方法即可发起一次 dispatch 过程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dispatch(addTodo(text))</div><div class="line">dispatch(completeTodo(index))</div></pre></td></tr></table></figure>
<p>store 里能直接通过 store.dispatch() 调用 dispatch() 方法，但是多数情况下你会使用 react-redux 提供的 connect() 帮助器来调用。bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。</p>
<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><p>reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。</p>
<pre><code>(previousState, action) =&gt; newState
</code></pre><blockquote>
<p>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。</p>
</blockquote>
<p>combineReducers 接收一个对象，可以把所有顶级的 reducer 放到一个独立的文件中，通过 export 暴露出每个 reducer 函数，然后使用 import * as reducers 得到一个以它们名字作为 key 的 object：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span></div><div class="line"><span class="keyword">const</span> todoApp = combineReducers(reducers)</div></pre></td></tr></table></figure>
<h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h4><p>Store 就是把它们联系到一起的对象。Store 有以下职责：</p>
<ul>
<li>维持应用的 state；</li>
<li>提供 getState() 方法获取 state；</li>
<li>提供 dispatch(action) 方法更新 state；</li>
<li>通过 subscribe(listener) 注册监听器;</li>
<li>通过 subscribe(listener) 返回的函数注销监听器。</li>
</ul>
<p>根据已有的 reducer 来创建 store 是非常容易的。我们使用 combineReducers() 将多个 reducer 合并成为一个。现在我们将其导入，并传递 createStore()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></div><div class="line"><span class="keyword">let</span> store = createStore(todoApp)</div></pre></td></tr></table></figure>
<p>createStore() 的第二个参数是可选的, 用于设置 state 初始状态。这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> store = createStore(todoApp, <span class="built_in">window</span>.STATE_FROM_SERVER)</div></pre></td></tr></table></figure>
<h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>严格的单向数据流是 Redux 架构的设计核心。</p>
<p>Redux 应用中数据的生命周期遵循下面 4 个步骤：</p>
<ol>
<li>调用 store.dispatch(action)。</li>
</ol>
<p>Action 就是一个描述“发生了什么”的普通对象。比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">type</span>: <span class="string">'LIKE_ARTICLE'</span>, <span class="attr">articleId</span>: <span class="number">42</span> &#125;;</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_USER_SUCCESS'</span>, <span class="attr">response</span>: &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'Mary'</span> &#125; &#125;;</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>, <span class="attr">text</span>: <span class="string">'Read the Redux docs.'</span>&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>Redux store 调用传入的 reducer 函数。</li>
<li>根 reducer 应该把多个子 reducer 输出合并成一个单一的 state 树。</li>
<li>Redux store 保存了根 reducer 返回的完整 state 树。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用字体在网页中画ICON图标]]></title>
      <url>http://yoursite.com/2016/08/21/2016-08-21-Font-css/</url>
      <content type="html"><![CDATA[<blockquote>
<p>适当的图标，可以达到一图胜千言的效果。</p>
</blockquote>
<h3 id="CSS-Sprite"><a href="#CSS-Sprite" class="headerlink" title="CSS Sprite"></a>CSS Sprite</h3><p>实现技术：background-position , background-images;</p>
<p>使用原理：</p>
<pre><code>1、使用backgrou-position定位，background-images导入图片；
2、以整张图片的左上角为坐标原点，向右，向下区负值，即位于坐标的第四象限;
</code></pre><p>特点：</p>
<pre><code>1、相对于单个小图标节省文件体积和减少服务器请求次数；
2、一般情况下，保存为PNG-24位文件格式；
3、可以设计出丰富多彩的icon；
</code></pre><p>难点：</p>
<pre><code>1、需要预先确定每个图标的大小；
2、注意小图标和小图标之间的距离；
3、细心+耐心；
</code></pre><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>优点：</p>
<pre><code>1、灵活性：轻松地改变图标的颜色或其他CSS效果;
2、可扩展:改变图标的大小，就像改变字体大小一样容易;
3、矢量性：图标是矢量的，与像素无关。缩放图标不会影响清晰度;
4、兼容性：字体图标支持所有现代浏览器（包括IE6）;
5、本地使用：通过添加定制字体到您的本地系统，你可以在各种不同的设计和编辑应用程序中使用它们;
</code></pre><p>图标推荐网站：<a href="https://icomoon.io" target="_blank" rel="external">https://icomoon.io</a></p>
<p>图标变成字体简介网站: <a href="http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html" target="_blank" rel="external">http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html</a></p>
<p>字体文件格式：</p>
<pre><code>1、EOT：微软开发，ie专用字体；
2、WOFF：W3C推荐；
3、TTF：操作系统常用字体；
4、SVG：W3C定制的开放标准的图形格式；
</code></pre><p>代码示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@font-face&#123;</div><div class="line">    font-family: "imooc-icon";</div><div class="line">    src: url("../fonts/icomoon.eot"); /* IE9 兼容模式 */</div><div class="line">    src: url("../fonts/icomoon.eot?#iefix") format("embedded-opentype")</div><div class="line">    ,url("../fonts/icomoon.woff") format("woff")</div><div class="line">    ,url("../fonts/icomoon.ttf") format("truetype")</div><div class="line">    ,url("../fonts/icomoon.svg") format("svg");</div><div class="line">    font-weight: normal;</div><div class="line">    font-style: normal;</div><div class="line">&#125;</div><div class="line">// 抗锯齿显示优化</div><div class="line">-webkit-font-smoothing: antialiased;</div><div class="line">-moz-osx-font-smoothing: grayscale;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《JavaScript模式》阅读笔记]]></title>
      <url>http://yoursite.com/2016/04/26/2016-04-26-JavaScriptPatterns_-javascrip/</url>
      <content type="html"><![CDATA[<h3 id="JavaScript：基本概念"><a href="#JavaScript：基本概念" class="headerlink" title="JavaScript：基本概念"></a>JavaScript：基本概念</h3><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>JavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法。</p>
<p>对象主要有两种类型：</p>
<p>1.原生的（Native）：在ECMAScript标准中有详细描述——内置对象和用户自定义对象。</p>
<p>2.主机的（Host）：在主机环境中定义的（例如浏览器环境）——windows对象和所有的DOM对象。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>JavaScript中的函数有两个主要特点使其显得比较特殊。第一个特点在于函数是第一类对象，第二个特点是它们可以提供作用域。</p>
<ol>
<li>函数可以在运行时动态创建，还可以在程序执行过程中创建。</li>
<li>函数可以分配给变量，可以将他们的引用复制到其他变量，可以被扩展，此外，除少数特殊情况外，函数可以被删除。</li>
<li>可以作为参数传递给其他函数，并且还可以由其他函数返回。</li>
<li>函数可以有自己的属性和方法。</li>
</ol>
<h4 id="回调模式"><a href="#回调模式" class="headerlink" title="回调模式"></a>回调模式</h4><p>函数都是对象，这表示它们可以作为参数传递给其他函数。当将函数introduceBugs()作为参数传递给函数writeCode()时，那么在某一时刻writeCode()可能会执行（或者调用）introduceBugs()。在这种情况下，introduceBugs()就被称之为回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="comment">//执行一些任务</span></div><div class="line">    callback();</div><div class="line">    <span class="comment">//.............</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">introduceBugs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//....引入漏洞</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">writeCode(introduceBugs);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意writeCode()传递的introduceBugs，是不带括号的。带括号表示传递执行函数，不带括号表示传递引用。</p>
</blockquote>
<h4 id="回调与作用域"><a href="#回调与作用域" class="headerlink" title="回调与作用域"></a>回调与作用域</h4><p>回调并不是一次性的匿名函数或全局函数，而是对象的方法。如果该回调方法使用this来引用它所属的对象，这可能会导致意想不到的意外发生。</p>
<p>假设回调函数是paint()，它是一个名为myapp的对象的方法:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myapp = &#123;&#125;;</div><div class="line">myapp.color = <span class="string">"green"</span>;</div><div class="line">myapp.paint = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    node.style.color = <span class="keyword">this</span>.color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数findNodes()执行以下语句：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> findNodes = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">"function"</span>) &#123;</div><div class="line">        callback(found);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果调用findNodes(myapp.paint)，它并不会按照预期那样执行，这是由于this.color没有定义。由于findNodes()是一个全局函数，因此，对象this引用了全局对象。</p>
<p>对于这个问题的解决方案就是传递回调函数的同事传递改回调函数所属的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">findNodes(myapp.paint, myapp);</div></pre></td></tr></table></figure></p>
<p>然后，还需要修改findNodes()以绑定所传入的对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> findNodes = <span class="function"><span class="keyword">function</span>(<span class="params">callback, callback_obj</span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">"function"</span>) &#123;</div><div class="line">        callback.call(callback_obj, found);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="异步事件监听器"><a href="#异步事件监听器" class="headerlink" title="异步事件监听器"></a>异步事件监听器</h4><p>回调模式有很多用途，比如，当附加一个事件监听器到页面上的一个元素时，实际上提供了一个回调函数指针，该函数将会在事件发生时被调用。</p>
<pre><code>document.addEventListener(&quot;click&quot;, console.log, false);
</code></pre><p>JavaScript特别适合用于事件驱动编程，因为回调模式支持您的程序以异步方式运行，也就是说，可以乱序运行。</p>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>如果创建了一个函数并且将其分配给保存了另外函数的同一个变量，那么就以一个新函数覆盖了旧函数。从某种程度上来说，回收了就函数指针以指向一个新函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scareMe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"Boo!"</span>)；</div><div class="line">    scareMe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"Double boo!"</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 使用自定义函数</span></div><div class="line">scareMe();<span class="comment">// 输出Boo!</span></div><div class="line">scareMe();<span class="comment">// 输出Double boo!</span></div></pre></td></tr></table></figure>
<p>当您的函数有一些初始化准备工作要做，并且仅需要执行一次，这种模式就非常有用。</p>
<h4 id="即时函数"><a href="#即时函数" class="headerlink" title="即时函数"></a>即时函数</h4><p>即时函数试试一种可以支持在定义函数后立即执行该函数的语法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"watch out!"</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>它为初始化代码提供了一个作用域沙箱，用以将所有代码包装到它的局部作用域中，且不会将任何变量泄露到全局作用域中。</p>
<h4 id="即时对象初始化"><a href="#即时对象初始化" class="headerlink" title="即时对象初始化"></a>即时对象初始化</h4><p>保护全局作用域不受污染的另一种方法，类似于前面介绍的即时函数模式，也就是下面介绍的即时函数初始化，该方法在创建对象后会立即执行。init()函数需要负责所有的初始化任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(&#123;</div><div class="line">    <span class="comment">//在这里可以定义设定值</span></div><div class="line">    maxwidth: <span class="number">600</span>,</div><div class="line">    <span class="attr">maxheight</span>: <span class="number">400</span>,</div><div class="line"></div><div class="line">    <span class="comment">//定义方法</span></div><div class="line">    gimmeMax: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.maxwidth + <span class="string">"x"</span> + <span class="keyword">this</span>.maxheight;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.gimmeMax());</div><div class="line">    &#125;</div><div class="line">&#125;).init();</div></pre></td></tr></table></figure>
<p>优点：保护全局命名空间；使整个初始化过程显得更有结构化。</p>
<blockquote>
<p>注意：这种模式主要适用于一次性的任务，而且在init()完毕后也没有对改对象的访问。如果想在init()完毕后保存对该兑现的一个引用，可以通过在init()尾部添加<code>&quot;return this;&quot;</code>语句实现该功能。</p>
</blockquote>
<h4 id="初始化时分支"><a href="#初始化时分支" class="headerlink" title="初始化时分支"></a>初始化时分支</h4><p>初始化时分支（加载时分支）是一种优化模式。当知道某个条件在整个程序的生命周期内都不会发生改变的时候，仅对该条件测试一次是深有意义的。浏览器功能检测就是一个典型的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//优化之前</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">    <span class="attr">addListener</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.addEventListener === <span class="string">"function"</span>) &#123;</div><div class="line">            el.addEventListener(type, fn, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.attachEvent === <span class="string">"function"</span>) &#123;</div><div class="line">            el.attachEvent(<span class="string">"on"</span> + type, fn);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            el[<span class="string">"on"</span> + type] = fn;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">removeListener</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        <span class="comment">//几乎一样</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此代码效率比较低下，每次在调用tuils.addListener()时，都将会重复地执行相同的检查，下面是使用初始化分支进行优化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接口</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">    <span class="attr">addListener</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">removeListener</span>: <span class="literal">null</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//实现</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.addEventListener === <span class="string">"function"</span>) &#123;</div><div class="line">    utils.addListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        el.addEventListener(type, fn, <span class="literal">false</span>);</div><div class="line">    &#125;;</div><div class="line">    utils.removeListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        el.removeListener(type, fn, <span class="literal">false</span>);</div><div class="line">    &#125;;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.attachEvent === <span class="string">"function"</span>) &#123; <span class="comment">// 判断为IE浏览器</span></div><div class="line">    utils.addListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        el.attachEvent(<span class="string">"on"</span> + type, fn);</div><div class="line">    &#125;;</div><div class="line">    utils.removeListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        el.detachEvent(<span class="string">"on"</span> + type, fn);</div><div class="line">    &#125;;</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 更早版本的浏览器</span></div><div class="line">    utils.addListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        el[<span class="string">"on"</span> + type] = fn;</div><div class="line">    &#125;;</div><div class="line">    utils.removeListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>) </span>&#123;</div><div class="line">        el[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数属性——备忘模式"><a href="#函数属性——备忘模式" class="headerlink" title="函数属性——备忘模式"></a>函数属性——备忘模式</h4><p>函数是对象，因此他们具有属性。事实上，它们确实还有属性和方法。例如，对于每一个函数，无论使用什么样的语法来创建它，它都会自动获得一个length属性，其中包含了该函数期望的参数数量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, c</span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(func.length); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>可以在任何时候讲自定义属性添加到你的函数中。自动以舒心的其中一个用例是缓存函数结果，因此，在下一次调用就不用重做潜在的繁重计算。缓存函数结果也被称为备忘。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!myFunc.cache[param]) &#123;</div><div class="line">        <span class="keyword">var</span> result = &#123;&#125;;</div><div class="line">        <span class="comment">// ..开销很大的操作</span></div><div class="line">        myFunc.cache[param] = result;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> myFunc.cache[param];</div><div class="line">&#125;;</div><div class="line"><span class="comment">//缓存存储</span></div><div class="line">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>
<h4 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h4><p>在函数需要传递的参数很多时，可以使用一个对象包含所有参数再作为参数传递到函数中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> conf = &#123;</div><div class="line">    <span class="attr">username</span>: <span class="string">"Boo"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">45</span></div><div class="line">&#125;</div><div class="line">addPerson(conf);</div></pre></td></tr></table></figure>
<p>优点：</p>
<ul>
<li>不需要记住众多的参数以及顺序；</li>
<li>可以安全忽略可选参数；</li>
<li>更加易于阅读和维护；</li>
<li>更加易于添加和删除参数。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要记住参数名称；</li>
<li>属性名称无法被压缩。</li>
</ul>
<h3 id="对象创建模式"><a href="#对象创建模式" class="headerlink" title="对象创建模式"></a>对象创建模式</h3><h4 id="命名空间模式"><a href="#命名空间模式" class="headerlink" title="命名空间模式"></a>命名空间模式</h4><p>命名空间有助于减少程序中所需的全局变量的数量，并且同时还有助于避免命名冲突或过长的名字前缀。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局变量</span></div><div class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;;</div><div class="line"><span class="comment">// 构造函数</span></div><div class="line">MYAPP.Parent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">MYAPP.Child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="comment">// 一个变量</span></div><div class="line">MYAPP.some_var = <span class="number">1</span>;</div><div class="line"><span class="comment">// 一个对象容器</span></div><div class="line">MYAPP.modules = &#123;&#125;;</div><div class="line"><span class="comment">// 嵌套对象</span></div><div class="line">MYAPP.modules.module1 = &#123;&#125;;</div><div class="line">MYAPP.modules.module1.data = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</div></pre></td></tr></table></figure>
<p>缺点：</p>
<ul>
<li>需要输入更多的字符串，每个变脸和函数迁都要附加前缀，总体上增加了需要下载的代码量。</li>
<li>仅有一个全局实例意味着任何部分的代码都可以修改全局实例，并且其余的功能能够获得更新后的状态。</li>
<li>长嵌套名字意味着更长的属性解析查询时间。</li>
</ul>
<p>接下来封装一个命名空间函数的创建方法，这个实现是非破坏性的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MYAPP = MYAPP || &#123;&#125;;</div><div class="line">MYAPP.namespace = <span class="function"><span class="keyword">function</span>(<span class="params">ns_string</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> parts = ns_string.split(<span class="string">"."</span>),</div><div class="line">        parent = MYAPP,</div><div class="line">        i;</div><div class="line">    <span class="comment">// 剥离最前面的冗余全局变量</span></div><div class="line">    <span class="keyword">if</span> (parent[<span class="number">0</span>] === <span class="string">"MYAPP"</span>) &#123;</div><div class="line">        parts = parts.slice(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</div><div class="line">        <span class="comment">// 如果存在，就创建一个属性</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[parts[i]] === <span class="string">"undefined"</span>) &#123;</div><div class="line">            parent[parts[i]] = &#123;&#125;;</div><div class="line">        &#125;</div><div class="line">        parent = parent[parts[i]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> parent;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将返回值赋给一个全局变量</span></div><div class="line"><span class="keyword">var</span> module2 = MYAPP.namespace(<span class="string">"MYAPP.modules.module2"</span>);</div></pre></td></tr></table></figure>
<h4 id="声明依赖关系"><a href="#声明依赖关系" class="headerlink" title="声明依赖关系"></a>声明依赖关系</h4><p>在函数顶部或模块顶部声明代码所以来的模块。</p>
<h4 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h4><p>JavaScript并没有包（package）的特殊语法，但是模块模式提供了一种创建自包含非耦合代码片段的有力工具，可以将它视为黑盒模式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">MYAPP.namespace(<span class="string">"MYAPP.utilities.array"</span>);</div><div class="line">MYAPP.utilities.array = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 依赖</span></div><div class="line">    <span class="keyword">var</span> uobj = MYAPP.utilities.object,</div><div class="line">        ulang = MYAPP.utilities.lang,</div><div class="line">        <span class="comment">// 私有属性</span></div><div class="line">        array_string = <span class="string">"[Object Array]"</span>,</div><div class="line">        ops = <span class="built_in">Object</span>.prototype.toString;</div><div class="line">    <span class="comment">// 私有方法。。。。。</span></div><div class="line"></div><div class="line">    <span class="comment">// 公有API</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">inArray</span>: <span class="function"><span class="keyword">function</span>(<span class="params">needle, haystack</span>) </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = haystack.length; i &lt; max; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (haystack[i] === needle) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">isArray</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> ops.call(a) === array_string;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h4 id="沙箱模式"><a href="#沙箱模式" class="headerlink" title="沙箱模式"></a>沙箱模式</h4><p>在沙箱模式中，可以使用全局构造函数创建对象并且还可以传递回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Sandbox(<span class="function"><span class="keyword">function</span>(<span class="params">box</span>) </span>&#123;</div><div class="line">    <span class="comment">// 代码写在这里.....</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="实现构造函数"><a href="#实现构造函数" class="headerlink" title="实现构造函数"></a>实现构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SandBox</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 将参数转换成一个数组</span></div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>),</div><div class="line">        <span class="comment">// 最后一个参数是回调函数</span></div><div class="line">        callback = args.pop(),</div><div class="line">        <span class="comment">// 模块可以作为一个数组传递，或作为单独的参数传递</span></div><div class="line">        modules = (args[<span class="number">0</span>] &amp;&amp; <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">"string"</span>) ? args : args[<span class="number">0</span>],</div><div class="line">        i;</div><div class="line">    <span class="comment">// 确保该函数作为构造函数被调用</span></div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> SandBox)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SandBox(modules, callback);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 需要向this添加属性</span></div><div class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.b = <span class="number">2</span>;</div><div class="line">    <span class="comment">// 向this对象添加模块</span></div><div class="line">    <span class="keyword">if</span> (!modules || modules === <span class="string">'*'</span>) &#123;</div><div class="line">        modules = [];</div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> SandBox.modules) &#123;</div><div class="line">            <span class="keyword">if</span> (SandBox.modules.hasOwnProperty(i)) &#123;</div><div class="line">                modules.push(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化所需模块</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; modules.length; i++) &#123;</div><div class="line">        SandBox.modules[modules[i]](<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 调用回调函数</span></div><div class="line">    callback(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// 所需要的任何原型属性</span></div><div class="line">    SandBox.prototype = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'My App'</span>,</div><div class="line">        <span class="attr">version</span>: <span class="string">"1.0"</span>,</div><div class="line">        <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代码复用模式"><a href="#代码复用模式" class="headerlink" title="代码复用模式"></a>代码复用模式</h3><p>优先使用对象组合，而不是类继承。</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式的思想在于保证一个特定类仅有一个实例。这意味着当第二次使用同一个类创建新对象的时候，应该得到与第一次所创建的对象完全相同的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    myprop = <span class="string">'my value'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;</div><div class="line">    myprop = <span class="string">'my value'</span></div><div class="line">&#125;;</div><div class="line">obj === obj2; <span class="comment">// false</span></div><div class="line">obj == obj2; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>可以认为每次在使用对象字面量创建对象的时候，实际上创建一个单例，并且不设计任何特殊语法。</p>
</blockquote>
<p>下面是通过使用闭包来实现单例模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 缓存实例</span></div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line">    <span class="comment">// 重写构造函数</span></div><div class="line">    Universe.instance = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> instance();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 保留原型属性</span></div><div class="line">    Universe.prototype = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// 实例</span></div><div class="line">    instance = <span class="keyword">new</span> Universe();</div><div class="line">    <span class="comment">// 重置构造函数指针</span></div><div class="line">    instance.contructor = Universe;</div><div class="line">    <span class="comment">// 所有功能</span></div><div class="line">    instance.start_time = <span class="number">0</span>;</div><div class="line">    instance.bang = <span class="string">'big'</span>;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>设计工厂模式的目的是为了创建对象，它通常在类或者类的静态方法中实现，具有以下目标：</p>
<ul>
<li>当创建相似对象时执行重复操作；</li>
<li>在编译时不知道具体类型（类）的情况下，为工厂客户提供一种创建对象的接口。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarMaker</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 一个父方法</span></div><div class="line">CarMaker.prototype.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Vroom, I have"</span> + <span class="keyword">this</span>.doors + +<span class="string">"doors"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 静态工厂方法</span></div><div class="line">CarMaker.factory = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> constr = type,</div><div class="line">            newcar;</div><div class="line">        <span class="comment">// 如果构造函数不存在，则发生错误</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> CarMaker[constr] !== <span class="string">"function"</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">"Error"</span>,</div><div class="line">                <span class="attr">message</span>: constr + <span class="string">" doesn't exist"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 判断是否继承父类</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> CarMaker[constr].prototype.drive !== <span class="string">"function"</span>) &#123;</div><div class="line">            CarMaker[constr]..prototype = <span class="keyword">new</span> CarMaker();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 创建一个新的实例</span></div><div class="line">        newcar = <span class="keyword">new</span> CarMaker[constr]();</div><div class="line">        <span class="comment">// 可选择性的调用一些方法然后返回。。。</span></div><div class="line">        <span class="keyword">return</span> newcar;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 定义特定的汽车制造商</span></div><div class="line">CarMaker.Compact = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.doors = <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line">CarMaker.Convertible = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.doors = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">CarMaker.SUV = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.doors = <span class="number">24</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="keyword">var</span> corolla = Compact.factory(<span class="string">'Compact'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>在JavaScript中，内置的全局Object()构造函数是内置的对象工厂，根据输入类型而创建不同的对象。</p>
</blockquote>
<h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能存储在一个复杂的数据结构中，对象的消费者并不需要知道如何组织数据，所有需要做的就是去除单个数据进行工作。</p>
<p>在迭代器模式中，对象需要提供一个next()方法。依次调用next()必须返回下一个连续的元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> agg = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">        data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</div><div class="line">        length = data.length;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> element;</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.hasNext()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125;</div><div class="line">            element = data[index];</div><div class="line">            index = index + <span class="number">2</span>;</div><div class="line">            <span class="keyword">return</span> element;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">hasNext</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> index &lt; length;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>可以在运行时添加附件功能到对象中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.price = (price &gt; <span class="number">0</span>) || <span class="number">100</span>;</div><div class="line">    <span class="keyword">this</span>.decorators_list = &#123;&#125;;</div><div class="line">&#125;</div><div class="line">Sale.decorators = &#123;&#125;;</div><div class="line">Sale.decorators.fedtax = &#123;</div><div class="line">    <span class="attr">getPrice</span>: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> price + price * <span class="number">5</span> / <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Sale.decorators.quebec = &#123;</div><div class="line">    <span class="attr">getPrice</span>: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> price + price * <span class="number">7.5</span> / <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Sale.decorators.money = &#123;</div><div class="line">    <span class="attr">getPrice</span>: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"$"</span> + price.toFixed(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorators</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.decorators_list.push(decorator);</div><div class="line">&#125;;</div><div class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> price = <span class="keyword">this</span>.price,</div><div class="line">            i,</div><div class="line">            max = <span class="keyword">this</span>.decorators_list.length,</div><div class="line">            name;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</div><div class="line">            name = <span class="keyword">this</span>.decorators_list[i];</div><div class="line">            price = Sale.decorators[name].getPrice(price);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 使用</span></div><div class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>); <span class="comment">// 该价格为100美元</span></div><div class="line">sale.decorate(<span class="string">'fedtax'</span>); <span class="comment">// 增加联邦税</span></div><div class="line">sale.decorate(<span class="string">'quebec'</span>); <span class="comment">// 增加省联邦税</span></div><div class="line">sale.decorate(<span class="string">'money'</span>); <span class="comment">// 格式化为美元格式</span></div><div class="line">sale.getPrice(); <span class="comment">// "$112.88"</span></div></pre></td></tr></table></figure>
<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式支持您正在运行时选择算法。代码的客户端可以使用同一个接口来进行工作，但是它却根据客户正在试图执行任务的上下文，从多个算法中选择出用于处理特定任务的算法。</p>
<p>使用策略模式的一个例子是解决表单验证的问题。无论表单的对象具体是什么，该方法都会被调用，并且总是返回相同的结果，一个未经验证的书列表以及任意的错误信息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> validator = &#123;</div><div class="line">        <span class="comment">// 所有可用的检查</span></div><div class="line">        types: &#123;&#125;,</div><div class="line">        <span class="comment">// 在当前验证回话中的错误信息</span></div><div class="line">        messages: [],</div><div class="line">        <span class="comment">// 当前验证配置 名称：验证类型</span></div><div class="line">        conifg: &#123;&#125;,</div><div class="line">        <span class="comment">//接口方法</span></div><div class="line">        validate: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> i, msg, type, checker, result_ok;</div><div class="line">            <span class="comment">// 重置所有消息</span></div><div class="line">            <span class="keyword">this</span>.messages = [];</div><div class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> data) &#123;</div><div class="line">                <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</div><div class="line">                    type = <span class="keyword">this</span>.types[type];</div><div class="line">                    checker = <span class="keyword">this</span>.types[type];</div><div class="line">                    <span class="keyword">if</span> (!type) &#123;</div><div class="line">                        <span class="keyword">continue</span>; <span class="comment">// 不需要验证</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (!checker) &#123;</div><div class="line">                        <span class="keyword">throw</span> &#123;</div><div class="line">                            <span class="attr">name</span>: <span class="string">"ValidationError"</span>,</div><div class="line">                            <span class="attr">message</span>: <span class="string">"No handler to validate type "</span> + type;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    result_ok = checker.validate(data[i]);</div><div class="line">                    <span class="keyword">if</span> (!result_ok) &#123;</div><div class="line">                        msg = <span class="string">"Invalid value for *"</span> + i + <span class="string">"*, "</span> + checker.instructions;</div><div class="line">                        <span class="keyword">this</span>.messages.push(msg);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hasErrors();</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 帮助操作</span></div><div class="line">        hasErrors: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.messages.length !== <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 配置</span></div><div class="line">validator.config = &#123;</div><div class="line">        <span class="attr">age</span>: <span class="string">'isNumber'</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 验证方法</span></div><div class="line">validator.types.isNumber = &#123;</div><div class="line">    <span class="attr">validate</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="built_in">isNaN</span>(value);</div><div class="line">    &#125;</div><div class="line">    instructions: <span class="string">"the value can only be a valid number, e.g. 1, 3.14 or 2010"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><p>外观模式为对象提供了一个可选择的接口，可保持方法的间接性并且不会使它们处理过多的工作。</p>
<p>适用于处理浏览器脚本处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myevent = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    stop: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="comment">// 其他</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> e.preventDefault === <span class="string">"function"</span>) &#123;</div><div class="line">            e.preventDefault();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> e.stopPropagation === <span class="string">"function"</span>) &#123;</div><div class="line">            e.stopPropagation();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// IE浏览器</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> e.returnValue === <span class="string">"boolean"</span>) &#123;</div><div class="line">            e.returnValue = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> e.cancelBubble === <span class="string">"boolean"</span>) &#123;</div><div class="line">            e.cancelBubble = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p>
<p>所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。代理模式的思想是为了提供额外的处理或者不同的操作而在实际对象与调用者之间插入一个代理对象。这些额外的操作通常需要与实际对象进行通信。</p>
<h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>中介者模式（Mediator），用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
<p>软件开发中，中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。一般，如果系统有很多子模块需要直接沟通，都要创建一个中央控制点让其各模块通过该中央控制点进行交互。中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的。</p>
<p><a href="http://www.cnblogs.com/TomXu/archive/2012/03/13/2374789.html" target="_blank" rel="external">设计模式之中介者模式</a></p>
<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>
<p>使用观察者模式的好处：</p>
<ol>
<li>支持简单的广播通信，自动通知所有已经订阅过的对象。</li>
<li>页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。</li>
<li>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。</li>
</ol>
<p><a href="http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html" target="_blank" rel="external">设计模式之观察者模式</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能javascript]]></title>
      <url>http://yoursite.com/2016/03/08/2016-03-08-high_js-javascrip/</url>
      <content type="html"><![CDATA[<h3 id="1-加载和运行"><a href="#1-加载和运行" class="headerlink" title="1.加载和运行"></a>1.加载和运行</h3><h4 id="1-1脚本位置"><a href="#1-1脚本位置" class="headerlink" title="1.1脚本位置"></a>1.1脚本位置</h4><p>当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的。</p>
<p>如果把脚本的加载放到 head 标签中，那么浏览器会优先加载 script 脚本，第一个js文件下载并运行完成后才开始第二个js文件的加载。现在的浏览器都允许并行加载js文件，但并没有解决根本性的问题，因此，最好的解决方法就是：</p>
<blockquote>
<p>将javscript脚本放在底部</p>
</blockquote>
<h4 id="1-2成组脚本"><a href="#1-2成组脚本" class="headerlink" title="1.2成组脚本"></a>1.2成组脚本</h4><p>减少js脚本数量，减少http请求，最好将js压缩合并。</p>
<h4 id="1-3非阻塞脚本"><a href="#1-3非阻塞脚本" class="headerlink" title="1.3非阻塞脚本"></a>1.3非阻塞脚本</h4><p>意思就是等页面加载完成之后在加载js代码。</p>
<p>1.延期脚本</p>
<p>使用 script 的扩展属性 defer，作用是告知浏览器当前 js 脚本没有操作dom，因此代码可以稍后执行，但是缺点是只支持ie和ff。</p>
<p>2.动态脚本元素</p>
<p>使用 script 操作dom来动态加载js，这样，无论在何处下载，都不会阻塞页面的其他进程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.type = <span class="string">'text/javascript'</span>;</div><div class="line">    <span class="keyword">if</span>(script.readyState)&#123;  <span class="comment">//IE下</span></div><div class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">'loaded'</span> || script.readyState == <span class="string">'complete'</span>)&#123;</div><div class="line">                script.onreadystatechange = <span class="literal">null</span>;</div><div class="line">                callback();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//其他浏览器</span></div><div class="line">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    script.src = url;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.XHR脚本注入</p>
<p>使用XMLHttpRequest()对象来请求所需要加载的脚本，请求成功后动态添加到页面。最主要的限制是不能跨域，只能在同一个域中。正因为这个原因，大型网站通常不用XHR脚本注入技术。</p>
<h3 id="2-数据访问"><a href="#2-数据访问" class="headerlink" title="2.数据访问"></a>2.数据访问</h3><p>数据存储在哪里，关系到代码运行期间数据被检索到的速度，在javascript中有四种基本的数据访问位置。</p>
<p>1.直接量:直接量仅代表自己，包括：字符串，数字，布尔值，对象，数组，函数，正则表达式，null，undefined。</p>
<p>2.变量:使用var创建用于存储数据值。</p>
<p>3.数组项:具有数字索引，存储一个js数组对象。</p>
<p>4.对象成员:具有字符索引，存储一个js对象。</p>
<h4 id="2-1管理作用域"><a href="#2-1管理作用域" class="headerlink" title="2.1管理作用域"></a>2.1管理作用域</h4><p>对所有浏览器来说，一个标识符所在的位置越深，读写他的速度就越慢，在没有优化的js引擎中，最好尽可能使用局部变量，或用局部变量存储全局变量从而减少访问全局变量的次数。</p>
<blockquote>
<p>尽可能不使用with()，小心使用try-catch</p>
</blockquote>
<h3 id="3-DOM编程"><a href="#3-DOM编程" class="headerlink" title="3.DOM编程"></a>3.DOM编程</h3><p>dom操作的代价非常昂贵，通常是一个网页的性能瓶颈。</p>
<p>1.在页面大量添加或修改DOM节点时，最好将所有的节点保存起来，最后再添加到页面上。</p>
<blockquote>
<p>innerHTML和DOM操作的性能差别不大，区别是innerHTML在旧版本浏览器效率高，而DOM操作在新版浏览器效率高。具体选择哪一个要根据你所在团队的编码风格和你的编码习惯来看。</p>
</blockquote>
<p>2.如果同一个DOM属性或方法被访问一次以上，最好使用一个局部变量来缓存次DOM成员。</p>
<p>3.在获取元素节点时，nextSibling和childNode在不同浏览器上运行时间基本相等，但是，在老的IE中，nextSibling要快的多。</p>
<p>4.在新版本浏览器中，使用querySelectorAll()和firstElementChild()的效率更加高。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将class为warning和notice的div选择出来</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'div.warning,div.notice'</span>);</div></pre></td></tr></table></figure>
<p>5.在IE中，大量使用:hover这个伪选择器会降低反应速度。</p>
<p>6.使用时间委托（事件逐层冒泡总能被父元素捕获）。</p>
<h3 id="4-算法和流程控制"><a href="#4-算法和流程控制" class="headerlink" title="4.算法和流程控制"></a>4.算法和流程控制</h3><p>代码整体结构是执行速度的决定因素之一。代码量少不一定运行速度快，代码量多也不一定运行速度慢。性能损失与代码组织方式和具体问题解决办法直接相关。</p>
<h4 id="4-1循环"><a href="#4-1循环" class="headerlink" title="4.1循环"></a>4.1循环</h4><p>for,while,do-while的性能特性相似，但是for-in的效率较慢。</p>
<p>1.要尽可能减少迭代的次数，使用达夫循环。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 每次循环中最多8次调用process()函数，循环次数为元素综合/8.</span></div><div class="line"><span class="comment">// startAt存放余数,指出第一次循环的次数。</span></div><div class="line"><span class="keyword">var</span> interations = <span class="built_in">Math</span>.floor(items.length / <span class="number">8</span>);</div><div class="line"><span class="keyword">var</span> startAt = items.length % <span class="number">8</span>;</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (startAt) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            process(items[i++]);</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            process(items[i++]);</div><div class="line">    &#125;</div><div class="line">    startAt = <span class="number">0</span>;</div><div class="line">&#125; <span class="keyword">while</span> (--interations);</div></pre></td></tr></table></figure>
<p>下面是优化版本，将余数处理和主循环分开：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = items.length % <span class="number">8</span>;</div><div class="line"><span class="keyword">while</span> (i) &#123;</div><div class="line">    process(items[i--]);</div><div class="line">&#125;</div><div class="line">i = <span class="built_in">Math</span>.floor(items.length / <span class="number">8</span>);</div><div class="line"><span class="keyword">while</span> (i) &#123;</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">    process(items[i--]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.基于函数的迭代——forEach()，虽然比较便利，但是比起基于循环的迭代还是要慢一些。</p>
<h4 id="4-2递归"><a href="#4-2递归" class="headerlink" title="4.2递归"></a>4.2递归</h4><p>1.浏览器的调用栈尺寸限制了递归算法在JavaScript中的应用：栈溢出错误导致其他代码也不能执行。</p>
<p>2.运行的代码总量越大，使用这些策略带来的提升就越明显。</p>
<h3 id="5-字符串和正则表达式"><a href="#5-字符串和正则表达式" class="headerlink" title="5.字符串和正则表达式"></a>5.字符串和正则表达式</h3><h4 id="5-1字符串连接"><a href="#5-1字符串连接" class="headerlink" title="5.1字符串连接"></a>5.1字符串连接</h4><p>1.在拼接字符串时，使用str = str + ‘one’ + ‘two’，如果在一个循环中，基本字符串位于最左端，就可以避免多次复制一个越来越大的基本字符串。</p>
<p>2.使用数组辅助生成字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (appends--) &#123;</div><div class="line">    strs[strs.length] = str;</div><div class="line">&#125;</div><div class="line">newStr = strs.join(<span class="string">''</span>);</div></pre></td></tr></table></figure>
<p>3.大多情况下，concat比 +和+= 要慢。</p>
<h4 id="5-2正则表达式优化"><a href="#5-2正则表达式优化" class="headerlink" title="5.2正则表达式优化"></a>5.2正则表达式优化</h4><p>1.正则表达式的工作原理</p>
<p>第一步：编译</p>
<p>当创建一个正则表达式对象之后，浏览器检查模板有没有错误，然后将它转换成一个本机代码用于匹配工作。</p>
<p>第二步：设置起始位置</p>
<p>确定目标字符串中开始搜索的位置，但当匹配失败时，此位置将位于最后一次尝试起始位置退后的一个字符的位置上。</p>
<p>第三步：匹配每个正则表达式的子元</p>
<p>正则表达式一旦找好起始位置，将一个一个地扫描目标文本和正则表达式模板。当一个特定子元匹配失败时，正则表达式将试图回溯到扫描之前的位置上，然后进入正则表达式其他可能的路径上。</p>
<p>第四步：匹配成功或失败</p>
<p>2.理解回溯</p>
<p><a href="http://www.cnblogs.com/aaronjs/archive/2012/06/30/2570805.html" target="_blank" rel="external">理解回溯(来自博客园)</a></p>
<p>回溯即时正则表达式匹配功能基本的组成部分，又是正则表达式影响效率的常见原因。</p>
<p>回溯失控发生在正则表达式本应该很快发现匹配的地方，因为某些特殊的匹配夫妇串动作，导致运行缓慢甚至浏览器崩溃。避免此问题的技术包括：使相邻子元互斥，避免嵌套量词对一个字符串的相同部分多次匹配，通过重复利用前瞻操作的院子特性去除不必要的回溯。</p>
<h3 id="6-响应接口"><a href="#6-响应接口" class="headerlink" title="6.响应接口"></a>6.响应接口</h3><p>总的来说，大多数浏览器有一个单独的处理进程，它由两个任务所共享：JavaScript任务和用户界面更新任务。每个时刻只有其中的一个操作得以执行，也就是说当JavaScript代码运行时用户界面不能对输入产生反应，反之亦然。或者说，当JavaScript运行时，用户界面就被‘锁定’了。</p>
<p>1.JavaScript运行时间不应该超过100毫秒，过长的运行时间导致UI更新出现可察觉的延迟，从而对整体用户体验产生负面影响。</p>
<p>2.定时器可用于安排代码推迟执行，它使得你可以将长运行脚本分解成一系列较小的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    - 封装的使用定时器运行程序</div><div class="line">    - @param  &#123;items&#125;  事件数组</div><div class="line">    - @param  &#123;process&#125;  事件</div><div class="line">    - @param  &#123;callback&#125;   回调方法</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processArray</span>(<span class="params">items, process, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> todo = items.concat();</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        process(todo.shift());</div><div class="line">        <span class="keyword">if</span> (todo.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">25</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            callback(items);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="number">25</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line"><span class="keyword">var</span> items = [<span class="number">123</span>, <span class="number">789</span>, <span class="number">323</span>, <span class="number">232</span>, <span class="number">778</span>, <span class="number">654</span>, <span class="number">543</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputVal</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(val);</div><div class="line">&#125;</div><div class="line">processArray(items, outputVal, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>3.网页应用越来越复杂，积极主动地管理UI现成就越显得重要。没有什么JavaScript代码可以重要到允许影响到用户体验的程度。</p>
<h3 id="7-Ajax异步JavaScript和XML"><a href="#7-Ajax异步JavaScript和XML" class="headerlink" title="7.Ajax异步JavaScript和XML"></a>7.Ajax异步JavaScript和XML</h3><p>Ajax是高性能JavaScript的基石，它可以通过延迟下载大量资源使页面加载更快。</p>
<blockquote>
<p>在选在ajax传输的数据格式时，最好选用较轻便的json。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backbone.JS从入门到放弃]]></title>
      <url>http://yoursite.com/2016/02/29/2016-02-29-backbone_1-javascript/</url>
      <content type="html"><![CDATA[<h3 id="1-认识backbone"><a href="#1-认识backbone" class="headerlink" title="1.认识backbone"></a>1.认识backbone</h3><p>backbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架。</p>
<p>通过backbone，你可以把你的数据当作Models，通过Models你可以创建数据，进行数据验证，销毁或者保存到服务器上。当界面上的操作引起model中属性的变化时，model会触发change的事件;那些用来显示model状态的views会接受到model触发change的消息，进而发出对应的响应，并且重新渲染新的数据到界面。在一个完整的backbone应用中，你不需要写那些胶水代码来从DOM中通过特殊的id来获取节点，或者手工的更新HTML页面，因为在model发生变化时，views会很简单的进行自我更新。</p>
<h3 id="2-通过helloworld来认识backbone"><a href="#2-通过helloworld来认识backbone" class="headerlink" title="2.通过helloworld来认识backbone"></a>2.通过helloworld来认识backbone</h3><h3 id="3-backbone中的model实例"><a href="#3-backbone中的model实例" class="headerlink" title="3.backbone中的model实例"></a>3.backbone中的model实例</h3><p>backbone中最基础的东西就是model，这个东西就像后端开发中数据库映射的model一样，也是数据对象模型。</p>
<h4 id="3-1最简单的一个对象"><a href="#3-1最简单的一个对象" class="headerlink" title="3.1最简单的一个对象"></a>3.1最简单的一个对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./lib/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./lib/underscore.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./lib/backbone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 创建一个Man对象</span></div><div class="line">        Man = Backbone.Model.extend(&#123;</div><div class="line">            <span class="comment">// 构造函数，默认调用alert弹出 “hi”</span></div><div class="line">            initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(<span class="string">'hi'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 实例化man</span></div><div class="line">        <span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line"></div><div class="line">    &#125;)(jQuery);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-2对象赋值的两种方法"><a href="#3-2对象赋值的两种方法" class="headerlink" title="3.2对象赋值的两种方法"></a>3.2对象赋值的两种方法</h4><p>直接定义，设置默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个Man对象</span></div><div class="line">Man = Backbone.Model.extend(&#123;</div><div class="line">    <span class="comment">// 构造函数，默认调用alert弹出 “hi”</span></div><div class="line">    initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'hi'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">defaults</span> : &#123;</div><div class="line">        <span class="attr">name</span> : <span class="string">'张三'</span>,</div><div class="line">        <span class="attr">age</span> : <span class="number">38</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 实例化man</span></div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line">alert(man.get(<span class="string">'age'</span>));</div></pre></td></tr></table></figure>
<p>赋值时定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个Man对象</span></div><div class="line">Man = Backbone.Model.extend(&#123;</div><div class="line">    <span class="comment">// 构造函数，默认调用alert弹出 “hi”</span></div><div class="line">    initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'hi'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 实例化man</span></div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line">man.set(&#123;<span class="attr">name</span>:<span class="string">'李四'</span>, <span class="attr">age</span>:<span class="number">28</span>&#125;);</div><div class="line">alert(man.get(<span class="string">'age'</span>))</div></pre></td></tr></table></figure>
<h4 id="3-3对象中的方法"><a href="#3-3对象中的方法" class="headerlink" title="3.3对象中的方法"></a>3.3对象中的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个Man对象</span></div><div class="line">Man = Backbone.Model.extend(&#123;</div><div class="line">    <span class="comment">// 构造函数，默认调用alert弹出 “hi”</span></div><div class="line">    initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'hi'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">defaults</span> : &#123;</div><div class="line">        <span class="attr">name</span> : <span class="string">'张三'</span>,</div><div class="line">        <span class="attr">age</span> : <span class="number">38</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">aboutMe</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我叫'</span> + <span class="keyword">this</span>.get(<span class="string">'name'</span>) + <span class="string">'，今年'</span> + <span class="keyword">this</span>.get(<span class="string">'age'</span>) + <span class="string">'岁。'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 实例化man</span></div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line">alert(man.aboutMe());</div></pre></td></tr></table></figure>
<h4 id="3-4监听对象中属性的变化"><a href="#3-4监听对象中属性的变化" class="headerlink" title="3.4监听对象中属性的变化"></a>3.4监听对象中属性的变化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个Man对象</span></div><div class="line">Man = Backbone.Model.extend(&#123;</div><div class="line">    <span class="comment">// 构造函数，默认调用alert弹出 “hi”</span></div><div class="line">    initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'hi'</span>);</div><div class="line">        <span class="comment">// 在初始化时绑定监听 change:监听的对象</span></div><div class="line">        <span class="keyword">this</span>.bind(<span class="string">'change:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> name = <span class="keyword">this</span>.get(<span class="string">'name'</span>);</div><div class="line">            alert(<span class="string">'你改变了name属性为：'</span> + name);</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">defaults</span> : &#123;</div><div class="line">        <span class="attr">name</span> : <span class="string">'张三'</span>,</div><div class="line">        <span class="attr">age</span> : <span class="number">38</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">aboutMe</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我叫'</span> + <span class="keyword">this</span>.get(<span class="string">'name'</span>) + <span class="string">'，今年'</span> + <span class="keyword">this</span>.get(<span class="string">'age'</span>) + <span class="string">'岁。'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 实例化man</span></div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line"><span class="comment">// 设置name的值来触发change事件</span></div><div class="line">man.set(&#123;<span class="attr">name</span>:<span class="string">'gemicat'</span>&#125;);</div></pre></td></tr></table></figure>
<h4 id="3-5为对象添加验证规则，以及错误提示"><a href="#3-5为对象添加验证规则，以及错误提示" class="headerlink" title="3.5为对象添加验证规则，以及错误提示"></a>3.5为对象添加验证规则，以及错误提示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个Man对象</span></div><div class="line">Man = Backbone.Model.extend(&#123;</div><div class="line">    <span class="comment">// 构造函数，默认调用alert弹出 “hi”</span></div><div class="line">    initialize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</div><div class="line">        <span class="comment">// 在初始化时绑定监听 change:监听的对象</span></div><div class="line">        <span class="keyword">this</span>.bind(<span class="string">'change:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> name = <span class="keyword">this</span>.get(<span class="string">'name'</span>);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'你改变了name属性为：'</span> + name);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 绑定当遇到错误出如何处理</span></div><div class="line">        <span class="keyword">this</span>.on(<span class="string">'invalid'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">model, error</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(error);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">defaults</span> : &#123;</div><div class="line">        <span class="attr">name</span> : <span class="string">'张三'</span>,</div><div class="line">        <span class="attr">age</span> : <span class="number">38</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 设置错误类型，当名字为空时返回以下字符串</span></div><div class="line">    validate : <span class="function"><span class="keyword">function</span>(<span class="params">attrs</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(attrs.name == <span class="string">''</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"name不能为空"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">aboutMe</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'我叫'</span> + <span class="keyword">this</span>.get(<span class="string">'name'</span>) + <span class="string">'，今年'</span> + <span class="keyword">this</span>.get(<span class="string">'age'</span>) + <span class="string">'岁。'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 实例化man</span></div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line"><span class="comment">// 设置空 name，必须要加&#123;validate:true&#125;来强制使用错误检测</span></div><div class="line">man.set(&#123;<span class="attr">name</span>:<span class="string">''</span>&#125;,&#123;<span class="attr">validate</span>:<span class="literal">true</span>&#125;);</div></pre></td></tr></table></figure>
<h3 id="4-backbone的collection实例"><a href="#4-backbone的collection实例" class="headerlink" title="4.backbone的collection实例"></a>4.backbone的collection实例</h3><p>collection是model对象的一个有序的集合</p>
<h4 id="4-1关于book和bookself的例子"><a href="#4-1关于book和bookself的例子" class="headerlink" title="4.1关于book和bookself的例子"></a>4.1关于book和bookself的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Book = Backbone.Model.extend(&#123;</div><div class="line">    <span class="attr">default</span> : &#123;</div><div class="line">        <span class="attr">title</span> : <span class="string">'default'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">initalize</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// init事件</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">BookShelf = Backbone.Collection.extend(&#123;</div><div class="line">    <span class="attr">model</span> : Book</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> book1 = <span class="keyword">new</span> Book(&#123;<span class="attr">title</span>:<span class="string">'book1'</span>&#125;);</div><div class="line"><span class="keyword">var</span> book2 = <span class="keyword">new</span> Book(&#123;<span class="attr">title</span>:<span class="string">'book2'</span>&#125;);</div><div class="line"><span class="keyword">var</span> book3 = <span class="keyword">new</span> Book(&#123;<span class="attr">title</span>:<span class="string">'book3'</span>&#125;);</div><div class="line"><span class="comment">// 添加图书，或者使用bookShelf.add(book1);</span></div><div class="line"><span class="keyword">var</span> bookShelf = <span class="keyword">new</span> BookShelf([book1, book2, book3]);</div><div class="line"></div><div class="line">bookShelf.each(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(book.get(<span class="string">'title'</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="4-2使用fetch从服务器端获取数据"><a href="#4-2使用fetch从服务器端获取数据" class="headerlink" title="4.2使用fetch从服务器端获取数据"></a>4.2使用fetch从服务器端获取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bookShelf.fetch(&#123;</div><div class="line">    <span class="attr">url</span> :<span class="string">'/getbooks/'</span>, </div><div class="line">    <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">collection, res</span>)</span>&#123;</div><div class="line">        collection.each(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(book.get(<span class="string">'title'</span>));</div><div class="line">        &#125;),</div><div class="line">    <span class="attr">error</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure>
<h4 id="4-3reset方法"><a href="#4-3reset方法" class="headerlink" title="4.3reset方法"></a>4.3reset方法</h4><p>这个方法是要喝fetch进行配合使用，collection在fetch到数据后，会调用reset方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bookShelf.bind(<span class="string">'reset'</span>, showAllBooks);</div><div class="line">showAllBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    bookShelf.each(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;</div><div class="line">        <span class="comment">// 操作</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>绑定的步骤要在fetch之前进行</p>
</blockquote>
<h3 id="5-backbone中的router实例"><a href="#5-backbone中的router实例" class="headerlink" title="5.backbone中的router实例"></a>5.backbone中的router实例</h3><p>router是路由，Backbone.Router承担了一部分控制器的工作，会把链接中的#标签当作是url路径，将特定的url或者锚点规则绑定到一个指定的方法。</p>
<h4 id="5-1一个简单的例子"><a href="#5-1一个简单的例子" class="headerlink" title="5.1一个简单的例子"></a>5.1一个简单的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AppRouter = Backbone.Router.extend(&#123;</div><div class="line">    <span class="attr">routes</span> : &#123;</div><div class="line">        <span class="string">""</span> : <span class="string">'main'</span>,</div><div class="line">        <span class="string">"topic"</span> : <span class="string">'renderList'</span>,</div><div class="line">        <span class="string">"topic/:id"</span> : <span class="string">'renderDetail'</span>,</div><div class="line">        <span class="string">"*actions"</span> : <span class="string">"defaultRoute"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">main</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'应用入口方法'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">renderList</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"渲染列表方法"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">renderDetail</span> : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"渲染详情的方法为："</span> + id);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">defaultRoute</span> : <span class="function"><span class="keyword">function</span>(<span class="params">actions</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(actions);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app_router = <span class="keyword">new</span> AppRouter;</div><div class="line">Backbone.history.start();</div></pre></td></tr></table></figure>
<p>通过调用Backbone.history.start()来初始化这个Router。<br>传参的方式有两种，一种是用 “:” 来把#后对应位置作为参数，一种是”*”通配符。</p>
<h3 id="6-backbone中的view实例"><a href="#6-backbone中的view实例" class="headerlink" title="6.backbone中的view实例"></a>6.backbone中的view实例</h3><p>Model和Collection都是用于数据管理和交互，视图（View）将这些数据渲染到页面。</p>
<p>Backbone中的视图提供了一组处理DOM和渲染模型数据的方法。</p>
<p>视图类提供的方法就是在Backbone.View的基础上进行扩展。</p>
<h4 id="6-1定义和创建视图"><a href="#6-1定义和创建视图" class="headerlink" title="6.1定义和创建视图"></a>6.1定义和创建视图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"列表"</span> <span class="attr">style</span>=<span class="string">"color:red"</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"listview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">  </span></div><div class="line">    <span class="keyword">var</span> ListView = Backbone.View.extend(&#123;  </div><div class="line">        <span class="attr">el</span> : <span class="string">'#list'</span>  </div><div class="line">    &#125;);  </div><div class="line">    <span class="keyword">var</span> listview = <span class="keyword">new</span> ListView();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>listView中的el属性为字符串形式的dom选择器，还可以动态生成dom。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">  </span></div><div class="line">    <span class="keyword">var</span> ListView = Backbone.View.extend(&#123;  </div><div class="line">        <span class="attr">tagName</span> : <span class="string">'div'</span>,  </div><div class="line">        <span class="attr">className</span> : <span class="string">'listview'</span>,  </div><div class="line">        <span class="attr">id</span> : <span class="string">'list'</span>,  </div><div class="line">        <span class="attr">attributes</span> : &#123;  </div><div class="line">            <span class="attr">title</span> : <span class="string">'列表'</span>,  </div><div class="line">            <span class="attr">style</span> : <span class="string">'color:red'</span>  </div><div class="line">        &#125;,  </div><div class="line">        <span class="attr">render</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">            <span class="keyword">this</span>.el.innerHTML = <span class="string">'Hello World!'</span>;  </div><div class="line">            <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.el);  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">    <span class="keyword">var</span> listview = <span class="keyword">new</span> ListView(); </div><div class="line">    <span class="comment">//rander()方法将新标签添加到页面，不然只会保存在el中。 </span></div><div class="line">    listview.render();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="6-2处理DOM事件"><a href="#6-2处理DOM事件" class="headerlink" title="6.2处理DOM事件"></a>6.2处理DOM事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"view"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Create"</span> <span class="attr">id</span>=<span class="string">"create"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Read"</span> <span class="attr">id</span>=<span class="string">"read"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Update"</span> <span class="attr">id</span>=<span class="string">"update"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Delete"</span> <span class="attr">id</span>=<span class="string">"delete"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">  </span></div><div class="line">    <span class="keyword">var</span> MyView = Backbone.View.extend(&#123;  </div><div class="line">        <span class="attr">el</span> : <span class="string">'#view'</span>,  </div><div class="line">        <span class="attr">events</span> : &#123;  </div><div class="line">            <span class="string">'click #create'</span> : <span class="string">'createData'</span>,  </div><div class="line">            <span class="string">'click #read'</span> : <span class="string">'readData'</span>,  </div><div class="line">            <span class="string">'click #update'</span> : <span class="string">'updateData'</span>,  </div><div class="line">            <span class="string">'click #delete'</span> : <span class="string">'deleteData'</span>  </div><div class="line">        &#125;,  </div><div class="line">        <span class="attr">createData</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">            <span class="comment">// todo  </span></div><div class="line">        &#125;,  </div><div class="line">        <span class="attr">readData</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">            <span class="comment">// todo  </span></div><div class="line">        &#125;,  </div><div class="line">        <span class="attr">updateData</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">            <span class="comment">// todo  </span></div><div class="line">        &#125;,  </div><div class="line">        <span class="attr">deleteData</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">            <span class="comment">// todo  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> MyView();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="6-3View中的模板"><a href="#6-3View中的模板" class="headerlink" title="6.3View中的模板"></a>6.3View中的模板</h4>]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础算法 - 查找]]></title>
      <url>http://yoursite.com/2016/02/17/2016-02-17-JsFind-javascript/</url>
      <content type="html"><![CDATA[<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> start = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> end = arr.length - <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 二分法递归方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">arr, a, start, end</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="built_in">Math</span>.ceil((end + start) / <span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'找不到'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (arr[temp] == a) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"找到了"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[temp] &gt; a) &#123;</div><div class="line">        end = temp - <span class="number">1</span>;</div><div class="line">        find(arr, a, start, end);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[temp] &lt; a) &#123;</div><div class="line">        start = temp + <span class="number">1</span>;</div><div class="line">        find(arr, a, start, end);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 二分法非递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find2</span>(<span class="params">arr, a, start, end</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> ((end - start) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">var</span> temp = <span class="built_in">Math</span>.floor((end + start) / <span class="number">2</span>);</div><div class="line">        <span class="built_in">console</span>.log(temp)</div><div class="line">        <span class="keyword">if</span> (arr[temp] == a) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'找到了'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[temp] &gt; a) &#123;</div><div class="line">            end = temp - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[temp] &lt; a) &#123;</div><div class="line">            start = temp + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'找不到'</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">find(arr, a, start, end);</div><div class="line">find2(arr, a, start, end);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[刷题]]></title>
      <url>http://yoursite.com/2016/02/17/2016-02-17-Qs_1-codility/</url>
      <content type="html"><![CDATA[<h3 id="PermMissingElem"><a href="#PermMissingElem" class="headerlink" title="PermMissingElem"></a>PermMissingElem</h3><p>Find the missing element in a given permutation.</p>
<blockquote>
<p>PHP部分</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//时间复杂度O(n),空间复杂度O(1)</span></div><div class="line"><span class="comment">//通过率100%</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">$A</span>) </span>&#123;</div><div class="line">    <span class="comment">// write your code in PHP5.5</span></div><div class="line">    sort($A);</div><div class="line">    $len = count($A);</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=$len; $i++)&#123;</div><div class="line">        <span class="keyword">if</span>($A[$i<span class="number">-1</span>] != $i)&#123;</div><div class="line">            <span class="keyword">return</span> $i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ++$len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>JS部分</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过率50%，为什么？</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">A</span>) </span>&#123;</div><div class="line">    <span class="comment">// write your code in JavaScript (Node.js 0.12)</span></div><div class="line">    A.sort();</div><div class="line">    <span class="keyword">var</span> len = A.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(A[i<span class="number">-1</span>] != i)&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ++len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1.Two Sum"></a>1.Two Sum</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p><strong>Example</strong></p>
<pre><code>Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
</code></pre><blockquote>
<p>JavaScript</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">- @param &#123;number[]&#125; nums</div><div class="line">- @param &#123;number&#125; target</div><div class="line">- @return &#123;number[]&#125;</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> length = nums.length;</div><div class="line">    <span class="keyword">var</span> i, j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (length - <span class="number">1</span>); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = (i + <span class="number">1</span>); j &lt; length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</div><div class="line">                <span class="keyword">return</span> [i, j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="2-ZigZag-Conversion"><a href="#2-ZigZag-Conversion" class="headerlink" title="2.ZigZag Conversion"></a>2.ZigZag Conversion</h3><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<pre><code>P   A   H   N
A P L S I I G
Y   I   R
</code></pre><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<pre><code>string convert(string text, int nRows); 
</code></pre><p>convert(<code>&quot;PAYPALISHIRING&quot;</code>, 3) should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>
<blockquote>
<p>JavaScript</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    - @param &#123;string&#125; s</div><div class="line">    - @param &#123;number&#125; numRows</div><div class="line">    - @return &#123;string&#125;</div><div class="line">    */</div><div class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span>(<span class="params">s, numRows</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s.length === <span class="number">0</span> || numRows &lt;= <span class="number">1</span> || s.length &lt;= numRows) &#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> flag = <span class="number">2</span> * (numRows - <span class="number">1</span>),</div><div class="line">        length = s.length,</div><div class="line">        ret = <span class="string">''</span>,</div><div class="line">        rowId = <span class="number">1</span>,</div><div class="line">        index,</div><div class="line">        dist;</div><div class="line"></div><div class="line">    <span class="comment">// 第一层字符串</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i = i + flag) &#123;</div><div class="line">        ret += s[i]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 中间层字符串输出</span></div><div class="line">    <span class="keyword">while</span> (rowId &lt; numRows - <span class="number">1</span>) &#123;</div><div class="line">        index = rowId;</div><div class="line">        <span class="comment">//每一层的开头</span></div><div class="line">        ret = ret + s[index];</div><div class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">            dist = flag - (index % (numRows - <span class="number">1</span>)) * <span class="number">2</span>;</div><div class="line">            index = index + dist;</div><div class="line">            <span class="keyword">if</span> (index &lt; length) &#123;</div><div class="line">                ret = ret + s[index];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            dist = <span class="number">2</span> * (numRows - <span class="number">1</span> - (index % (numRows - <span class="number">1</span>)));</div><div class="line">            index = index + dist;</div><div class="line">            <span class="keyword">if</span> (index &lt; length) &#123;</div><div class="line">                ret = ret + s[index];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        rowId++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 最底层字符串</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = rowId; i &lt; length; i = i + flag) &#123;</div><div class="line">        ret = ret + s[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="3-Reverse-Integer"><a href="#3-Reverse-Integer" class="headerlink" title="3.Reverse Integer"></a>3.Reverse Integer</h3><p>Reverse digits of an integer.</p>
<pre><code>Example1: x = 123, return 321
Example2: x = -123, return -321
</code></pre><blockquote>
<p>JavaScript</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    - @param &#123;number&#125; x</div><div class="line">    - @return &#123;number&#125;</div><div class="line">    */</div><div class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="number">0</span>,</div><div class="line">        flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</div><div class="line">        flag = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    x = <span class="built_in">Math</span>.abs(x);</div><div class="line">    x = (x.toString()).split(<span class="string">''</span>).reverse();</div><div class="line">    result = +(x.join(<span class="string">''</span>));</div><div class="line">    <span class="keyword">if</span> (result &gt; <span class="number">2147483647</span> || result &lt; <span class="number">-2147483648</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag * result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS运动框架]]></title>
      <url>http://yoursite.com/2016/02/17/2016-02-17-MoveJs-javascript/</url>
      <content type="html"><![CDATA[<p><a href="https://raw.githubusercontent.com/Gemicat/gemicat.github.io/master/demo/Frame/move.js" target="_blank" rel="external">运动框架，进入另存为</a></p>
<h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 兼容性获取对象属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123;</div><div class="line">        <span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[attr];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运动框架</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, json, fn</span>)</span>&#123;</div><div class="line">    clearInterval(obj.timer);</div><div class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 检测是否所有运动都完成</span></div><div class="line">        <span class="keyword">var</span> bStop = <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line"></div><div class="line">            <span class="comment">// 检测对象当前属性</span></div><div class="line">            <span class="keyword">var</span> iCur = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                iCur = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(obj, attr))*<span class="number">100</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                iCur = <span class="built_in">parseInt</span>(getStyle(obj, attr));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 缓冲运动速度计算</span></div><div class="line">            <span class="keyword">var</span> iSpeed = (json[attr] - iCur) / <span class="number">8</span>;</div><div class="line">            iSpeed = iSpeed&gt;<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">            <span class="comment">// 检测是否所有运动都完成</span></div><div class="line">            <span class="keyword">if</span>(iCur != json[attr])&#123;</div><div class="line">                bStop = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 对象属性变化</span></div><div class="line">            <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                obj.style.filter = <span class="string">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class="string">')'</span>;</div><div class="line">                obj.style.opacity = (iCur+iSpeed)/<span class="number">100</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                obj.style[attr] = iCur + iSpeed + <span class="string">"px"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 停止运动</span></div><div class="line">        <span class="keyword">if</span>(bStop)&#123;</div><div class="line">            clearInterval(obj.timer);</div><div class="line">            <span class="keyword">if</span>(fn)&#123;</div><div class="line">                fn();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,<span class="number">30</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2015算法笔试题]]></title>
      <url>http://yoursite.com/2016/02/17/2016-02-17-Qs_2-codility/</url>
      <content type="html"><![CDATA[<h3 id="1-检测字符串中字母是否被“-”包围"><a href="#1-检测字符串中字母是否被“-”包围" class="headerlink" title="1.检测字符串中字母是否被“+”包围."></a>1.检测字符串中字母是否被“+”包围.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testSymbols</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">""</span>);</div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z]*$/gi</span>;</div><div class="line">    <span class="keyword">var</span> len = arr.length;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (reg.test(arr[<span class="number">0</span>]) || reg.test(arr[len - <span class="number">1</span>])) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (reg.test(arr[i])) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i - <span class="number">1</span>] != <span class="string">"+"</span> || arr[i + <span class="number">1</span>] != <span class="string">"+"</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成"><a href="#2-给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成" class="headerlink" title="2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成."></a>2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"++d+-o+u+b--a++-"</span>;</div><div class="line"><span class="built_in">console</span>.log(testSymbols(str));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMagicSum</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> max = arr[arr.length - <span class="number">1</span>];</div><div class="line">    arr.pop();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> ((i &amp; <span class="number">1</span> &lt;&lt; j) != <span class="number">0</span>) &#123;</div><div class="line">                sum += arr[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum == max) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-小熊分苹果"><a href="#3-小熊分苹果" class="headerlink" title="3.小熊分苹果"></a>3.小熊分苹果</h3><p>N（1\&lt;N\&lt;9）只熊分一堆苹果，第一只熊（叫小东鄙视）把苹果平均分成N分，刚好多出一个，扔掉多出的那个并取走一份，后面每只熊以此类推。<br>问苹果最少多少个。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>, final = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> temp = n;</div><div class="line">    <span class="keyword">var</span> sum;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (temp &gt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> tmp1 = ((i * n) + <span class="number">1</span>), tmp2 = (n - <span class="number">1</span>);</div><div class="line">        <span class="keyword">var</span> num = tmp1 / tmp2;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (tmp1 % tmp2 != <span class="number">0</span>) &#123;</div><div class="line">            ++final;</div><div class="line">            i = final;</div><div class="line">            temp = n;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        i = num, temp--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> i * n + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(apple(<span class="number">5</span>));</div></pre></td></tr></table></figure>
<h3 id="4-年终奖问题"><a href="#4-年终奖问题" class="headerlink" title="4.年终奖问题"></a>4.年终奖问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">x, y, sum</span>) </span>&#123;</div><div class="line">    sum += arr[x][y];</div><div class="line">    <span class="keyword">if</span> ((x == <span class="number">5</span>) &amp;&amp; (y == <span class="number">5</span>) &amp;&amp; (sum &gt; max)) &#123;</div><div class="line">        max = sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">5</span>) &#123;</div><div class="line">        findMax(x + <span class="number">1</span>, y, sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (y &lt; <span class="number">5</span>) &#123;</div><div class="line">        findMax(x, y + <span class="number">1</span>, sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [</div><div class="line">    [<span class="number">200</span>, <span class="number">120</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">180</span>, <span class="number">300</span>],</div><div class="line">    [<span class="number">150</span>, <span class="number">250</span>, <span class="number">360</span>, <span class="number">120</span>, <span class="number">200</span>, <span class="number">130</span>],</div><div class="line">    [<span class="number">350</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">260</span>],</div><div class="line">    [<span class="number">100</span>, <span class="number">150</span>, <span class="number">260</span>, <span class="number">320</span>, <span class="number">100</span>, <span class="number">150</span>],</div><div class="line">    [<span class="number">500</span>, <span class="number">130</span>, <span class="number">260</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">170</span>],</div><div class="line">    [<span class="number">160</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">200</span>]</div><div class="line">];</div><div class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</div><div class="line">findMax(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(max);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础算法 - 排序]]></title>
      <url>http://yoursite.com/2016/02/17/2016-02-17-JsSort-javascript/</url>
      <content type="html"><![CDATA[<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line">    * 快速排序</div><div class="line">    */</div><div class="line"></div><div class="line">var temp;</div><div class="line">Object.prototype.swap = function (arr, index_1, index_2) &#123;</div><div class="line">    var tmp = arr[index_1];</div><div class="line">    arr[index_1] = arr[index_2];</div><div class="line">    arr[index_2] = tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function partition(arr, start, end) &#123;</div><div class="line">    temp = arr[start];</div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        while (start &lt; end &amp;&amp; arr[end] &gt;= temp)--end;</div><div class="line">        swap(arr, start, end);</div><div class="line">        while (start &lt; end &amp;&amp; arr[start] &lt;= temp)++start;</div><div class="line">        swap(arr, end, start);</div><div class="line">    &#125;</div><div class="line">    return start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function quickSort(arr, start, end) &#123;</div><div class="line">    if (start &lt; end) &#123;</div><div class="line">        var num = partition(arr, start, end);</div><div class="line">        quickSort(arr, num + 1, end);</div><div class="line">        quickSort(arr, start, num - 1);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(arr);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var arr = [2, 1, 3, 2];</div><div class="line"></div><div class="line">quickSort(arr, 0, 3);</div><div class="line"></div><div class="line">/**</div><div class="line">    * 找出数组第k小的值</div><div class="line">    * 在快速排序的基础上引用二分法的概念，当找到第k位时，说明是最小</div><div class="line">    */</div><div class="line">var temp;</div><div class="line">Object.prototype.swap = function (arr, index_1, index_2) &#123;</div><div class="line">    var tmp = arr[index_1];</div><div class="line">    arr[index_1] = arr[index_2];</div><div class="line">    arr[index_2] = tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function partition(arr, start, end) &#123;</div><div class="line">    temp = arr[start];</div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        while (start &lt; end &amp;&amp; arr[end] &gt;= temp)--end;</div><div class="line">        swap(arr, start, end);</div><div class="line">        while (start &lt; end &amp;&amp; arr[start] &lt;= temp)++start;</div><div class="line">        swap(arr, end, start);</div><div class="line">    &#125;</div><div class="line">    return start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function findK(arr, key) &#123;</div><div class="line">    // if (start == (key - 1)) &#123;</div><div class="line">    //     console.log('第k小的为' + arr[key-1]);</div><div class="line">    //     return;</div><div class="line">    // &#125;</div><div class="line">    var start = 0;</div><div class="line">    var end = arr.length - 1;</div><div class="line">    var num = partition(arr, start, end);</div><div class="line"></div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        if (num == key - 1) &#123;</div><div class="line">            console.log(arr[num]);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        else if (num &lt; key) &#123;</div><div class="line">            start = num + 1;</div><div class="line">            num = partition(arr, start, end);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            end = num - 1;</div><div class="line">            num = partition(arr, start, end);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    console.log("not found!");</div><div class="line">&#125;</div><div class="line"></div><div class="line">var arr = [10, 25, 38, 44];</div><div class="line">findK(arr, 6);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node核心模块]]></title>
      <url>http://yoursite.com/2015/11/24/2015-11-24-Node_3-node/</url>
      <content type="html"><![CDATA[<h3 id="Node核心模块"><a href="#Node核心模块" class="headerlink" title="Node核心模块"></a>Node核心模块</h3><h4 id="1-全局对象"><a href="#1-全局对象" class="headerlink" title="1 全局对象"></a>1 全局对象</h4><p>全局对象所有的属性都可以在程序的任何地方访问，在浏览器中，通常window是全局对象，在Node中全局对象是global。</p>
<p>1.1 全局对象与全局变量</p>
<p>global是全局变量的宿主，根据ECMAScript中的定义，满足以下条件的变量是全局变量：</p>
<blockquote>
<p>在最外层定义的变量；<br>全局对象的属性；<br>隐式定义的变量。</p>
</blockquote>
<h4 id="2-常用工具util"><a href="#2-常用工具util" class="headerlink" title="2 常用工具util"></a>2 常用工具util</h4><p>2.1 util.inherits</p>
<p>util.inherits(constructor, superConstructor)可以实现对象见原型继承：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//....</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//....</span></div><div class="line">&#125;;</div><div class="line">util.inherits(Sub, Base);</div></pre></td></tr></table></figure>
<p>2.2 util.inspect</p>
<p>util.inspect(object, [showHidden], [depth], [colors])可以讲对象转换成字符串，通常用于调试和错误输出。</p>
<h4 id="3-事件驱动events"><a href="#3-事件驱动events" class="headerlink" title="3 事件驱动events"></a>3 事件驱动events</h4><p>3.1 事件发射器</p>
<p>events.EventEmitter的核心是事件发射与事件监听功能的封装，对每个事件支持若干个事件监听器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line">emitter.on(<span class="string">'someEvent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"linstener1"</span>, arg1, arg2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">emitter.on(<span class="string">'someEvent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"linstener2"</span>, arg1, arg2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">emitter.emit(<span class="string">'someEvent'</span>, <span class="string">'gemicat'</span>, <span class="number">1993</span>);</div></pre></td></tr></table></figure>
<p>运行结果是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">listener1 gemicat <span class="number">1993</span></div><div class="line">listener2 gemicat <span class="number">1993</span></div></pre></td></tr></table></figure>
<p>3.2 error事件</p>
<p>EventEmitter定义当遇到异常时通常会发射error事件，当error被发射时，如果没有相应的监视器，Node会把它当作异常处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line">emitter.emit(<span class="string">'error'</span>);</div></pre></td></tr></table></figure>
<h4 id="4-文件系统fs"><a href="#4-文件系统fs" class="headerlink" title="4 文件系统fs"></a>4 文件系统fs</h4><p>fs模块时文件操作的封装。fs模块中所有的操作都提供了异步和同步的两个版本。</p>
<p>4.1 fs.readFile</p>
<p>fs.readFile(filename, [encoding], [callback(err, data)])为异步API<br>fs.readFileSync(filename, [encoding])为同步。</p>
<p>4.2 fs.open</p>
<p>fs.open(path, flags, [mode], [callback(err, data)])</p>
<p>flags可以是以下值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>r : 只读</div><div class="line"><span class="number">2.</span>r+：读写</div><div class="line"><span class="number">3.</span>w ：只写，如果文件不存在创建</div><div class="line"><span class="number">4.</span>w+：读写，如果文件不存在创建</div><div class="line"><span class="number">5.</span>a ：追加，如果文件不存在创建</div><div class="line"><span class="number">6.</span>a+：以读取追加模式打开文件，如果文件不存在创建</div><div class="line">mode参数用于创建文件时给文件制定权限，默认是<span class="number">0666.</span></div></pre></td></tr></table></figure>
<h4 id="5-HTP服务器与客户端"><a href="#5-HTP服务器与客户端" class="headerlink" title="5 HTP服务器与客户端"></a>5 HTP服务器与客户端</h4><p>5.1 HTTP服务器</p>
<p>http.Server是http模块中的HTTP服务器对象。</p>
<p>1.http.Server的事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例</div><div class="line"><span class="number">2.</span>connection：当TCP建立连接时触发，提供一个参数socket，为net.Socket的实例。</div><div class="line"><span class="number">3.</span>close：当服务器关闭时触发。</div></pre></td></tr></table></figure>
<p>2.获取GET请求内容</p>
<p>可以手动解析URL后面的内容作为GET的请求参数。使用Node的url模块的parse函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">    res.end(util.inspect(url.parse(req.url, <span class="literal">true</span>)));</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>其中query就是我们所谓的GET求情内容。</p>
<p>3.获取POST请求内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> post = <span class="string">''</span>;</div><div class="line"></div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">        post += chunk;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        post = querystring.parse(post);</div><div class="line">        res.end(util.parse(post));</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>这种方法非常不安全，效率非常低下。</p>
<p>5.2 HTTP客户端</p>
<p>http提供了两个函数http.request和http.get用于向HTTP服务器发起请求</p>
<p>1.使用http.request发送POST请求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> content = querystring.stringify(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'gemicat'</span>,</div><div class="line">    <span class="attr">email</span>: <span class="string">'gemicat@163.com'</span>,</div><div class="line">    <span class="attr">address</span>: <span class="string">'earth'</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="attr">host</span>: <span class="string">'www.byvoid.com'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/application/node/post'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">        <span class="string">'Content-Length'</span>: content.length,</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">    res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">req.write(content);</div><div class="line">req.end();</div></pre></td></tr></table></figure>
<p>2.使用http.get处理GET请求</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line">http.get(&#123;<span class="attr">host</span>: <span class="string">'gemicat.github.io'</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">    res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node入门笔记]]></title>
      <url>http://yoursite.com/2015/11/23/2015-11-23-Node_2-node/</url>
      <content type="html"><![CDATA[<h3 id="Node快速上手"><a href="#Node快速上手" class="headerlink" title="Node快速上手"></a>Node快速上手</h3><h4 id="1-搭建HTTP服务器"><a href="#1-搭建HTTP服务器" class="headerlink" title="1 搭建HTTP服务器"></a>1 搭建HTTP服务器</h4><p>不同于PHP需要配置Apache服务器，Node内置服务器组建：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//server.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    res.write(<span class="string">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</div><div class="line">    res.end(<span class="string">'&lt;p&gt;hello world&lt;/p&gt;'</span>)</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"HTTP server is listened port 3000"</span>);</div></pre></td></tr></table></figure>
<p>使用浏览器访问 127.0.0.1:3000 即可访问。当程序代码改动时，需要重启服务器。</p>
<blockquote>
<p>小技巧。使用supervisor即可边改边看到效果<br>$ npm install -g supervisor</p>
</blockquote>
<p>使用supervisor命令启动server.js</p>
<blockquote>
<p>$ supervisor server.js </p>
</blockquote>
<h4 id="2-异步I-O和时间式编程"><a href="#2-异步I-O和时间式编程" class="headerlink" title="2 异步I/O和时间式编程"></a>2 异步I/O和时间式编程</h4><p>2.1 阻塞与非阻塞</p>
<p>如果线程在执行中遇到I/O操作，通常要耗费相当长的时间，这是操作系统就会剥夺这个线程的CPU控制权，使其暂停执行，同时将资源让给其他线程执行。这种线程调度的方式成为阻塞。</p>
<p>而NodeJS使用的非阻塞I/O则是遇到I/O操作时，将请求发送给操作系统，继续执行下一个事件，当操作系统完成I/O操作时，以事件的方式通知执行I/O操作的线程。</p>
<p>2.2 回调函数</p>
<p>下面是Node中异步读取文件的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'file.txt'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>end<br>Content of File</p>
</blockquote>
<p>虽然Node提供了一部分同步操作的接口，但是不建议使用。</p>
<p>2.3 事件</p>
<p>Node所有异步I/O操作在完成时都会发送一个事件到事件队列，事件是由EventEmitter对象提供的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter();</div><div class="line"></div><div class="line">event.on(<span class="string">'some_event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"event"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    event.emit(<span class="string">'some_event'</span>)</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>这段代码在1秒后输出 “event”。原理是event对象注册了 some_event 事件的监听器，setTimeout在1秒后向event对象发送事件 some_event。</p>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础算法 - 队列]]></title>
      <url>http://yoursite.com/2015/11/16/2015-11-16-JsQueue-javascript/</url>
      <content type="html"><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="1-队列的定义"><a href="#1-队列的定义" class="headerlink" title="1.队列的定义"></a>1.队列的定义</h4><p>队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素。</p>
<p>队列的另外一项重要操作是读取队头的元素。这个操作叫做peek()。该操作返回队头元素，但不把它从队列中删除。除了读取队头元素，我们还想知道队列中存储了多少元素，可以使用length属性满足该需求；要想清空队列中的所有元素，可以使用clear() 方法来实现。</p>
<h4 id="2-队列的实现"><a href="#2-队列的实现" class="headerlink" title="2.队列的实现"></a>2.队列的实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore = [];</div><div class="line">    <span class="keyword">this</span>.enqueue = enqueue;</div><div class="line">    <span class="keyword">this</span>.dequeue = dequeue;</div><div class="line">    <span class="keyword">this</span>.front = front;</div><div class="line">    <span class="keyword">this</span>.back = back;</div><div class="line">    <span class="keyword">this</span>.toString = toString;</div><div class="line">    <span class="keyword">this</span>.empty = empty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//enqueue向队尾添加一个元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueue</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore.push(element);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dequeue()删除队首的元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore.shift();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//front()读取队首元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">front</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//back()读取队尾元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.dataStore.length - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//toString()显示所有元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> retStr = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; i++) &#123;</div><div class="line">        retStr += <span class="keyword">this</span>.dataStore + <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//empty()判断是否为空</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore.length === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-优先队列"><a href="#3-优先队列" class="headerlink" title="3.优先队列"></a>3.优先队列</h4><p>在一般情况下，从队列中删除的元素，一定是率先入队的元素。但是也有一些使用队列的应用，在删除元素时不必遵守先进先出的约定。这种应用，需要使用一个叫做优先队列的数据结构来进行模拟。</p>
<p>从优先队列中删除元素时， 需要考虑优先权的限制。比如医院急诊科（Emergency<br>Department）的候诊室，就是一个采取优先队列的例子。当病人进入候诊室时，分诊护士会评估患者病情的严重程度，然后给一个优先级代码。高优先级的患者先于低优先级的患者就医，同样优先级的患者按照先来先服务的顺序就医。</p>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的模块机制]]></title>
      <url>http://yoursite.com/2015/11/15/2015-11-15-Node_1-node/</url>
      <content type="html"><![CDATA[<h3 id="模块机制"><a href="#模块机制" class="headerlink" title="模块机制"></a>模块机制</h3><p>随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上：</p>
<blockquote>
<p>工具(浏览器兼容) -&gt; 组件(功能模块) -&gt; 框架(功能模块组织) -&gt; 应用(业务模块组织)</p>
</blockquote>
<h4 id="1-CommonJS规范"><a href="#1-CommonJS规范" class="headerlink" title="1.CommonJS规范"></a>1.CommonJS规范</h4><blockquote>
<p>希望JavaScript能在任何地方运行</p>
</blockquote>
<p>1.1CommonJS的模块规范</p>
<p>CommonJS对模块的定义分为模块引用、模块定义和模块表示3个部分</p>
<p>1.模块引用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</div></pre></td></tr></table></figure>
<p>在CommonJs中，存在require()方法引入一个模块API到当前上下文中</p>
<p>2.模块定义</p>
<p>通过exports对象定义当前模块的方法或者变量，在模块中还存在一个module对象，代表模块本身，而exports是module的属性。在Node中，一个文件就是一个模块，将方法挂载在exports对象上作为属性即可定义到处的方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">exports.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>, i = <span class="number">0</span>,</div><div class="line">        args = <span class="built_in">arguments</span>,</div><div class="line">        l = args.length;</div><div class="line">    <span class="keyword">while</span> (i &lt; <span class="number">1</span>) &#123;</div><div class="line">        sum += args[i++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在另一个文件引用方法并使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//program.js</span></div><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</div><div class="line">exports.increment = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> math.add(val, <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.模块标识</p>
<p>模块标识其实就是传递给require()方法的参数，可以没有文件后缀.js</p>
<blockquote>
<p>CommonJS构建的模块导出和引入机制使用户完全不必考虑变量污染。</p>
</blockquote>
<h4 id="2-Node的模块实现"><a href="#2-Node的模块实现" class="headerlink" title="2.Node的模块实现"></a>2.Node的模块实现</h4><p>在Node中引入模块，需要经历如下3个步骤:</p>
<p>1.路径分析</p>
<p>2.文件定位</p>
<p>3.编译执行</p>
<blockquote>
<p>在Node中，模块分为两类：一类是Node提供的模块，称为核心模块;另一类是用户编写的模块，称为文件模块。</p>
<p>核心模块在Node源码编译过程中，被编译成二进制文件。在Node进程启动自动加载到内存，加载速度是最快的。</p>
<p>文件模块是在运行时加载的。</p>
</blockquote>
<p>两类模块都采用有限从缓存加载的策略，不用支出是核心模块的缓存检查先于文件模块的缓存检查。</p>
<p>2.1路径分析和文件定位</p>
<p>1.模块标识符分析</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)核心模块，如http、fs、path等。</div><div class="line">(<span class="number">2</span>).或..开始的相对路径文件模块。</div><div class="line">(<span class="number">3</span>)以/开始的绝对路径文件模块。</div><div class="line">(<span class="number">4</span>)以非路径形式的文件模块，如自定义的connect模块。</div></pre></td></tr></table></figure>
<p>2.模块编译</p>
<p>在Node中，每个文件模块就是一个对象。对于不同文件扩展名，其载入方法也有所不同：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>).js文件。通过fs模块同步读取文件后编译执行。</div><div class="line">(<span class="number">2</span>).node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。</div><div class="line">(<span class="number">3</span>).json文件。通过fs模块同步读取文件后，用<span class="built_in">JSON</span>.parse()解析返回结果。</div><div class="line">(<span class="number">4</span>)其余扩展名文件。被当做.js文件载入。</div></pre></td></tr></table></figure>
<h4 id="3-核心模块"><a href="#3-核心模块" class="headerlink" title="3.核心模块"></a>3.核心模块</h4><p>核心模块分为Javascript编写的和C/C++编写的，其中C/C++编写的在src目录下，Javascript文件放在lib目录下。</p>
<h4 id="4-前后端公用模块"><a href="#4-前后端公用模块" class="headerlink" title="4.前后端公用模块"></a>4.前后端公用模块</h4><p>4.1 AMD规范</p>
<p>AMD规范适用于前段应用场景，全称是Asynchronus Module Definition(异步模块定义)。AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>
<p>它的模块id和依赖是可选的，与Node模块相似的地方是factory的内容。</p>
<p>4.2 CMD规范</p>
<p>CMD规范与AMD规范的区别在于定义模块和依赖引入部分:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">    <span class="comment">//the module code goes here</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require、exports和module通过形参传给模块，在需要依赖模块时，调用require()引入。</p>
]]></content>
      
        <categories>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础数据结构 - 栈]]></title>
      <url>http://yoursite.com/2015/11/13/2015-11-13-JsStack-javascript/</url>
      <content type="html"><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1.栈的定义"></a>1.栈的定义</h4><p>栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构。</p>
<p>对栈的两种主要操作是将一个元素压入栈和将一个元素弹出栈。入栈使用push() 方法，出栈使用pop()方法。预览栈顶元素使用peek()方法。</p>
<h4 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2.栈的实现"></a>2.栈的实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore = [];</div><div class="line">    <span class="keyword">this</span>.top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.push = push;</div><div class="line">    <span class="keyword">this</span>.pop = pop;</div><div class="line">    <span class="keyword">this</span>.peek = peek;</div><div class="line">    <span class="keyword">this</span>.length = length;</div><div class="line">    <span class="keyword">this</span>.clear = clear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//push入栈操作</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.top++] = element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//pop出栈操作</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[--<span class="keyword">this</span>.top];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//peek预览栈顶元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">peek</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.top - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//length查询栈元素个数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.top;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//clear清空栈</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.top = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-使用Stack类"><a href="#3-使用Stack类" class="headerlink" title="3.使用Stack类"></a>3.使用Stack类</h4><p>3.1数制间的相互转换</p>
<p>可以利用栈将一个数字从一种数制转换成另一种数制。假设想将数字n 转换为以b 为基数的数字，实现转换的算法如下。</p>
<p>1.最高位为n%b，将此位压入栈。</p>
<p>2.使用n/b代替n。</p>
<p>3.重复步骤1 和2，直到n 等于0，且没有余数。</p>
<p>4.持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。</p>
<blockquote>
<p>此算法只针对基数为2~9的情况。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mulBase</span>(<span class="params">num, base</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">var</span> eachBit = num % base;</div><div class="line">        <span class="keyword">var</span> num = num / base;</div><div class="line">        s.push(eachBit);</div><div class="line">    &#125; <span class="keyword">while</span> (num &gt; <span class="number">0</span>);</div><div class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">    <span class="keyword">while</span> (s.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">        str += s.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.2回文</p>
<p>回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。比如，单词“dad”、“racecar”就是回文;</p>
<p>使用栈，可以轻松判断一个字符串是否是回文。我们将拿到的字符串的每个字符按从左至右的顺序压入栈。当字符串中的字符都入栈后，栈内就保存了一个反转后的字符串，最后的字符在栈顶，第一个字符在栈底.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalidrome</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; word.length; i++) &#123;</div><div class="line">        s.push(word[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> rword = <span class="string">""</span>;</div><div class="line">    <span class="keyword">while</span> (s.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">        rword += s.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (word === rword) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.3递归的演示</p>
<p>使用栈来模拟阶乘</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        s.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> product = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (s.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">        product *= s.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> product;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-练习"><a href="#4-练习" class="headerlink" title="4.练习"></a>4.练习</h4><p>4.1栈可以用来判断一个算术表达式中的括号是否匹配。编写一个函数，该函数接受一个算术表达式作为参数，返回括号缺失的位置。下面是一个括号不匹配的算术表达式的例子：2.3 + 23 / 12 + (3.14159×0.24。</p>
<blockquote>
<p>遍历一遍表达式，如果遇到”(“则压入栈，如果遇到”)”检查栈顶是否是”(“，如果不是则不匹配，遍历一遍之后，检查栈是否为空，如果不为空则不匹配。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cheackBracket</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">""</span>);</div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] === <span class="string">"("</span>) &#123;</div><div class="line">            s.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (arr[i] === <span class="string">")"</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (s.pop() === <span class="string">"("</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> str.lastIndexOf(<span class="string">"("</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础数据结构 - 列表]]></title>
      <url>http://yoursite.com/2015/11/12/2015-11-12-JsList-javascript/</url>
      <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制。</p>
<p>不包含任何元素的列表成为空列表，列表中包含元素的个数成为列表的length。在内部实现上，用一个变量listSize保存列表中元素的个数。可以再列表末尾append一个元素，也可以再一个给定元素后或列表起始位置insert一个元素。使用remove方法删除指定元素，使用clear方法清空列表。</p>
<p>还可以使用toString() 方法显示列表中所有的元素，使用getElement()方法显示当前元素。列表拥有描述元素位置的属性。列表有前有后（分别对应front 和end）。使用next() 方<br>法可以从当前元素移动到下一个元素，使用prev() 方法可以移动到当前元素的前一个元素。还可以使用moveTo(n) 方法直接移动到指定位置，这里的n 表示要移动到第n 个位置。currPos 属性表示列表中的当前位置。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.dataStore = [];<span class="comment">//初始化一个空数组来保存列表</span></div><div class="line">    <span class="keyword">this</span>.clear = clear;</div><div class="line">    <span class="keyword">this</span>.find = find;</div><div class="line">    <span class="keyword">this</span>.toString = toString;</div><div class="line">    <span class="keyword">this</span>.insert = insert;</div><div class="line">    <span class="keyword">this</span>.append = append;</div><div class="line">    <span class="keyword">this</span>.remove = remove;</div><div class="line">    <span class="keyword">this</span>.front = front;</div><div class="line">    <span class="keyword">this</span>.end = end;</div><div class="line">    <span class="keyword">this</span>.prev = prev;</div><div class="line">    <span class="keyword">this</span>.next = next;</div><div class="line">    <span class="keyword">this</span>.length = length;</div><div class="line">    <span class="keyword">this</span>.currPos = currPos;</div><div class="line">    <span class="keyword">this</span>.moveTo = moveTo;</div><div class="line">    <span class="keyword">this</span>.getElement = getElement;</div><div class="line">    <span class="keyword">this</span>.contains = contains;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//append添加元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore[listSize++] = element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//find查找元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.dataStore.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[i] === element) &#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//remove移除元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> foundAt = <span class="keyword">this</span>.find(element);</div><div class="line">    <span class="keyword">if</span> (foundAt &gt; <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.dataStore.splice(foundAt, <span class="number">1</span>);</div><div class="line">        --<span class="keyword">this</span>.listSize;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//length列表元素个数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//toString显示列表元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//insert想列表插入元素</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">element, after</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> insertAfter = <span class="keyword">this</span>.find(after);</div><div class="line">    <span class="keyword">if</span> (insertAfter &gt; <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.dataStore.splice(insertAfter, <span class="number">0</span>, element);</div><div class="line">        ++<span class="keyword">this</span>.listSize;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//clear清空列表</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore = [];</div><div class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//contains判断元素是否在列表中</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cotains</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> foundAt = <span class="keyword">this</span>.find(element);</div><div class="line">    <span class="keyword">if</span> (foundAt &gt; <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//front移动到开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">front</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//end移动到末尾</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.pos = <span class="keyword">this</span>.listSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//先前移动一位</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &gt; <span class="number">0</span>) &#123;</div><div class="line">        --<span class="keyword">this</span>.pos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//向后移动一位</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize) &#123;</div><div class="line">        ++<span class="keyword">this</span>.pos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//currPos返回当前位置</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">currPos</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript创建对象的7种方法]]></title>
      <url>http://yoursite.com/2015/11/11/2015-11-10-JsCreateObject-javascript/</url>
      <content type="html"><![CDATA[<h3 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h3><blockquote>
<p>工厂模式抽象了创建对象的过程，用函数来封装以特定接口创建对象的细节</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'Nick'</span>, <span class="number">20</span>, <span class="string">'worker'</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'Greg'</span>, <span class="number">30</span>, <span class="string">'Doctor'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>函数createPerson()能根据接受的参数来构建一个包含必要信息的Person对象，虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎么样知道一个对象的类型）。</p>
</blockquote>
<h3 id="2-构造函数模式"><a href="#2-构造函数模式" class="headerlink" title="2.构造函数模式"></a>2.构造函数模式</h3><blockquote>
<p>使用 new 操作符创建对象，所创建的对象既是Object的实例，同时也是Person的实例。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nick'</span>, <span class="number">20</span>, <span class="string">'worker'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Greg'</span>, <span class="number">30</span>, <span class="string">'Doctor'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>但是这种方式的缺点，是每个方法都要在每个实例上重新创建一遍，创建两个具有相投功能的函数没有意义。以下是优化后的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = sayName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nick'</span>, <span class="number">20</span>, <span class="string">'worker'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Greg'</span>, <span class="number">30</span>, <span class="string">'Doctor'</span>);</div><div class="line"></div><div class="line">person2.sayName();</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式将sayName()方法放到全局作用域，但是没有体现封装性。</p>
</blockquote>
<h3 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3.原型模式"></a>3.原型模式</h3><blockquote>
<p>原型模式创建对象的好处是可以让所有的实例共享属性和方法，而不必在实例的时候重复创建</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">name</span>: <span class="string">"Nick"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">29</span>,</div><div class="line">    <span class="attr">job</span>: <span class="string">"Worker"</span>,</div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<blockquote>
<p>但是这种方法所有实例共享原型里的属性，当其中一个实例改变属性，会导致全局更改。</p>
</blockquote>
<h3 id="4-组合使用构造函数模式和原型模式"><a href="#4-组合使用构造函数模式和原型模式" class="headerlink" title="4.组合使用构造函数模式和原型模式"></a>4.组合使用构造函数模式和原型模式</h3><blockquote>
<p>既可以自定义传参，而且还共享方法，是用来定义引用类型的一种默认形式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nick"</span>, <span class="number">29</span>, <span class="string">'Worker'</span>);</div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h3 id="5-动态原型模式"><a href="#5-动态原型模式" class="headerlink" title="5.动态原型模式"></a>5.动态原型模式</h3><blockquote>
<p>将所有构造函数和原型封装到一个构造函数中，通过检查某个应该存在的方式是否有效来决定是否需要初始化原型。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>)&#123;</div><div class="line">        Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nick"</span>, <span class="number">29</span>, <span class="string">'Worker'</span>);</div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h3 id="6-寄生构造模式"><a href="#6-寄生构造模式" class="headerlink" title="6.寄生构造模式"></a>6.寄生构造模式</h3><blockquote>
<p>在前几种模式不适用的情况下，可以使用寄生构造模式。模式的思想是构造一个函数，该函数仅仅封装创建对象的代码，再返回新创建的对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nick"</span>, <span class="number">29</span>, <span class="string">'Worker'</span>);</div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>除了特殊情况，最好不要使用</li>
</ul>
</blockquote>
<h3 id="7-稳妥构造函数模式"><a href="#7-稳妥构造函数模式" class="headerlink" title="7.稳妥构造函数模式"></a>7.稳妥构造函数模式</h3><blockquote>
<p>没有公共属性，而且其他的方法不引用this对象，适合在一些安全性相对要求高的环境下使用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    <span class="comment">/**</span></div><div class="line">        * 这里定义私有属性</div><div class="line">        */</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = Person(<span class="string">"Nick"</span>, <span class="number">29</span>, <span class="string">'Worker'</span>);</div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript继承的6种方法]]></title>
      <url>http://yoursite.com/2015/11/10/2015-11-10-JsExtend-javascript/</url>
      <content type="html"><![CDATA[<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>利用原型让一个引用类继承另一个引用类型的属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">superType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.subProperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">subType.prototype = <span class="keyword">new</span> superType();</div><div class="line">subType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subProperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType();</div><div class="line"><span class="built_in">console</span>.log(instance.getSuperValue());</div></pre></td></tr></table></figure>
<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>在子类的构造函数的内部调用超类的构造函数，使用call()或apply()函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 继承了超类，同时还传递了参数</span></div><div class="line">    superType.call(<span class="keyword">this</span>, <span class="string">'Nick'</span>);</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">29</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType();</div><div class="line"><span class="built_in">console</span>.log(instance.name);</div></pre></td></tr></table></figure>
<p>方法都是在构造函数中创建的，无法进行复用。</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>结合原型链继承和借用构造函数继承的优点，可以让两个实例有不同的属性，又可以拥有共同的方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.color = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">superType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.lgo(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    superType.call(<span class="keyword">this</span>, name);</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 继承</span></div><div class="line">subType.prototype = <span class="keyword">new</span> superType();</div><div class="line">subType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType(<span class="string">'Nick'</span>, <span class="number">29</span>);</div><div class="line">instance.sayAge();</div></pre></td></tr></table></figure>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这个方法和 Object.create()函数类似，不过后者只兼容主流浏览器</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Nick"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">29</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> another = <span class="built_in">Object</span>.create(person);</div><div class="line"><span class="built_in">console</span>.log(another.name);</div></pre></td></tr></table></figure>
<h3 id="寄生"><a href="#寄生" class="headerlink" title="寄生"></a>寄生</h3><p> 类似于寄生构造模式和工厂模式，即创建一个函数将这个过程封装。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">another</span>(<span class="params">original</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> clone = <span class="built_in">Object</span>.create(original);</div><div class="line">    clone.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hi'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> clone;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Nick'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">29</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ins = another(person);</div><div class="line">ins.sayHi();</div></pre></td></tr></table></figure>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>只需要调用一次超类构造函数，效率高，并且避免了在prototype和子类上创建不必要的、多余的属性。与此同时，原型链不会变，还可以正常使用instance和isPrototypeOf()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(superType.prototype);    <span class="comment">// 创建对象</span></div><div class="line">    prototype.costructor = subType; <span class="comment">//增强对象</span></div><div class="line">    subType.prototype = prototype; <span class="comment">// 指定对象</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.color = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">superType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    superType.call(<span class="keyword">this</span>, name);</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">inheritPrototype(subType, superType);</div><div class="line"></div><div class="line">subType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实例化</span></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType(<span class="string">"Boer"</span>, <span class="number">40</span>);</div><div class="line">instance.sayName();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
