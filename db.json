{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/2017-04-06/dom_tree.png","path":"images/2017-04-06/dom_tree.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-06/render_tree.png","path":"images/2017-04-06/render_tree.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-06/process.png","path":"images/2017-04-06/process.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-06/css_tree.png","path":"images/2017-04-06/css_tree.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1491465204000},{"_id":"themes/next/.bowerrc","hash":"2b3e52c128518d9b84b1580579f1fba87b3c6236","modified":1491465204000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1491465204000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1491465204000},{"_id":"themes/next/.javascript_ignore","hash":"de73037693881ad2626e2962e8c5ab243f7b24d0","modified":1491465204000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1491465204000},{"_id":"themes/next/_config.yml","hash":"ec4edec8b80962d19c753bb728633e0fac545ba9","modified":1491465204000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1491465204000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1491465204000},{"_id":"themes/next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1491465204000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1491465204000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1491465204000},{"_id":"source/_posts/2015-11-10-JsExtend-javascript.md","hash":"cbca9ccd333f7a55c2d8dfd329bbfb97df731548","modified":1491465204000},{"_id":"source/_posts/2015-11-12-JsList-javascript.md","hash":"957eb1041571c6ff32ec515b96ba9c24abf19601","modified":1491465204000},{"_id":"source/_posts/2015-11-10-JsCreateObject-javascript.md","hash":"97a7fad09cc6b0d3e0552b54aee7727667cadc14","modified":1491465204000},{"_id":"source/_posts/2015-11-13-JsStack-javascript.md","hash":"3e50d873c6f44d5162f94c5bf9672e1e69b85f58","modified":1491465204000},{"_id":"source/_posts/2015-11-15-Node_1-node.md","hash":"1ba87c5205ea51e503812aa2343886b4af481344","modified":1491465204000},{"_id":"source/_posts/2015-11-16-JsQueue-javascript.md","hash":"c4d7a56f7144d674d6f9d2c884ff44a929876662","modified":1491465204000},{"_id":"source/_posts/2015-11-23-Node_2-node.md","hash":"b414f782a426975831fffd53c727af9cd2651f2d","modified":1491465204000},{"_id":"source/_posts/2015-11-24-Node_3-node.md","hash":"9b20517293e7e3d327bfdf2d046d9257831f505e","modified":1491465204000},{"_id":"source/_posts/2016-02-17-MoveJs-javascript.md","hash":"4bb29c36e69f2331a4474c7d1879ef76aab94cd6","modified":1491465204000},{"_id":"source/_posts/2016-02-17-JsFind-javascript.md","hash":"6007e0215c448473e901c63ee9accea023aea245","modified":1491465204000},{"_id":"source/_posts/2016-02-17-JsSort-javascript.md","hash":"5315c89f569eaf6874d7f811dc15b627ea527754","modified":1491465204000},{"_id":"source/_posts/2016-02-17-Qs_1-codility.md","hash":"fd04c37d8f30e72450fa8de5a146a090e89ad8f7","modified":1491465204000},{"_id":"source/_posts/2016-02-17-Qs_2-codility.md","hash":"b5718fd149d476bf4c8c08a4b3fd3a554098af79","modified":1491465204000},{"_id":"source/_posts/2016-02-29-backbone_1-javascript.md","hash":"9d47f816452159130a91e218dab15ebbddd53c2d","modified":1491465204000},{"_id":"source/_posts/2016-04-26-JavaScriptPatterns_-javascrip.md","hash":"14288a5589f77aab3c0436c21b8f0162472e6d3a","modified":1491465204000},{"_id":"source/_posts/2016-03-08-high_js-javascrip.md","hash":"f64097e4d46da96f5b03c01741cce881d8392bb0","modified":1491465204000},{"_id":"source/_posts/2016-09-12-reducxDoc-javascript.md","hash":"eaa8acc3cbe6b6eba3a38b2592c9af24587024da","modified":1491465204000},{"_id":"source/_posts/2016-08-21-Font-css.md","hash":"9d8c9ef2d9a88683e44124bc78e7c9d20ce97cee","modified":1491465204000},{"_id":"source/_posts/2017-04-06-browserWorking-browser.md","hash":"48781219ec48a4d143a6a6639647773cded15b0e","modified":1491466729000},{"_id":"source/categories/index.md","hash":"2bce4d6874092b22a602d1a862c8c7f4cb2647be","modified":1491465204000},{"_id":"source/images/avatar.jpeg","hash":"067f9a0bb8cd7d452de328adcde6ba54ef58ca7f","modified":1491465204000},{"_id":"source/tags/index.md","hash":"77785843fc65d9ab8a63776573b4ad73aa240494","modified":1491465204000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1491465204000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1491465204000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1491465204000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1491465204000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1491465204000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1491465204000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1491465204000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1491465204000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1491465204000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1491465204000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1491465204000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1491465204000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1491465204000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1491465204000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1491465204000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1491465204000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1491465204000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1491465204000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1491465204000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1491465204000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1491465204000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1491465204000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1491465204000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1491465204000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1491465204000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1491465204000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1491465204000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1491465204000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1491465204000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1491465204000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1491465204000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1491465204000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1491465204000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1491465204000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1491465204000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1491465204000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1491465204000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1491465204000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1491465204000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1491465204000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1491465204000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1491465204000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1491465204000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1491465204000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1491465204000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491465204000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1491465204000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491465204000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491465204000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491465204000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491465204000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491465204000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491465204000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491465204000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491465204000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491465204000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491465204000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491465204000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491465204000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491465204000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1491465204000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1491465204000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1491465204000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1491465204000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1491465204000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1491465204000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1491465204000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1491465204000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1491465204000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1491465204000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1491465204000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1491465204000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1491465204000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1491465204000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1491465204000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1491465204000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491465204000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491465204000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491465204000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491465204000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1491465204000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491465204000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1491465204000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1491465204000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1491465204000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1491465204000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1491465204000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1491465204000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1491465204000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1491465204000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1491465204000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491465204000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1491465204000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1491465204000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491465204000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1491465204000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491465204000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491465204000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491465204000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1491465204000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1491465204000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1491465204000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1491465204000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1491465204000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1491465204000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1491465204000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1491465204000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491465204000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491465204000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491465204000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491465204000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491465204000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1491465204000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1491465204000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491465204000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491465204000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1491465204000},{"_id":"public/search.xml","hash":"a16669f1959601ae2ad8023d019ec5ef69104569","modified":1491466600408},{"_id":"public/categories/index.html","hash":"8288042cb0cd073dffc61456e4fc17881c7f22c0","modified":1491465852960},{"_id":"public/tags/index.html","hash":"9892d791dce82ac16c0d114c724a003eb303aa8b","modified":1491465852961},{"_id":"public/categories/LeetCode/index.html","hash":"8a2f29b4c26fe6638a071f45aeefc574910dedc0","modified":1491465852961},{"_id":"public/categories/css/index.html","hash":"f90375052f0dcd307a30960a60a28d7933c11deb","modified":1491465852961},{"_id":"public/categories/broswer/index.html","hash":"f43ee2da06a797eed8bd3d68ecced50f57f69a7f","modified":1491465852961},{"_id":"public/archives/2016/03/index.html","hash":"a1449559051149de1cfd70057a7472c161113800","modified":1491465852961},{"_id":"public/archives/2016/04/index.html","hash":"7b271172f87c688a79b0bf995cbff392780c28f1","modified":1491465852961},{"_id":"public/archives/2016/08/index.html","hash":"6947186ece9a468ecff87156e43d52b29718d090","modified":1491465852961},{"_id":"public/archives/2016/09/index.html","hash":"8927f7cc8c5e0b1ea7d5801aca03f9201b4b48ef","modified":1491465852961},{"_id":"public/archives/2017/index.html","hash":"cc69092ba17c3483948f352af77f70ab8b106a03","modified":1491465852961},{"_id":"public/archives/2017/04/index.html","hash":"ebb1aba34d1e44b46642e905b33d5663e3ef726c","modified":1491465852961},{"_id":"public/tags/LeetCode/index.html","hash":"9485670ea9a601747a45885b8e7a3e770909b118","modified":1491465852961},{"_id":"public/tags/css/index.html","hash":"7cf2dda9ef8f2eb4d99548f07b48fb9c3469a10e","modified":1491465852961},{"_id":"public/tags/broswer/index.html","hash":"d842d40eecafd565065a64ccfd6e620aa70e53b8","modified":1491465852961},{"_id":"public/2015/11/10/2015-11-10-JsExtend-javascript/index.html","hash":"faac201b3f3f82e891320c2143b7a1eab56e5e0c","modified":1491465852961},{"_id":"public/2015/11/11/2015-11-10-JsCreateObject-javascript/index.html","hash":"0cc6c1476a3df55db39d7522e8915b4aa0bae89c","modified":1491465852961},{"_id":"public/2015/11/12/2015-11-12-JsList-javascript/index.html","hash":"a6c9940132c0df29b70a33f5a638bfde460a3ca5","modified":1491465852961},{"_id":"public/2015/11/13/2015-11-13-JsStack-javascript/index.html","hash":"3c704b7a618de890f6cbeba80fb9ae10f24a852e","modified":1491465852961},{"_id":"public/2015/11/15/2015-11-15-Node_1-node/index.html","hash":"c8d84e41a8934a403a5b59f171c7bb0ec1bd3bb5","modified":1491465852961},{"_id":"public/2015/11/16/2015-11-16-JsQueue-javascript/index.html","hash":"107e86844bb7579f7ab351352aad50118c243bbb","modified":1491465852961},{"_id":"public/2015/11/23/2015-11-23-Node_2-node/index.html","hash":"ac5110bfbb9c18f1ac1d14e1b49ff2551189a665","modified":1491465852962},{"_id":"public/2015/11/24/2015-11-24-Node_3-node/index.html","hash":"452257b726c99de9ce7b68b254c0ac3aabfc533a","modified":1491465852962},{"_id":"public/2016/02/17/2016-02-17-MoveJs-javascript/index.html","hash":"b50959678d825b13d128bdba31bc601de3c1c686","modified":1491465852962},{"_id":"public/2016/02/17/2016-02-17-JsFind-javascript/index.html","hash":"b836c3ab115f4aa112ce7bf5391b9c5d81ab3457","modified":1491465852962},{"_id":"public/2016/02/17/2016-02-17-JsSort-javascript/index.html","hash":"572ea7a6e393e423c6c766da4e447960b1f1bcc2","modified":1491465852962},{"_id":"public/2016/02/17/2016-02-17-Qs_2-codility/index.html","hash":"1a087e8f7f3ac2290249612dc39fc70e7c86eca1","modified":1491465852962},{"_id":"public/2016/02/17/2016-02-17-Qs_1-codility/index.html","hash":"7e887b30dae7776db7d1d52b02d29e47becab90a","modified":1491465852962},{"_id":"public/2016/02/29/2016-02-29-backbone_1-javascript/index.html","hash":"80de306effc233e503c71c92188726af4bca0de9","modified":1491465852962},{"_id":"public/2016/03/08/2016-03-08-high_js-javascrip/index.html","hash":"a6bdf8bb0628f6594428a3e09cb010ba43e35f26","modified":1491465852962},{"_id":"public/2016/04/26/2016-04-26-JavaScriptPatterns_-javascrip/index.html","hash":"c50fe4668fafb6f3fe2e9c464d7f8cc1d7cd2017","modified":1491465852962},{"_id":"public/2016/08/21/2016-08-21-Font-css/index.html","hash":"03cbcd2ec99e1d5db6f677b3e0df444c97477cf2","modified":1491465852962},{"_id":"public/2016/09/12/2016-09-12-reducxDoc-javascript/index.html","hash":"4c3dcb5d7c19b0b025a4d3cb78a7262cd2e1e6fb","modified":1491465852962},{"_id":"public/2017/04/06/2017-04-06-browserWorking-browser/index.html","hash":"6f41f0bc36d8ea0d8f9b04193e28fa9a2a84c67d","modified":1491466745325},{"_id":"public/categories/javascript/index.html","hash":"d4a2ea0945588c2618382778d6ee47b6079cba7a","modified":1491465852962},{"_id":"public/categories/数据结构与算法/index.html","hash":"b509cc68ec07eaee95c4e3e760ceadf579d0c9b4","modified":1491465852962},{"_id":"public/categories/Node/index.html","hash":"2d955afb12a36158cd5cbd1fd0f19dd4ac2fc567","modified":1491465852962},{"_id":"public/archives/index.html","hash":"40c3414b3240de8557a385d98d32ac45dcb3dea3","modified":1491465852962},{"_id":"public/archives/page/2/index.html","hash":"56151af4b6b02cf28b2d3a94bea31459284140d3","modified":1491465852962},{"_id":"public/archives/2015/index.html","hash":"57a15ab46aa4a9d1b35e32109ba405667f606353","modified":1491465852962},{"_id":"public/archives/2015/11/index.html","hash":"9ac83648e5f4f8ef9b2a72a435390b3fb553d86e","modified":1491465852962},{"_id":"public/archives/2016/index.html","hash":"95b2d7b25b03d121d40a0af9571f856c371c9e48","modified":1491465852962},{"_id":"public/archives/2016/02/index.html","hash":"d16cf9892d315fc4410f194c298495e8df9835fa","modified":1491465852962},{"_id":"public/index.html","hash":"0452fe1343f44f5da07bf3b42c891c38dca60c5a","modified":1491466745325},{"_id":"public/page/2/index.html","hash":"3135d6c6b293296ae4d246c8b5c798f9245bc38c","modified":1491465852963},{"_id":"public/tags/javascript/index.html","hash":"e57705ea9b155be1dd8536ba324e0e015c576b9e","modified":1491465852963},{"_id":"public/tags/数据结构与算法/index.html","hash":"083ee6c4005d9607d703280ce262b57beb16f18e","modified":1491465852963},{"_id":"public/tags/Node-JS/index.html","hash":"8abfa7c73f3930cee151f1e89cf27f91d2557e21","modified":1491465852963},{"_id":"public/images/avatar.jpeg","hash":"067f9a0bb8cd7d452de328adcde6ba54ef58ca7f","modified":1491465852976},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491465852976},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491465852976},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491465852976},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491465852976},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491465852976},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491465852976},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491465852976},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491465852976},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491465852976},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491465852976},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491465852976},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491465852976},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491465852976},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1491465852976},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491465852976},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491465852976},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491465852976},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491465852977},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491465852977},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491465852977},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491465852977},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491465852977},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491465852977},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491465852977},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491465853620},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491465853624},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491465853626},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491465853633},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491465853633},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491465853633},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491465853633},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1491465853633},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491465853633},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1491465853634},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1491465853634},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1491465853634},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1491465853634},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1491465853634},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1491465853634},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491465853634},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1491465853634},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491465853634},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1491465853634},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491465853634},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1491465853634},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491465853634},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491465853634},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491465853634},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491465853634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491465853634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491465853634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491465853634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491465853634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491465853634},{"_id":"public/css/main.css","hash":"cfa4ad223fa32efd480bd27bffa0dc643cf30185","modified":1491465853634},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491465853634},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491465853634},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491465853634},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491465853634},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491465853634},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491465853634},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1491465853634},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1491465853634},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491465853635},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491465853635},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1491465853664},{"_id":"source/.DS_Store","hash":"3a5ac4f2d3df92399a6faeb2e883cf5933fec847","modified":1491466155000},{"_id":"source/images/.DS_Store","hash":"690b4d8646365e08faf327239dc7d4ca248b324d","modified":1491466160000},{"_id":"source/images/2017-04-06/dom_tree.png","hash":"bdba8b8ca75056ca760c66701e891fe57d79d63d","modified":1491466286000},{"_id":"source/images/2017-04-06/render_tree.png","hash":"1dc63d86891239032059caa5f484758a1672aba2","modified":1491466247000},{"_id":"source/images/2017-04-06/process.png","hash":"c993526981faea66f31843b0dfd489ca16f760d8","modified":1491466099000},{"_id":"source/images/2017-04-06/css_tree.png","hash":"7a2b107e50de5d7635afad1ab299fa6449ace487","modified":1491466298000},{"_id":"public/images/2017-04-06/render_tree.png","hash":"1dc63d86891239032059caa5f484758a1672aba2","modified":1491466439537},{"_id":"public/images/2017-04-06/dom_tree.png","hash":"bdba8b8ca75056ca760c66701e891fe57d79d63d","modified":1491466439537},{"_id":"public/images/2017-04-06/process.png","hash":"c993526981faea66f31843b0dfd489ca16f760d8","modified":1491466439537},{"_id":"public/images/2017-04-06/css_tree.png","hash":"7a2b107e50de5d7635afad1ab299fa6449ace487","modified":1491466439538}],"Category":[{"name":"javascript","_id":"cj1649bcn0003mo11shcy5iyp"},{"name":"数据结构与算法","_id":"cj1649bcw0008mo11dtzm2qyy"},{"name":"Node","_id":"cj1649bda000nmo11r0uji9ws"},{"name":"LeetCode","_id":"cj1649bdw001bmo11ezj036z7"},{"name":"css","_id":"cj1649be6001rmo11ilz3jbb4"},{"name":"broswer","_id":"cj1649bea001xmo11gwmbsts9"}],"Data":[],"Page":[{"title":"分类","type":"categories","date":"2016-09-21T11:35:24.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2016-09-21 19:35:24\n---\n","updated":"2017-04-06T07:53:24.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj1649bcg0001mo114k9wuqq6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tagcloud","type":"tags","date":"2016-09-21T10:26:29.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: Tagcloud\ntype: \"tags\"\ndate: 2016-09-21 18:26:29\n---\n","updated":"2017-04-06T07:53:24.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1649bi10026mo112svz7zns","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"javascript继承的6种方法","date":"2015-11-09T16:00:00.000Z","description":"原型链、借用构造函数、组合继承、原型式继承、寄生、寄生组合式继承...","author":"Gemicat","_content":"\n\n\n### 原型链\n\n利用原型让一个引用类继承另一个引用类型的属性和方法\n\n```javascript\nfunction superType() {\n    this.property = true;\n}\n\nsuperType.prototype.getSuperValue = function () {\n    return this.property;\n}\n\nfunction subType() {\n    this.subProperty = false;\n}\n\nsubType.prototype = new superType();\nsubType.prototype.getSubValue = function () {\n    return this.subProperty;\n}\n\nvar instance = new subType();\nconsole.log(instance.getSuperValue());\n```\n\n### 借用构造函数\n\n在子类的构造函数的内部调用超类的构造函数，使用call()或apply()函数。\n\n```javascript\nfunction superType(name) {\n    this.name = name;\n}\n\nfunction subType() {\n    // 继承了超类，同时还传递了参数\n    superType.call(this, 'Nick');\n    this.age = 29;\n}\n\nvar instance = new subType();\nconsole.log(instance.name);\n```\n\n方法都是在构造函数中创建的，无法进行复用。\n\n### 组合继承\n\n结合原型链继承和借用构造函数继承的优点，可以让两个实例有不同的属性，又可以拥有共同的方法\n\n```javascript\nfunction superType(name) {\n    this.name = name;\n    this.color = [\"red\", \"blue\"];\n}\n\nsuperType.prototype.sayName = function () {\n    console.lgo(this.name);\n}\n\nfunction subType(name, age) {\n    superType.call(this, name);\n    this.age = age;\n}\n// 继承\nsubType.prototype = new superType();\nsubType.prototype.sayAge = function () {\n    console.log(this.age);\n}\n\nvar instance = new subType('Nick', 29);\ninstance.sayAge();\n```\n\n### 原型式继承\n\n```javascript\nfunction object(o) {\n    function F() { };\n    F.prototype = o;\n    return new F();\n}\n// 这个方法和 Object.create()函数类似，不过后者只兼容主流浏览器\nvar person = {\n    name: \"Nick\",\n    age: 29\n}\n\nvar another = Object.create(person);\nconsole.log(another.name);\n```\n\n### 寄生\n\n 类似于寄生构造模式和工厂模式，即创建一个函数将这个过程封装。\n\n```javascript\nfunction another(original) {\n    var clone = Object.create(original);\n    clone.sayHi = function () {\n        console.log('Hi');\n    }\n    return clone;\n}\n\nvar person = {\n    name: 'Nick',\n    age: 29\n}\n\nvar ins = another(person);\nins.sayHi();\n```\n\n### 寄生组合式继承\n\n只需要调用一次超类构造函数，效率高，并且避免了在prototype和子类上创建不必要的、多余的属性。与此同时，原型链不会变，还可以正常使用instance和isPrototypeOf()。\n\n```javascript\nfunction inheritPrototype(subType, superType) {\n    var prototype = Object.create(superType.prototype);    // 创建对象\n    prototype.costructor = subType; //增强对象\n    subType.prototype = prototype; // 指定对象\n}\n\nfunction superType(name) {\n    this.name = name;\n    this.color = [\"red\", \"blue\"];\n}\n\nsuperType.prototype.sayName = function () {\n    console.log(this.name);\n}\n\nfunction subType(name, age) {\n    superType.call(this, name);\n    this.age = age;\n}\n\ninheritPrototype(subType, superType);\n\nsubType.prototype.sayAge = function () {\n    console.log(this.age);\n}\n\n// 实例化\nvar instance = new subType(\"Boer\", 40);\ninstance.sayName();\n```\n\n\n\n","source":"_posts/2015-11-10-JsExtend-javascript.md","raw":"---\nlayout: post\ntitle: javascript继承的6种方法\ndate: 2015-11-10\ncategories: javascript\ntags: [javascript]\ndescription: 原型链、借用构造函数、组合继承、原型式继承、寄生、寄生组合式继承...\nauthor: \"Gemicat\"\n---\n\n\n\n### 原型链\n\n利用原型让一个引用类继承另一个引用类型的属性和方法\n\n```javascript\nfunction superType() {\n    this.property = true;\n}\n\nsuperType.prototype.getSuperValue = function () {\n    return this.property;\n}\n\nfunction subType() {\n    this.subProperty = false;\n}\n\nsubType.prototype = new superType();\nsubType.prototype.getSubValue = function () {\n    return this.subProperty;\n}\n\nvar instance = new subType();\nconsole.log(instance.getSuperValue());\n```\n\n### 借用构造函数\n\n在子类的构造函数的内部调用超类的构造函数，使用call()或apply()函数。\n\n```javascript\nfunction superType(name) {\n    this.name = name;\n}\n\nfunction subType() {\n    // 继承了超类，同时还传递了参数\n    superType.call(this, 'Nick');\n    this.age = 29;\n}\n\nvar instance = new subType();\nconsole.log(instance.name);\n```\n\n方法都是在构造函数中创建的，无法进行复用。\n\n### 组合继承\n\n结合原型链继承和借用构造函数继承的优点，可以让两个实例有不同的属性，又可以拥有共同的方法\n\n```javascript\nfunction superType(name) {\n    this.name = name;\n    this.color = [\"red\", \"blue\"];\n}\n\nsuperType.prototype.sayName = function () {\n    console.lgo(this.name);\n}\n\nfunction subType(name, age) {\n    superType.call(this, name);\n    this.age = age;\n}\n// 继承\nsubType.prototype = new superType();\nsubType.prototype.sayAge = function () {\n    console.log(this.age);\n}\n\nvar instance = new subType('Nick', 29);\ninstance.sayAge();\n```\n\n### 原型式继承\n\n```javascript\nfunction object(o) {\n    function F() { };\n    F.prototype = o;\n    return new F();\n}\n// 这个方法和 Object.create()函数类似，不过后者只兼容主流浏览器\nvar person = {\n    name: \"Nick\",\n    age: 29\n}\n\nvar another = Object.create(person);\nconsole.log(another.name);\n```\n\n### 寄生\n\n 类似于寄生构造模式和工厂模式，即创建一个函数将这个过程封装。\n\n```javascript\nfunction another(original) {\n    var clone = Object.create(original);\n    clone.sayHi = function () {\n        console.log('Hi');\n    }\n    return clone;\n}\n\nvar person = {\n    name: 'Nick',\n    age: 29\n}\n\nvar ins = another(person);\nins.sayHi();\n```\n\n### 寄生组合式继承\n\n只需要调用一次超类构造函数，效率高，并且避免了在prototype和子类上创建不必要的、多余的属性。与此同时，原型链不会变，还可以正常使用instance和isPrototypeOf()。\n\n```javascript\nfunction inheritPrototype(subType, superType) {\n    var prototype = Object.create(superType.prototype);    // 创建对象\n    prototype.costructor = subType; //增强对象\n    subType.prototype = prototype; // 指定对象\n}\n\nfunction superType(name) {\n    this.name = name;\n    this.color = [\"red\", \"blue\"];\n}\n\nsuperType.prototype.sayName = function () {\n    console.log(this.name);\n}\n\nfunction subType(name, age) {\n    superType.call(this, name);\n    this.age = age;\n}\n\ninheritPrototype(subType, superType);\n\nsubType.prototype.sayAge = function () {\n    console.log(this.age);\n}\n\n// 实例化\nvar instance = new subType(\"Boer\", 40);\ninstance.sayName();\n```\n\n\n\n","slug":"2015-11-10-JsExtend-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bcc0000mo11g6frlc8j","content":"<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>利用原型让一个引用类继承另一个引用类型的属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.property = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">superType.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.property;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subProperty = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">subType.prototype = <span class=\"keyword\">new</span> superType();</div><div class=\"line\">subType.prototype.getSubValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subProperty;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(instance.getSuperValue());</div></pre></td></tr></table></figure>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><p>在子类的构造函数的内部调用超类的构造函数，使用call()或apply()函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 继承了超类，同时还传递了参数</span></div><div class=\"line\">    superType.call(<span class=\"keyword\">this</span>, <span class=\"string\">'Nick'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">29</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(instance.name);</div></pre></td></tr></table></figure>\n<p>方法都是在构造函数中创建的，无法进行复用。</p>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><p>结合原型链继承和借用构造函数继承的优点，可以让两个实例有不同的属性，又可以拥有共同的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">superType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.lgo(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    superType.call(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 继承</span></div><div class=\"line\">subType.prototype = <span class=\"keyword\">new</span> superType();</div><div class=\"line\">subType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType(<span class=\"string\">'Nick'</span>, <span class=\"number\">29</span>);</div><div class=\"line\">instance.sayAge();</div></pre></td></tr></table></figure>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 这个方法和 Object.create()函数类似，不过后者只兼容主流浏览器</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Nick\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> another = <span class=\"built_in\">Object</span>.create(person);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(another.name);</div></pre></td></tr></table></figure>\n<h3 id=\"寄生\"><a href=\"#寄生\" class=\"headerlink\" title=\"寄生\"></a>寄生</h3><p> 类似于寄生构造模式和工厂模式，即创建一个函数将这个过程封装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">another</span>(<span class=\"params\">original</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> clone = <span class=\"built_in\">Object</span>.create(original);</div><div class=\"line\">    clone.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> clone;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'Nick'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ins = another(person);</div><div class=\"line\">ins.sayHi();</div></pre></td></tr></table></figure>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><p>只需要调用一次超类构造函数，效率高，并且避免了在prototype和子类上创建不必要的、多余的属性。与此同时，原型链不会变，还可以正常使用instance和isPrototypeOf()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prototype = <span class=\"built_in\">Object</span>.create(superType.prototype);    <span class=\"comment\">// 创建对象</span></div><div class=\"line\">    prototype.costructor = subType; <span class=\"comment\">//增强对象</span></div><div class=\"line\">    subType.prototype = prototype; <span class=\"comment\">// 指定对象</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">superType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    superType.call(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(subType, superType);</div><div class=\"line\"></div><div class=\"line\">subType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实例化</span></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType(<span class=\"string\">\"Boer\"</span>, <span class=\"number\">40</span>);</div><div class=\"line\">instance.sayName();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>利用原型让一个引用类继承另一个引用类型的属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.property = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">superType.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.property;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subProperty = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">subType.prototype = <span class=\"keyword\">new</span> superType();</div><div class=\"line\">subType.prototype.getSubValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subProperty;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(instance.getSuperValue());</div></pre></td></tr></table></figure>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><p>在子类的构造函数的内部调用超类的构造函数，使用call()或apply()函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 继承了超类，同时还传递了参数</span></div><div class=\"line\">    superType.call(<span class=\"keyword\">this</span>, <span class=\"string\">'Nick'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">29</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(instance.name);</div></pre></td></tr></table></figure>\n<p>方法都是在构造函数中创建的，无法进行复用。</p>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><p>结合原型链继承和借用构造函数继承的优点，可以让两个实例有不同的属性，又可以拥有共同的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">superType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.lgo(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    superType.call(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 继承</span></div><div class=\"line\">subType.prototype = <span class=\"keyword\">new</span> superType();</div><div class=\"line\">subType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType(<span class=\"string\">'Nick'</span>, <span class=\"number\">29</span>);</div><div class=\"line\">instance.sayAge();</div></pre></td></tr></table></figure>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 这个方法和 Object.create()函数类似，不过后者只兼容主流浏览器</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Nick\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> another = <span class=\"built_in\">Object</span>.create(person);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(another.name);</div></pre></td></tr></table></figure>\n<h3 id=\"寄生\"><a href=\"#寄生\" class=\"headerlink\" title=\"寄生\"></a>寄生</h3><p> 类似于寄生构造模式和工厂模式，即创建一个函数将这个过程封装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">another</span>(<span class=\"params\">original</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> clone = <span class=\"built_in\">Object</span>.create(original);</div><div class=\"line\">    clone.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> clone;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'Nick'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ins = another(person);</div><div class=\"line\">ins.sayHi();</div></pre></td></tr></table></figure>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><p>只需要调用一次超类构造函数，效率高，并且避免了在prototype和子类上创建不必要的、多余的属性。与此同时，原型链不会变，还可以正常使用instance和isPrototypeOf()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prototype = <span class=\"built_in\">Object</span>.create(superType.prototype);    <span class=\"comment\">// 创建对象</span></div><div class=\"line\">    prototype.costructor = subType; <span class=\"comment\">//增强对象</span></div><div class=\"line\">    subType.prototype = prototype; <span class=\"comment\">// 指定对象</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">superType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    superType.call(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(subType, superType);</div><div class=\"line\"></div><div class=\"line\">subType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实例化</span></div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> subType(<span class=\"string\">\"Boer\"</span>, <span class=\"number\">40</span>);</div><div class=\"line\">instance.sayName();</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JavaScript基础数据结构 - 列表","date":"2015-11-11T16:00:00.000Z","description":"列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制...","author":"Gemicat","_content":"\n### 列表\n\n#### 定义\n\n列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制。\n\n不包含任何元素的列表成为空列表，列表中包含元素的个数成为列表的length。在内部实现上，用一个变量listSize保存列表中元素的个数。可以再列表末尾append一个元素，也可以再一个给定元素后或列表起始位置insert一个元素。使用remove方法删除指定元素，使用clear方法清空列表。\n\n还可以使用toString() 方法显示列表中所有的元素，使用getElement()方法显示当前元素。列表拥有描述元素位置的属性。列表有前有后（分别对应front 和end）。使用next() 方\n法可以从当前元素移动到下一个元素，使用prev() 方法可以移动到当前元素的前一个元素。还可以使用moveTo(n) 方法直接移动到指定位置，这里的n 表示要移动到第n 个位置。currPos 属性表示列表中的当前位置。\n\n#### 实现\n\n```javascript\nfunction list() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = [];//初始化一个空数组来保存列表\n    this.clear = clear;\n    this.find = find;\n    this.toString = toString;\n    this.insert = insert;\n    this.append = append;\n    this.remove = remove;\n    this.front = front;\n    this.end = end;\n    this.prev = prev;\n    this.next = next;\n    this.length = length;\n    this.currPos = currPos;\n    this.moveTo = moveTo;\n    this.getElement = getElement;\n    this.contains = contains;\n}\n\n//append添加元素\nfunction append(element) {\n    this.dataStore[listSize++] = element;\n}\n\n//find查找元素\nfunction find(element) {\n    var len = this.dataStore.length;\n    for (var i = 0; i < len; i++) {\n        if (this.dataStore[i] === element) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n//remove移除元素\nfunction remove(element) {\n    var foundAt = this.find(element);\n    if (foundAt > -1) {\n        this.dataStore.splice(foundAt, 1);\n        --this.listSize;\n        return true;\n    }\n    return false;\n}\n\n//length列表元素个数\nfunction length() {\n    return this.listSize;\n}\n\n//toString显示列表元素\nfunction toString() {\n    return this.dataStore;\n}\n\n//insert想列表插入元素\nfunction insert(element, after) {\n    var insertAfter = this.find(after);\n    if (insertAfter > -1) {\n        this.dataStore.splice(insertAfter, 0, element);\n        ++this.listSize;\n        return true;\n    }\n    return false;\n}\n\n//clear清空列表\nfunction clear() {\n    this.dataStore = [];\n    this.listSize = 0;\n}\n\n//contains判断元素是否在列表中\nfunction cotains(element) {\n    var foundAt = this.find(element);\n    if (foundAt > -1) {\n        return true;\n    }\n    return false;\n}\n\n//front移动到开头\nfunction front() {\n    this.pos = 0;\n}\n\n//end移动到末尾\nfunction end {\n    this.pos = this.listSize;\n}\n\n//先前移动一位\nfunction prev() {\n    if (this.pos > 0) {\n        --this.pos;\n    }\n}\n\n//向后移动一位\nfunction next() {\n    if (this.pos < this.listSize) {\n        ++this.pos;\n    }\n}\n\n//currPos返回当前位置\nfunction currPos() {\n    return this.pos;\n}\n```\n","source":"_posts/2015-11-12-JsList-javascript.md","raw":"---\nlayout: post\ntitle: JavaScript基础数据结构 - 列表\ndate: 2015-11-12\ncategories: 数据结构与算法\ntags: [数据结构与算法]\ndescription: 列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制...\nauthor: \"Gemicat\"\n---\n\n### 列表\n\n#### 定义\n\n列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制。\n\n不包含任何元素的列表成为空列表，列表中包含元素的个数成为列表的length。在内部实现上，用一个变量listSize保存列表中元素的个数。可以再列表末尾append一个元素，也可以再一个给定元素后或列表起始位置insert一个元素。使用remove方法删除指定元素，使用clear方法清空列表。\n\n还可以使用toString() 方法显示列表中所有的元素，使用getElement()方法显示当前元素。列表拥有描述元素位置的属性。列表有前有后（分别对应front 和end）。使用next() 方\n法可以从当前元素移动到下一个元素，使用prev() 方法可以移动到当前元素的前一个元素。还可以使用moveTo(n) 方法直接移动到指定位置，这里的n 表示要移动到第n 个位置。currPos 属性表示列表中的当前位置。\n\n#### 实现\n\n```javascript\nfunction list() {\n    this.listSize = 0;\n    this.pos = 0;\n    this.dataStore = [];//初始化一个空数组来保存列表\n    this.clear = clear;\n    this.find = find;\n    this.toString = toString;\n    this.insert = insert;\n    this.append = append;\n    this.remove = remove;\n    this.front = front;\n    this.end = end;\n    this.prev = prev;\n    this.next = next;\n    this.length = length;\n    this.currPos = currPos;\n    this.moveTo = moveTo;\n    this.getElement = getElement;\n    this.contains = contains;\n}\n\n//append添加元素\nfunction append(element) {\n    this.dataStore[listSize++] = element;\n}\n\n//find查找元素\nfunction find(element) {\n    var len = this.dataStore.length;\n    for (var i = 0; i < len; i++) {\n        if (this.dataStore[i] === element) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n//remove移除元素\nfunction remove(element) {\n    var foundAt = this.find(element);\n    if (foundAt > -1) {\n        this.dataStore.splice(foundAt, 1);\n        --this.listSize;\n        return true;\n    }\n    return false;\n}\n\n//length列表元素个数\nfunction length() {\n    return this.listSize;\n}\n\n//toString显示列表元素\nfunction toString() {\n    return this.dataStore;\n}\n\n//insert想列表插入元素\nfunction insert(element, after) {\n    var insertAfter = this.find(after);\n    if (insertAfter > -1) {\n        this.dataStore.splice(insertAfter, 0, element);\n        ++this.listSize;\n        return true;\n    }\n    return false;\n}\n\n//clear清空列表\nfunction clear() {\n    this.dataStore = [];\n    this.listSize = 0;\n}\n\n//contains判断元素是否在列表中\nfunction cotains(element) {\n    var foundAt = this.find(element);\n    if (foundAt > -1) {\n        return true;\n    }\n    return false;\n}\n\n//front移动到开头\nfunction front() {\n    this.pos = 0;\n}\n\n//end移动到末尾\nfunction end {\n    this.pos = this.listSize;\n}\n\n//先前移动一位\nfunction prev() {\n    if (this.pos > 0) {\n        --this.pos;\n    }\n}\n\n//向后移动一位\nfunction next() {\n    if (this.pos < this.listSize) {\n        ++this.pos;\n    }\n}\n\n//currPos返回当前位置\nfunction currPos() {\n    return this.pos;\n}\n```\n","slug":"2015-11-12-JsList-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bcj0002mo11r5bmzjxf","content":"<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制。</p>\n<p>不包含任何元素的列表成为空列表，列表中包含元素的个数成为列表的length。在内部实现上，用一个变量listSize保存列表中元素的个数。可以再列表末尾append一个元素，也可以再一个给定元素后或列表起始位置insert一个元素。使用remove方法删除指定元素，使用clear方法清空列表。</p>\n<p>还可以使用toString() 方法显示列表中所有的元素，使用getElement()方法显示当前元素。列表拥有描述元素位置的属性。列表有前有后（分别对应front 和end）。使用next() 方<br>法可以从当前元素移动到下一个元素，使用prev() 方法可以移动到当前元素的前一个元素。还可以使用moveTo(n) 方法直接移动到指定位置，这里的n 表示要移动到第n 个位置。currPos 属性表示列表中的当前位置。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];<span class=\"comment\">//初始化一个空数组来保存列表</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;</div><div class=\"line\">    <span class=\"keyword\">this</span>.find = find;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = toString;</div><div class=\"line\">    <span class=\"keyword\">this</span>.insert = insert;</div><div class=\"line\">    <span class=\"keyword\">this</span>.append = append;</div><div class=\"line\">    <span class=\"keyword\">this</span>.remove = remove;</div><div class=\"line\">    <span class=\"keyword\">this</span>.front = front;</div><div class=\"line\">    <span class=\"keyword\">this</span>.end = end;</div><div class=\"line\">    <span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">    <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">    <span class=\"keyword\">this</span>.length = length;</div><div class=\"line\">    <span class=\"keyword\">this</span>.currPos = currPos;</div><div class=\"line\">    <span class=\"keyword\">this</span>.moveTo = moveTo;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getElement = getElement;</div><div class=\"line\">    <span class=\"keyword\">this</span>.contains = contains;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//append添加元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore[listSize++] = element;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//find查找元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = <span class=\"keyword\">this</span>.dataStore.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//remove移除元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> foundAt = <span class=\"keyword\">this</span>.find(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</div><div class=\"line\">        --<span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//length列表元素个数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//toString显示列表元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//insert想列表插入元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">element, after</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> insertAfter = <span class=\"keyword\">this</span>.find(after);</div><div class=\"line\">    <span class=\"keyword\">if</span> (insertAfter &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dataStore.splice(insertAfter, <span class=\"number\">0</span>, element);</div><div class=\"line\">        ++<span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//clear清空列表</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//contains判断元素是否在列表中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cotains</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> foundAt = <span class=\"keyword\">this</span>.find(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//front移动到开头</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">front</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//end移动到末尾</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//先前移动一位</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prev</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pos &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        --<span class=\"keyword\">this</span>.pos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//向后移动一位</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize) &#123;</div><div class=\"line\">        ++<span class=\"keyword\">this</span>.pos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//currPos返回当前位置</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currPos</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>列表是一组有序的数据，每个列表中的数据项成为元素。在JavaScript中，列表中的元素可以使任意数据类型。列表中可以保存多少元素并没有事先定义好，而是根据实际使用时程序内存的限制。</p>\n<p>不包含任何元素的列表成为空列表，列表中包含元素的个数成为列表的length。在内部实现上，用一个变量listSize保存列表中元素的个数。可以再列表末尾append一个元素，也可以再一个给定元素后或列表起始位置insert一个元素。使用remove方法删除指定元素，使用clear方法清空列表。</p>\n<p>还可以使用toString() 方法显示列表中所有的元素，使用getElement()方法显示当前元素。列表拥有描述元素位置的属性。列表有前有后（分别对应front 和end）。使用next() 方<br>法可以从当前元素移动到下一个元素，使用prev() 方法可以移动到当前元素的前一个元素。还可以使用moveTo(n) 方法直接移动到指定位置，这里的n 表示要移动到第n 个位置。currPos 属性表示列表中的当前位置。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];<span class=\"comment\">//初始化一个空数组来保存列表</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;</div><div class=\"line\">    <span class=\"keyword\">this</span>.find = find;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = toString;</div><div class=\"line\">    <span class=\"keyword\">this</span>.insert = insert;</div><div class=\"line\">    <span class=\"keyword\">this</span>.append = append;</div><div class=\"line\">    <span class=\"keyword\">this</span>.remove = remove;</div><div class=\"line\">    <span class=\"keyword\">this</span>.front = front;</div><div class=\"line\">    <span class=\"keyword\">this</span>.end = end;</div><div class=\"line\">    <span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">    <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">    <span class=\"keyword\">this</span>.length = length;</div><div class=\"line\">    <span class=\"keyword\">this</span>.currPos = currPos;</div><div class=\"line\">    <span class=\"keyword\">this</span>.moveTo = moveTo;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getElement = getElement;</div><div class=\"line\">    <span class=\"keyword\">this</span>.contains = contains;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//append添加元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore[listSize++] = element;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//find查找元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = <span class=\"keyword\">this</span>.dataStore.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore[i] === element) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//remove移除元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> foundAt = <span class=\"keyword\">this</span>.find(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dataStore.splice(foundAt, <span class=\"number\">1</span>);</div><div class=\"line\">        --<span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//length列表元素个数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//toString显示列表元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//insert想列表插入元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">element, after</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> insertAfter = <span class=\"keyword\">this</span>.find(after);</div><div class=\"line\">    <span class=\"keyword\">if</span> (insertAfter &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dataStore.splice(insertAfter, <span class=\"number\">0</span>, element);</div><div class=\"line\">        ++<span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//clear清空列表</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.listSize = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//contains判断元素是否在列表中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cotains</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> foundAt = <span class=\"keyword\">this</span>.find(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foundAt &gt; <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//front移动到开头</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">front</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//end移动到末尾</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pos = <span class=\"keyword\">this</span>.listSize;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//先前移动一位</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prev</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pos &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        --<span class=\"keyword\">this</span>.pos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//向后移动一位</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pos &lt; <span class=\"keyword\">this</span>.listSize) &#123;</div><div class=\"line\">        ++<span class=\"keyword\">this</span>.pos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//currPos返回当前位置</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currPos</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JavaScript基础数据结构 - 栈","date":"2015-11-12T16:00:00.000Z","description":"栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构...","author":"Gemicat","_content":"\n### 栈\n\n#### 1.栈的定义\n\n栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构。\n\n对栈的两种主要操作是将一个元素压入栈和将一个元素弹出栈。入栈使用push() 方法，出栈使用pop()方法。预览栈顶元素使用peek()方法。\n\n#### 2.栈的实现\n\n```javascript\nfunction Stack() {\n    this.dataStore = [];\n    this.top = 0;\n    this.push = push;\n    this.pop = pop;\n    this.peek = peek;\n    this.length = length;\n    this.clear = clear;\n}\n\n//push入栈操作\nfunction push(element) {\n    this.dataStore[this.top++] = element;\n}\n\n//pop出栈操作\nfunction pop() {\n    return this.dataStore[--this.top];\n}\n\n//peek预览栈顶元素\nfunction peek() {\n    return this.dataStore[this.top - 1];\n}\n\n//length查询栈元素个数\nfunction length() {\n    return this.top;\n}\n\n//clear清空栈\nfunction clear() {\n    this.top = 0;\n}\n```\n\n#### 3.使用Stack类\n\n3.1数制间的相互转换\n\n可以利用栈将一个数字从一种数制转换成另一种数制。假设想将数字n 转换为以b 为基数的数字，实现转换的算法如下。\n\n1.最高位为n%b，将此位压入栈。\n\n2.使用n/b代替n。\n\n3.重复步骤1 和2，直到n 等于0，且没有余数。\n\n4.持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。\n\n>此算法只针对基数为2~9的情况。\n\n```javascript\nfunction mulBase(num, base) {\n    var s = new Stack();\n    do {\n        var eachBit = num % base;\n        var num = num / base;\n        s.push(eachBit);\n    } while (num > 0);\n    var str = '';\n    while (s.length() > 0) {\n        str += s.pop();\n    }\n    return str;\n}\n```\n\n3.2回文\n\n回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。比如，单词“dad”、“racecar”就是回文;\n\n使用栈，可以轻松判断一个字符串是否是回文。我们将拿到的字符串的每个字符按从左至右的顺序压入栈。当字符串中的字符都入栈后，栈内就保存了一个反转后的字符串，最后的字符在栈顶，第一个字符在栈底.\n\n```javascript\nfunction isPalidrome(word) {\n    var s = new Stack();\n    for (var i = 0; i < word.length; i++) {\n        s.push(word[i]);\n    }\n    var rword = \"\";\n    while (s.length() > 0) {\n        rword += s.pop();\n    }\n    if (word === rword) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n3.3递归的演示\n\n使用栈来模拟阶乘\n\n```javascript\nfunction factorial(n) {\n    var s = new Stack();\n    for (var i = 0; i < n; i++) {\n        s.push(i);\n    }\n    var product = 1;\n    while (s.length() > 0) {\n        product *= s.pop();\n    }\n    return product;\n}\n```\n\n#### 4.练习\n\n4.1栈可以用来判断一个算术表达式中的括号是否匹配。编写一个函数，该函数接受一个算术表达式作为参数，返回括号缺失的位置。下面是一个括号不匹配的算术表达式的例子：2.3 + 23 / 12 + (3.14159×0.24。\n\n>遍历一遍表达式，如果遇到\"(\"则压入栈，如果遇到\")\"检查栈顶是否是\"(\"，如果不是则不匹配，遍历一遍之后，检查栈是否为空，如果不为空则不匹配。\n\n```javascript\nfunction cheackBracket(str) {\n    var arr = str.split(\"\");\n    var s = new Stack();\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === \"(\") {\n            s.push(arr[i]);\n        }\n        if (arr[i] === \")\") {\n            if (s.pop() === \"(\") {\n                return true;\n            } else {\n                return i;\n            }\n        }\n    }\n    if (s.length() > 0) {\n        return str.lastIndexOf(\"(\");\n    }\n    return true;\n}\n```\n","source":"_posts/2015-11-13-JsStack-javascript.md","raw":"---\nlayout: post\ntitle: JavaScript基础数据结构 - 栈\ndate: 2015-11-13\ncategories: 数据结构与算法\ntags: [数据结构与算法]\ndescription: 栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构...\nauthor: \"Gemicat\"\n---\n\n### 栈\n\n#### 1.栈的定义\n\n栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构。\n\n对栈的两种主要操作是将一个元素压入栈和将一个元素弹出栈。入栈使用push() 方法，出栈使用pop()方法。预览栈顶元素使用peek()方法。\n\n#### 2.栈的实现\n\n```javascript\nfunction Stack() {\n    this.dataStore = [];\n    this.top = 0;\n    this.push = push;\n    this.pop = pop;\n    this.peek = peek;\n    this.length = length;\n    this.clear = clear;\n}\n\n//push入栈操作\nfunction push(element) {\n    this.dataStore[this.top++] = element;\n}\n\n//pop出栈操作\nfunction pop() {\n    return this.dataStore[--this.top];\n}\n\n//peek预览栈顶元素\nfunction peek() {\n    return this.dataStore[this.top - 1];\n}\n\n//length查询栈元素个数\nfunction length() {\n    return this.top;\n}\n\n//clear清空栈\nfunction clear() {\n    this.top = 0;\n}\n```\n\n#### 3.使用Stack类\n\n3.1数制间的相互转换\n\n可以利用栈将一个数字从一种数制转换成另一种数制。假设想将数字n 转换为以b 为基数的数字，实现转换的算法如下。\n\n1.最高位为n%b，将此位压入栈。\n\n2.使用n/b代替n。\n\n3.重复步骤1 和2，直到n 等于0，且没有余数。\n\n4.持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。\n\n>此算法只针对基数为2~9的情况。\n\n```javascript\nfunction mulBase(num, base) {\n    var s = new Stack();\n    do {\n        var eachBit = num % base;\n        var num = num / base;\n        s.push(eachBit);\n    } while (num > 0);\n    var str = '';\n    while (s.length() > 0) {\n        str += s.pop();\n    }\n    return str;\n}\n```\n\n3.2回文\n\n回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。比如，单词“dad”、“racecar”就是回文;\n\n使用栈，可以轻松判断一个字符串是否是回文。我们将拿到的字符串的每个字符按从左至右的顺序压入栈。当字符串中的字符都入栈后，栈内就保存了一个反转后的字符串，最后的字符在栈顶，第一个字符在栈底.\n\n```javascript\nfunction isPalidrome(word) {\n    var s = new Stack();\n    for (var i = 0; i < word.length; i++) {\n        s.push(word[i]);\n    }\n    var rword = \"\";\n    while (s.length() > 0) {\n        rword += s.pop();\n    }\n    if (word === rword) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n3.3递归的演示\n\n使用栈来模拟阶乘\n\n```javascript\nfunction factorial(n) {\n    var s = new Stack();\n    for (var i = 0; i < n; i++) {\n        s.push(i);\n    }\n    var product = 1;\n    while (s.length() > 0) {\n        product *= s.pop();\n    }\n    return product;\n}\n```\n\n#### 4.练习\n\n4.1栈可以用来判断一个算术表达式中的括号是否匹配。编写一个函数，该函数接受一个算术表达式作为参数，返回括号缺失的位置。下面是一个括号不匹配的算术表达式的例子：2.3 + 23 / 12 + (3.14159×0.24。\n\n>遍历一遍表达式，如果遇到\"(\"则压入栈，如果遇到\")\"检查栈顶是否是\"(\"，如果不是则不匹配，遍历一遍之后，检查栈是否为空，如果不为空则不匹配。\n\n```javascript\nfunction cheackBracket(str) {\n    var arr = str.split(\"\");\n    var s = new Stack();\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === \"(\") {\n            s.push(arr[i]);\n        }\n        if (arr[i] === \")\") {\n            if (s.pop() === \"(\") {\n                return true;\n            } else {\n                return i;\n            }\n        }\n    }\n    if (s.length() > 0) {\n        return str.lastIndexOf(\"(\");\n    }\n    return true;\n}\n```\n","slug":"2015-11-13-JsStack-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bcs0005mo11j1pi14hk","content":"<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><h4 id=\"1-栈的定义\"><a href=\"#1-栈的定义\" class=\"headerlink\" title=\"1.栈的定义\"></a>1.栈的定义</h4><p>栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构。</p>\n<p>对栈的两种主要操作是将一个元素压入栈和将一个元素弹出栈。入栈使用push() 方法，出栈使用pop()方法。预览栈顶元素使用peek()方法。</p>\n<h4 id=\"2-栈的实现\"><a href=\"#2-栈的实现\" class=\"headerlink\" title=\"2.栈的实现\"></a>2.栈的实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.push = push;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pop = pop;</div><div class=\"line\">    <span class=\"keyword\">this</span>.peek = peek;</div><div class=\"line\">    <span class=\"keyword\">this</span>.length = length;</div><div class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//push入栈操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//pop出栈操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//peek预览栈顶元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top - <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//length查询栈元素个数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//clear清空栈</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-使用Stack类\"><a href=\"#3-使用Stack类\" class=\"headerlink\" title=\"3.使用Stack类\"></a>3.使用Stack类</h4><p>3.1数制间的相互转换</p>\n<p>可以利用栈将一个数字从一种数制转换成另一种数制。假设想将数字n 转换为以b 为基数的数字，实现转换的算法如下。</p>\n<p>1.最高位为n%b，将此位压入栈。</p>\n<p>2.使用n/b代替n。</p>\n<p>3.重复步骤1 和2，直到n 等于0，且没有余数。</p>\n<p>4.持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。</p>\n<blockquote>\n<p>此算法只针对基数为2~9的情况。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span>(<span class=\"params\">num, base</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> eachBit = num % base;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = num / base;</div><div class=\"line\">        s.push(eachBit);</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        str += s.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.2回文</p>\n<p>回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。比如，单词“dad”、“racecar”就是回文;</p>\n<p>使用栈，可以轻松判断一个字符串是否是回文。我们将拿到的字符串的每个字符按从左至右的顺序压入栈。当字符串中的字符都入栈后，栈内就保存了一个反转后的字符串，最后的字符在栈顶，第一个字符在栈底.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalidrome</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; word.length; i++) &#123;</div><div class=\"line\">        s.push(word[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> rword = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        rword += s.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (word === rword) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.3递归的演示</p>\n<p>使用栈来模拟阶乘</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        s.push(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> product = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        product *= s.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> product;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-练习\"><a href=\"#4-练习\" class=\"headerlink\" title=\"4.练习\"></a>4.练习</h4><p>4.1栈可以用来判断一个算术表达式中的括号是否匹配。编写一个函数，该函数接受一个算术表达式作为参数，返回括号缺失的位置。下面是一个括号不匹配的算术表达式的例子：2.3 + 23 / 12 + (3.14159×0.24。</p>\n<blockquote>\n<p>遍历一遍表达式，如果遇到”(“则压入栈，如果遇到”)”检查栈顶是否是”(“，如果不是则不匹配，遍历一遍之后，检查栈是否为空，如果不为空则不匹配。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cheackBracket</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] === <span class=\"string\">\"(\"</span>) &#123;</div><div class=\"line\">            s.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] === <span class=\"string\">\")\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (s.pop() === <span class=\"string\">\"(\"</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> str.lastIndexOf(<span class=\"string\">\"(\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><h4 id=\"1-栈的定义\"><a href=\"#1-栈的定义\" class=\"headerlink\" title=\"1.栈的定义\"></a>1.栈的定义</h4><p>栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端叫做栈的栈顶。栈被称为一种后入先出（LIFO）的数据结构。</p>\n<p>对栈的两种主要操作是将一个元素压入栈和将一个元素弹出栈。入栈使用push() 方法，出栈使用pop()方法。预览栈顶元素使用peek()方法。</p>\n<h4 id=\"2-栈的实现\"><a href=\"#2-栈的实现\" class=\"headerlink\" title=\"2.栈的实现\"></a>2.栈的实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.push = push;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pop = pop;</div><div class=\"line\">    <span class=\"keyword\">this</span>.peek = peek;</div><div class=\"line\">    <span class=\"keyword\">this</span>.length = length;</div><div class=\"line\">    <span class=\"keyword\">this</span>.clear = clear;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//push入栈操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//pop出栈操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//peek预览栈顶元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top - <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//length查询栈元素个数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//clear清空栈</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-使用Stack类\"><a href=\"#3-使用Stack类\" class=\"headerlink\" title=\"3.使用Stack类\"></a>3.使用Stack类</h4><p>3.1数制间的相互转换</p>\n<p>可以利用栈将一个数字从一种数制转换成另一种数制。假设想将数字n 转换为以b 为基数的数字，实现转换的算法如下。</p>\n<p>1.最高位为n%b，将此位压入栈。</p>\n<p>2.使用n/b代替n。</p>\n<p>3.重复步骤1 和2，直到n 等于0，且没有余数。</p>\n<p>4.持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。</p>\n<blockquote>\n<p>此算法只针对基数为2~9的情况。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mulBase</span>(<span class=\"params\">num, base</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> eachBit = num % base;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = num / base;</div><div class=\"line\">        s.push(eachBit);</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        str += s.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.2回文</p>\n<p>回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。比如，单词“dad”、“racecar”就是回文;</p>\n<p>使用栈，可以轻松判断一个字符串是否是回文。我们将拿到的字符串的每个字符按从左至右的顺序压入栈。当字符串中的字符都入栈后，栈内就保存了一个反转后的字符串，最后的字符在栈顶，第一个字符在栈底.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalidrome</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; word.length; i++) &#123;</div><div class=\"line\">        s.push(word[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> rword = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        rword += s.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (word === rword) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.3递归的演示</p>\n<p>使用栈来模拟阶乘</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        s.push(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> product = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        product *= s.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> product;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-练习\"><a href=\"#4-练习\" class=\"headerlink\" title=\"4.练习\"></a>4.练习</h4><p>4.1栈可以用来判断一个算术表达式中的括号是否匹配。编写一个函数，该函数接受一个算术表达式作为参数，返回括号缺失的位置。下面是一个括号不匹配的算术表达式的例子：2.3 + 23 / 12 + (3.14159×0.24。</p>\n<blockquote>\n<p>遍历一遍表达式，如果遇到”(“则压入栈，如果遇到”)”检查栈顶是否是”(“，如果不是则不匹配，遍历一遍之后，检查栈是否为空，如果不为空则不匹配。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cheackBracket</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] === <span class=\"string\">\"(\"</span>) &#123;</div><div class=\"line\">            s.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] === <span class=\"string\">\")\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (s.pop() === <span class=\"string\">\"(\"</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> str.lastIndexOf(<span class=\"string\">\"(\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"javascript创建对象的7种方法","date":"2015-11-10T16:00:00.000Z","description":"工厂模式、构造函数模式、原型模式、组合使用构造函数模式和原型模式、动态原型模式、寄生构造模式、稳妥构造函数模式...","author":"Gemicat","_content":"\n### 1.工厂模式\n\n>工厂模式抽象了创建对象的过程，用函数来封装以特定接口创建对象的细节\n\n```javascript\nfunction createPerson(name, age, job) {\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function () {\n        console.log(this.name);\n    }\n    return o;\n}\n\nvar person1 = createPerson('Nick', 20, 'worker');\nvar person2 = createPerson('Greg', 30, 'Doctor');\n```\n\n>函数createPerson()能根据接受的参数来构建一个包含必要信息的Person对象，虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎么样知道一个对象的类型）。\n\n### 2.构造函数模式\n\n>使用 new 操作符创建对象，所创建的对象既是Object的实例，同时也是Person的实例。\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function () {\n        console.log(this.name);\n    }\n}\n\nvar person1 = new Person('Nick', 20, 'worker');\nvar person2 = new Person('Greg', 30, 'Doctor');\n```\n\n>但是这种方式的缺点，是每个方法都要在每个实例上重新创建一遍，创建两个具有相投功能的函数没有意义。以下是优化后的代码：\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\n\nfunction sayName() {\n    console.log(this.name);\n}\n\nvar person1 = new Person('Nick', 20, 'worker');\nvar person2 = new Person('Greg', 30, 'Doctor');\n\nperson2.sayName();\n```\n\n>这种方式将sayName()方法放到全局作用域，但是没有体现封装性。\n\n### 3.原型模式\n\n>原型模式创建对象的好处是可以让所有的实例共享属性和方法，而不必在实例的时候重复创建\n\n```javascript\nfunction Person() {\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name: \"Nick\",\n    age: 29,\n    job: \"Worker\",\n    sayName: function () {\n        console.log(this.name);\n    }\n}\n\nvar person1 = new Person();\nperson1.sayName();\n```\n\n>但是这种方法所有实例共享原型里的属性，当其中一个实例改变属性，会导致全局更改。\n\n### 4.组合使用构造函数模式和原型模式\n\n>既可以自定义传参，而且还共享方法，是用来定义引用类型的一种默认形式。\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n}\n\nPerson.prototype = {\n    constructor: Person,\n    sayName: function () {\n        console.log(this.name);\n    }\n}\n\nvar person1 = new Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n### 5.动态原型模式\n\n>将所有构造函数和原型封装到一个构造函数中，通过检查某个应该存在的方式是否有效来决定是否需要初始化原型。\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    if(typeof this.sayName != 'function'){\n        Person.prototype.sayName = function(){\n            console.log(this.name);\n        }\n    }\n}\n\nvar person1 = new Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n### 6.寄生构造模式\n\n>在前几种模式不适用的情况下，可以使用寄生构造模式。模式的思想是构造一个函数，该函数仅仅封装创建对象的代码，再返回新创建的对象。\n\n```javascript\nfunction Person(name, age, job) {\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function () {\n        console.log(this.name);\n    }\n    return o;\n}\n\nvar person1 = new Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n>* 除了特殊情况，最好不要使用\n\n### 7.稳妥构造函数模式\n\n>没有公共属性，而且其他的方法不引用this对象，适合在一些安全性相对要求高的环境下使用\n\n```javascript\nfunction Person(name, age, job) {\n    var o = new Object();\n    /**\n        * 这里定义私有属性\n        */\n    o.sayName = function () {\n        console.log(name);\n    }\n    return o;\n}\n\nvar person1 = Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n\n\n","source":"_posts/2015-11-10-JsCreateObject-javascript.md","raw":"---\nlayout: post\ntitle: javascript创建对象的7种方法\ndate: 2015-11-11\ncategories: javascript\ntags: [javascript]\ndescription: 工厂模式、构造函数模式、原型模式、组合使用构造函数模式和原型模式、动态原型模式、寄生构造模式、稳妥构造函数模式...\nauthor: \"Gemicat\"\n---\n\n### 1.工厂模式\n\n>工厂模式抽象了创建对象的过程，用函数来封装以特定接口创建对象的细节\n\n```javascript\nfunction createPerson(name, age, job) {\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function () {\n        console.log(this.name);\n    }\n    return o;\n}\n\nvar person1 = createPerson('Nick', 20, 'worker');\nvar person2 = createPerson('Greg', 30, 'Doctor');\n```\n\n>函数createPerson()能根据接受的参数来构建一个包含必要信息的Person对象，虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎么样知道一个对象的类型）。\n\n### 2.构造函数模式\n\n>使用 new 操作符创建对象，所创建的对象既是Object的实例，同时也是Person的实例。\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function () {\n        console.log(this.name);\n    }\n}\n\nvar person1 = new Person('Nick', 20, 'worker');\nvar person2 = new Person('Greg', 30, 'Doctor');\n```\n\n>但是这种方式的缺点，是每个方法都要在每个实例上重新创建一遍，创建两个具有相投功能的函数没有意义。以下是优化后的代码：\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\n\nfunction sayName() {\n    console.log(this.name);\n}\n\nvar person1 = new Person('Nick', 20, 'worker');\nvar person2 = new Person('Greg', 30, 'Doctor');\n\nperson2.sayName();\n```\n\n>这种方式将sayName()方法放到全局作用域，但是没有体现封装性。\n\n### 3.原型模式\n\n>原型模式创建对象的好处是可以让所有的实例共享属性和方法，而不必在实例的时候重复创建\n\n```javascript\nfunction Person() {\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name: \"Nick\",\n    age: 29,\n    job: \"Worker\",\n    sayName: function () {\n        console.log(this.name);\n    }\n}\n\nvar person1 = new Person();\nperson1.sayName();\n```\n\n>但是这种方法所有实例共享原型里的属性，当其中一个实例改变属性，会导致全局更改。\n\n### 4.组合使用构造函数模式和原型模式\n\n>既可以自定义传参，而且还共享方法，是用来定义引用类型的一种默认形式。\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n}\n\nPerson.prototype = {\n    constructor: Person,\n    sayName: function () {\n        console.log(this.name);\n    }\n}\n\nvar person1 = new Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n### 5.动态原型模式\n\n>将所有构造函数和原型封装到一个构造函数中，通过检查某个应该存在的方式是否有效来决定是否需要初始化原型。\n\n```javascript\nfunction Person(name, age, job) {\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    if(typeof this.sayName != 'function'){\n        Person.prototype.sayName = function(){\n            console.log(this.name);\n        }\n    }\n}\n\nvar person1 = new Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n### 6.寄生构造模式\n\n>在前几种模式不适用的情况下，可以使用寄生构造模式。模式的思想是构造一个函数，该函数仅仅封装创建对象的代码，再返回新创建的对象。\n\n```javascript\nfunction Person(name, age, job) {\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function () {\n        console.log(this.name);\n    }\n    return o;\n}\n\nvar person1 = new Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n>* 除了特殊情况，最好不要使用\n\n### 7.稳妥构造函数模式\n\n>没有公共属性，而且其他的方法不引用this对象，适合在一些安全性相对要求高的环境下使用\n\n```javascript\nfunction Person(name, age, job) {\n    var o = new Object();\n    /**\n        * 这里定义私有属性\n        */\n    o.sayName = function () {\n        console.log(name);\n    }\n    return o;\n}\n\nvar person1 = Person(\"Nick\", 29, 'Worker');\nperson1.sayName();\n```\n\n\n\n","slug":"2015-11-10-JsCreateObject-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bcv0006mo11vp7ytolh","content":"<h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h3><blockquote>\n<p>工厂模式抽象了创建对象的过程，用函数来封装以特定接口创建对象的细节</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = name;</div><div class=\"line\">    o.age = age;</div><div class=\"line\">    o.job = job;</div><div class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'Nick'</span>, <span class=\"number\">20</span>, <span class=\"string\">'worker'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'Greg'</span>, <span class=\"number\">30</span>, <span class=\"string\">'Doctor'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>函数createPerson()能根据接受的参数来构建一个包含必要信息的Person对象，虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎么样知道一个对象的类型）。</p>\n</blockquote>\n<h3 id=\"2-构造函数模式\"><a href=\"#2-构造函数模式\" class=\"headerlink\" title=\"2.构造函数模式\"></a>2.构造函数模式</h3><blockquote>\n<p>使用 new 操作符创建对象，所创建的对象既是Object的实例，同时也是Person的实例。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Nick'</span>, <span class=\"number\">20</span>, <span class=\"string\">'worker'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Greg'</span>, <span class=\"number\">30</span>, <span class=\"string\">'Doctor'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>但是这种方式的缺点，是每个方法都要在每个实例上重新创建一遍，创建两个具有相投功能的函数没有意义。以下是优化后的代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = sayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Nick'</span>, <span class=\"number\">20</span>, <span class=\"string\">'worker'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Greg'</span>, <span class=\"number\">30</span>, <span class=\"string\">'Doctor'</span>);</div><div class=\"line\"></div><div class=\"line\">person2.sayName();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方式将sayName()方法放到全局作用域，但是没有体现封装性。</p>\n</blockquote>\n<h3 id=\"3-原型模式\"><a href=\"#3-原型模式\" class=\"headerlink\" title=\"3.原型模式\"></a>3.原型模式</h3><blockquote>\n<p>原型模式创建对象的好处是可以让所有的实例共享属性和方法，而不必在实例的时候重复创建</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Person,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Nick\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span>,</div><div class=\"line\">    <span class=\"attr\">job</span>: <span class=\"string\">\"Worker\"</span>,</div><div class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>但是这种方法所有实例共享原型里的属性，当其中一个实例改变属性，会导致全局更改。</p>\n</blockquote>\n<h3 id=\"4-组合使用构造函数模式和原型模式\"><a href=\"#4-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4.组合使用构造函数模式和原型模式\"></a>4.组合使用构造函数模式和原型模式</h3><blockquote>\n<p>既可以自定义传参，而且还共享方法，是用来定义引用类型的一种默认形式。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Person,</div><div class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<h3 id=\"5-动态原型模式\"><a href=\"#5-动态原型模式\" class=\"headerlink\" title=\"5.动态原型模式\"></a>5.动态原型模式</h3><blockquote>\n<p>将所有构造函数和原型封装到一个构造函数中，通过检查某个应该存在的方式是否有效来决定是否需要初始化原型。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.sayName != <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">        Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<h3 id=\"6-寄生构造模式\"><a href=\"#6-寄生构造模式\" class=\"headerlink\" title=\"6.寄生构造模式\"></a>6.寄生构造模式</h3><blockquote>\n<p>在前几种模式不适用的情况下，可以使用寄生构造模式。模式的思想是构造一个函数，该函数仅仅封装创建对象的代码，再返回新创建的对象。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = name;</div><div class=\"line\">    o.age = age;</div><div class=\"line\">    o.job = job;</div><div class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>除了特殊情况，最好不要使用</li>\n</ul>\n</blockquote>\n<h3 id=\"7-稳妥构造函数模式\"><a href=\"#7-稳妥构造函数模式\" class=\"headerlink\" title=\"7.稳妥构造函数模式\"></a>7.稳妥构造函数模式</h3><blockquote>\n<p>没有公共属性，而且其他的方法不引用this对象，适合在一些安全性相对要求高的环境下使用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">        * 这里定义私有属性</div><div class=\"line\">        */</div><div class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h3><blockquote>\n<p>工厂模式抽象了创建对象的过程，用函数来封装以特定接口创建对象的细节</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = name;</div><div class=\"line\">    o.age = age;</div><div class=\"line\">    o.job = job;</div><div class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'Nick'</span>, <span class=\"number\">20</span>, <span class=\"string\">'worker'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'Greg'</span>, <span class=\"number\">30</span>, <span class=\"string\">'Doctor'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>函数createPerson()能根据接受的参数来构建一个包含必要信息的Person对象，虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题（即怎么样知道一个对象的类型）。</p>\n</blockquote>\n<h3 id=\"2-构造函数模式\"><a href=\"#2-构造函数模式\" class=\"headerlink\" title=\"2.构造函数模式\"></a>2.构造函数模式</h3><blockquote>\n<p>使用 new 操作符创建对象，所创建的对象既是Object的实例，同时也是Person的实例。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Nick'</span>, <span class=\"number\">20</span>, <span class=\"string\">'worker'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Greg'</span>, <span class=\"number\">30</span>, <span class=\"string\">'Doctor'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>但是这种方式的缺点，是每个方法都要在每个实例上重新创建一遍，创建两个具有相投功能的函数没有意义。以下是优化后的代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = sayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Nick'</span>, <span class=\"number\">20</span>, <span class=\"string\">'worker'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Greg'</span>, <span class=\"number\">30</span>, <span class=\"string\">'Doctor'</span>);</div><div class=\"line\"></div><div class=\"line\">person2.sayName();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方式将sayName()方法放到全局作用域，但是没有体现封装性。</p>\n</blockquote>\n<h3 id=\"3-原型模式\"><a href=\"#3-原型模式\" class=\"headerlink\" title=\"3.原型模式\"></a>3.原型模式</h3><blockquote>\n<p>原型模式创建对象的好处是可以让所有的实例共享属性和方法，而不必在实例的时候重复创建</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Person,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Nick\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span>,</div><div class=\"line\">    <span class=\"attr\">job</span>: <span class=\"string\">\"Worker\"</span>,</div><div class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>但是这种方法所有实例共享原型里的属性，当其中一个实例改变属性，会导致全局更改。</p>\n</blockquote>\n<h3 id=\"4-组合使用构造函数模式和原型模式\"><a href=\"#4-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4.组合使用构造函数模式和原型模式\"></a>4.组合使用构造函数模式和原型模式</h3><blockquote>\n<p>既可以自定义传参，而且还共享方法，是用来定义引用类型的一种默认形式。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Person,</div><div class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<h3 id=\"5-动态原型模式\"><a href=\"#5-动态原型模式\" class=\"headerlink\" title=\"5.动态原型模式\"></a>5.动态原型模式</h3><blockquote>\n<p>将所有构造函数和原型封装到一个构造函数中，通过检查某个应该存在的方式是否有效来决定是否需要初始化原型。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.sayName != <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">        Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<h3 id=\"6-寄生构造模式\"><a href=\"#6-寄生构造模式\" class=\"headerlink\" title=\"6.寄生构造模式\"></a>6.寄生构造模式</h3><blockquote>\n<p>在前几种模式不适用的情况下，可以使用寄生构造模式。模式的思想是构造一个函数，该函数仅仅封装创建对象的代码，再返回新创建的对象。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = name;</div><div class=\"line\">    o.age = age;</div><div class=\"line\">    o.job = job;</div><div class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>除了特殊情况，最好不要使用</li>\n</ul>\n</blockquote>\n<h3 id=\"7-稳妥构造函数模式\"><a href=\"#7-稳妥构造函数模式\" class=\"headerlink\" title=\"7.稳妥构造函数模式\"></a>7.稳妥构造函数模式</h3><blockquote>\n<p>没有公共属性，而且其他的方法不引用this对象，适合在一些安全性相对要求高的环境下使用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">        * 这里定义私有属性</div><div class=\"line\">        */</span></div><div class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = Person(<span class=\"string\">\"Nick\"</span>, <span class=\"number\">29</span>, <span class=\"string\">'Worker'</span>);</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JavaScript的模块机制","date":"2015-11-14T16:00:00.000Z","description":"随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上，从工具到组件、框架、应用等各个等级...","author":"Gemicat","_content":"\n### 模块机制\n\n随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上：\n\n>工具(浏览器兼容) -> 组件(功能模块) -> 框架(功能模块组织) -> 应用(业务模块组织)\n\n#### 1.CommonJS规范\n\n>希望JavaScript能在任何地方运行\n\n1.1CommonJS的模块规范\n\nCommonJS对模块的定义分为模块引用、模块定义和模块表示3个部分\n\n1.模块引用\n\n```javascript\nvar math = require('math');\n```\n\n在CommonJs中，存在require()方法引入一个模块API到当前上下文中\n\n2.模块定义\n\n通过exports对象定义当前模块的方法或者变量，在模块中还存在一个module对象，代表模块本身，而exports是module的属性。在Node中，一个文件就是一个模块，将方法挂载在exports对象上作为属性即可定义到处的方式：\n\n```javascript\n//math.js\nexports.add = function () {\n    var sum = 0, i = 0,\n        args = arguments,\n        l = args.length;\n    while (i < 1) {\n        sum += args[i++];\n    }\n    return sum;\n}\n```\n\n在另一个文件引用方法并使用\n\n```javascript\n//program.js\nvar math = require('math');\nexports.increment = function (val) {\n    return math.add(val, 1);\n}\n```\n\n3.模块标识\n\n模块标识其实就是传递给require()方法的参数，可以没有文件后缀.js\n\n>CommonJS构建的模块导出和引入机制使用户完全不必考虑变量污染。\n\n#### 2.Node的模块实现\n\n在Node中引入模块，需要经历如下3个步骤:\n\n1.路径分析\n\n2.文件定位\n\n3.编译执行\n\n>在Node中，模块分为两类：一类是Node提供的模块，称为核心模块;另一类是用户编写的模块，称为文件模块。\n\n>核心模块在Node源码编译过程中，被编译成二进制文件。在Node进程启动自动加载到内存，加载速度是最快的。\n\n>文件模块是在运行时加载的。\n\n两类模块都采用有限从缓存加载的策略，不用支出是核心模块的缓存检查先于文件模块的缓存检查。\n\n2.1路径分析和文件定位\n\n1.模块标识符分析\n\n```javascript\n(1)核心模块，如http、fs、path等。\n(2).或..开始的相对路径文件模块。\n(3)以/开始的绝对路径文件模块。\n(4)以非路径形式的文件模块，如自定义的connect模块。\n```\n\n2.模块编译\n\n在Node中，每个文件模块就是一个对象。对于不同文件扩展名，其载入方法也有所不同：\n\n```javascript\n(1).js文件。通过fs模块同步读取文件后编译执行。\n(2).node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n(3).json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n(4)其余扩展名文件。被当做.js文件载入。\n```\n\n#### 3.核心模块\n\n核心模块分为Javascript编写的和C/C++编写的，其中C/C++编写的在src目录下，Javascript文件放在lib目录下。\n\n#### 4.前后端公用模块\n\n4.1 AMD规范\n\nAMD规范适用于前段应用场景，全称是Asynchronus Module Definition(异步模块定义)。AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下：\n\n```javascript\ndefine(id?, dependencies?, factory);\n```\n\n它的模块id和依赖是可选的，与Node模块相似的地方是factory的内容。\n\n4.2 CMD规范\n\nCMD规范与AMD规范的区别在于定义模块和依赖引入部分:\n\n```javascript\ndefine(function(require,exports,module){\n    //the module code goes here\n});\n```\n\nrequire、exports和module通过形参传给模块，在需要依赖模块时，调用require()引入。\n\n","source":"_posts/2015-11-15-Node_1-node.md","raw":"---\nlayout: post\ntitle: JavaScript的模块机制\ndate: 2015-11-15\ncategories: Node\ntags: [Node.JS]\ndescription: 随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上，从工具到组件、框架、应用等各个等级...\nauthor: \"Gemicat\"\n---\n\n### 模块机制\n\n随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上：\n\n>工具(浏览器兼容) -> 组件(功能模块) -> 框架(功能模块组织) -> 应用(业务模块组织)\n\n#### 1.CommonJS规范\n\n>希望JavaScript能在任何地方运行\n\n1.1CommonJS的模块规范\n\nCommonJS对模块的定义分为模块引用、模块定义和模块表示3个部分\n\n1.模块引用\n\n```javascript\nvar math = require('math');\n```\n\n在CommonJs中，存在require()方法引入一个模块API到当前上下文中\n\n2.模块定义\n\n通过exports对象定义当前模块的方法或者变量，在模块中还存在一个module对象，代表模块本身，而exports是module的属性。在Node中，一个文件就是一个模块，将方法挂载在exports对象上作为属性即可定义到处的方式：\n\n```javascript\n//math.js\nexports.add = function () {\n    var sum = 0, i = 0,\n        args = arguments,\n        l = args.length;\n    while (i < 1) {\n        sum += args[i++];\n    }\n    return sum;\n}\n```\n\n在另一个文件引用方法并使用\n\n```javascript\n//program.js\nvar math = require('math');\nexports.increment = function (val) {\n    return math.add(val, 1);\n}\n```\n\n3.模块标识\n\n模块标识其实就是传递给require()方法的参数，可以没有文件后缀.js\n\n>CommonJS构建的模块导出和引入机制使用户完全不必考虑变量污染。\n\n#### 2.Node的模块实现\n\n在Node中引入模块，需要经历如下3个步骤:\n\n1.路径分析\n\n2.文件定位\n\n3.编译执行\n\n>在Node中，模块分为两类：一类是Node提供的模块，称为核心模块;另一类是用户编写的模块，称为文件模块。\n\n>核心模块在Node源码编译过程中，被编译成二进制文件。在Node进程启动自动加载到内存，加载速度是最快的。\n\n>文件模块是在运行时加载的。\n\n两类模块都采用有限从缓存加载的策略，不用支出是核心模块的缓存检查先于文件模块的缓存检查。\n\n2.1路径分析和文件定位\n\n1.模块标识符分析\n\n```javascript\n(1)核心模块，如http、fs、path等。\n(2).或..开始的相对路径文件模块。\n(3)以/开始的绝对路径文件模块。\n(4)以非路径形式的文件模块，如自定义的connect模块。\n```\n\n2.模块编译\n\n在Node中，每个文件模块就是一个对象。对于不同文件扩展名，其载入方法也有所不同：\n\n```javascript\n(1).js文件。通过fs模块同步读取文件后编译执行。\n(2).node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n(3).json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n(4)其余扩展名文件。被当做.js文件载入。\n```\n\n#### 3.核心模块\n\n核心模块分为Javascript编写的和C/C++编写的，其中C/C++编写的在src目录下，Javascript文件放在lib目录下。\n\n#### 4.前后端公用模块\n\n4.1 AMD规范\n\nAMD规范适用于前段应用场景，全称是Asynchronus Module Definition(异步模块定义)。AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下：\n\n```javascript\ndefine(id?, dependencies?, factory);\n```\n\n它的模块id和依赖是可选的，与Node模块相似的地方是factory的内容。\n\n4.2 CMD规范\n\nCMD规范与AMD规范的区别在于定义模块和依赖引入部分:\n\n```javascript\ndefine(function(require,exports,module){\n    //the module code goes here\n});\n```\n\nrequire、exports和module通过形参传给模块，在需要依赖模块时，调用require()引入。\n\n","slug":"2015-11-15-Node_1-node","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bcv0007mo11uq979iy6","content":"<h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><p>随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上：</p>\n<blockquote>\n<p>工具(浏览器兼容) -&gt; 组件(功能模块) -&gt; 框架(功能模块组织) -&gt; 应用(业务模块组织)</p>\n</blockquote>\n<h4 id=\"1-CommonJS规范\"><a href=\"#1-CommonJS规范\" class=\"headerlink\" title=\"1.CommonJS规范\"></a>1.CommonJS规范</h4><blockquote>\n<p>希望JavaScript能在任何地方运行</p>\n</blockquote>\n<p>1.1CommonJS的模块规范</p>\n<p>CommonJS对模块的定义分为模块引用、模块定义和模块表示3个部分</p>\n<p>1.模块引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div></pre></td></tr></table></figure>\n<p>在CommonJs中，存在require()方法引入一个模块API到当前上下文中</p>\n<p>2.模块定义</p>\n<p>通过exports对象定义当前模块的方法或者变量，在模块中还存在一个module对象，代表模块本身，而exports是module的属性。在Node中，一个文件就是一个模块，将方法挂载在exports对象上作为属性即可定义到处的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//math.js</span></div><div class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>,</div><div class=\"line\">        args = <span class=\"built_in\">arguments</span>,</div><div class=\"line\">        l = args.length;</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        sum += args[i++];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在另一个文件引用方法并使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//program.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div><div class=\"line\">exports.increment = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> math.add(val, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.模块标识</p>\n<p>模块标识其实就是传递给require()方法的参数，可以没有文件后缀.js</p>\n<blockquote>\n<p>CommonJS构建的模块导出和引入机制使用户完全不必考虑变量污染。</p>\n</blockquote>\n<h4 id=\"2-Node的模块实现\"><a href=\"#2-Node的模块实现\" class=\"headerlink\" title=\"2.Node的模块实现\"></a>2.Node的模块实现</h4><p>在Node中引入模块，需要经历如下3个步骤:</p>\n<p>1.路径分析</p>\n<p>2.文件定位</p>\n<p>3.编译执行</p>\n<blockquote>\n<p>在Node中，模块分为两类：一类是Node提供的模块，称为核心模块;另一类是用户编写的模块，称为文件模块。</p>\n<p>核心模块在Node源码编译过程中，被编译成二进制文件。在Node进程启动自动加载到内存，加载速度是最快的。</p>\n<p>文件模块是在运行时加载的。</p>\n</blockquote>\n<p>两类模块都采用有限从缓存加载的策略，不用支出是核心模块的缓存检查先于文件模块的缓存检查。</p>\n<p>2.1路径分析和文件定位</p>\n<p>1.模块标识符分析</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>)核心模块，如http、fs、path等。</div><div class=\"line\">(<span class=\"number\">2</span>).或..开始的相对路径文件模块。</div><div class=\"line\">(<span class=\"number\">3</span>)以/开始的绝对路径文件模块。</div><div class=\"line\">(<span class=\"number\">4</span>)以非路径形式的文件模块，如自定义的connect模块。</div></pre></td></tr></table></figure>\n<p>2.模块编译</p>\n<p>在Node中，每个文件模块就是一个对象。对于不同文件扩展名，其载入方法也有所不同：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>).js文件。通过fs模块同步读取文件后编译执行。</div><div class=\"line\">(<span class=\"number\">2</span>).node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。</div><div class=\"line\">(<span class=\"number\">3</span>).json文件。通过fs模块同步读取文件后，用<span class=\"built_in\">JSON</span>.parse()解析返回结果。</div><div class=\"line\">(<span class=\"number\">4</span>)其余扩展名文件。被当做.js文件载入。</div></pre></td></tr></table></figure>\n<h4 id=\"3-核心模块\"><a href=\"#3-核心模块\" class=\"headerlink\" title=\"3.核心模块\"></a>3.核心模块</h4><p>核心模块分为Javascript编写的和C/C++编写的，其中C/C++编写的在src目录下，Javascript文件放在lib目录下。</p>\n<h4 id=\"4-前后端公用模块\"><a href=\"#4-前后端公用模块\" class=\"headerlink\" title=\"4.前后端公用模块\"></a>4.前后端公用模块</h4><p>4.1 AMD规范</p>\n<p>AMD规范适用于前段应用场景，全称是Asynchronus Module Definition(异步模块定义)。AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>它的模块id和依赖是可选的，与Node模块相似的地方是factory的内容。</p>\n<p>4.2 CMD规范</p>\n<p>CMD规范与AMD规范的区别在于定义模块和依赖引入部分:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//the module code goes here</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>require、exports和module通过形参传给模块，在需要依赖模块时，调用require()引入。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><p>随着Web2.0的发展，Js从表单校验跃迁到应用开发的级别上：</p>\n<blockquote>\n<p>工具(浏览器兼容) -&gt; 组件(功能模块) -&gt; 框架(功能模块组织) -&gt; 应用(业务模块组织)</p>\n</blockquote>\n<h4 id=\"1-CommonJS规范\"><a href=\"#1-CommonJS规范\" class=\"headerlink\" title=\"1.CommonJS规范\"></a>1.CommonJS规范</h4><blockquote>\n<p>希望JavaScript能在任何地方运行</p>\n</blockquote>\n<p>1.1CommonJS的模块规范</p>\n<p>CommonJS对模块的定义分为模块引用、模块定义和模块表示3个部分</p>\n<p>1.模块引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div></pre></td></tr></table></figure>\n<p>在CommonJs中，存在require()方法引入一个模块API到当前上下文中</p>\n<p>2.模块定义</p>\n<p>通过exports对象定义当前模块的方法或者变量，在模块中还存在一个module对象，代表模块本身，而exports是module的属性。在Node中，一个文件就是一个模块，将方法挂载在exports对象上作为属性即可定义到处的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//math.js</span></div><div class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>,</div><div class=\"line\">        args = <span class=\"built_in\">arguments</span>,</div><div class=\"line\">        l = args.length;</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        sum += args[i++];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在另一个文件引用方法并使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//program.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div><div class=\"line\">exports.increment = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> math.add(val, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.模块标识</p>\n<p>模块标识其实就是传递给require()方法的参数，可以没有文件后缀.js</p>\n<blockquote>\n<p>CommonJS构建的模块导出和引入机制使用户完全不必考虑变量污染。</p>\n</blockquote>\n<h4 id=\"2-Node的模块实现\"><a href=\"#2-Node的模块实现\" class=\"headerlink\" title=\"2.Node的模块实现\"></a>2.Node的模块实现</h4><p>在Node中引入模块，需要经历如下3个步骤:</p>\n<p>1.路径分析</p>\n<p>2.文件定位</p>\n<p>3.编译执行</p>\n<blockquote>\n<p>在Node中，模块分为两类：一类是Node提供的模块，称为核心模块;另一类是用户编写的模块，称为文件模块。</p>\n<p>核心模块在Node源码编译过程中，被编译成二进制文件。在Node进程启动自动加载到内存，加载速度是最快的。</p>\n<p>文件模块是在运行时加载的。</p>\n</blockquote>\n<p>两类模块都采用有限从缓存加载的策略，不用支出是核心模块的缓存检查先于文件模块的缓存检查。</p>\n<p>2.1路径分析和文件定位</p>\n<p>1.模块标识符分析</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>)核心模块，如http、fs、path等。</div><div class=\"line\">(<span class=\"number\">2</span>).或..开始的相对路径文件模块。</div><div class=\"line\">(<span class=\"number\">3</span>)以/开始的绝对路径文件模块。</div><div class=\"line\">(<span class=\"number\">4</span>)以非路径形式的文件模块，如自定义的connect模块。</div></pre></td></tr></table></figure>\n<p>2.模块编译</p>\n<p>在Node中，每个文件模块就是一个对象。对于不同文件扩展名，其载入方法也有所不同：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>).js文件。通过fs模块同步读取文件后编译执行。</div><div class=\"line\">(<span class=\"number\">2</span>).node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。</div><div class=\"line\">(<span class=\"number\">3</span>).json文件。通过fs模块同步读取文件后，用<span class=\"built_in\">JSON</span>.parse()解析返回结果。</div><div class=\"line\">(<span class=\"number\">4</span>)其余扩展名文件。被当做.js文件载入。</div></pre></td></tr></table></figure>\n<h4 id=\"3-核心模块\"><a href=\"#3-核心模块\" class=\"headerlink\" title=\"3.核心模块\"></a>3.核心模块</h4><p>核心模块分为Javascript编写的和C/C++编写的，其中C/C++编写的在src目录下，Javascript文件放在lib目录下。</p>\n<h4 id=\"4-前后端公用模块\"><a href=\"#4-前后端公用模块\" class=\"headerlink\" title=\"4.前后端公用模块\"></a>4.前后端公用模块</h4><p>4.1 AMD规范</p>\n<p>AMD规范适用于前段应用场景，全称是Asynchronus Module Definition(异步模块定义)。AMD规范是CommonJS模块规范的一个延伸，它的模块定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>它的模块id和依赖是可选的，与Node模块相似的地方是factory的内容。</p>\n<p>4.2 CMD规范</p>\n<p>CMD规范与AMD规范的区别在于定义模块和依赖引入部分:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//the module code goes here</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>require、exports和module通过形参传给模块，在需要依赖模块时，调用require()引入。</p>\n"},{"layout":"post","title":"JavaScript基础算法 - 队列","date":"2015-11-15T16:00:00.000Z","description":"队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素...","author":"Gemicat","_content":"\n### 队列\n\n#### 1.队列的定义\n\n队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素。\n\n队列的另外一项重要操作是读取队头的元素。这个操作叫做peek()。该操作返回队头元素，但不把它从队列中删除。除了读取队头元素，我们还想知道队列中存储了多少元素，可以使用length属性满足该需求；要想清空队列中的所有元素，可以使用clear() 方法来实现。\n\n#### 2.队列的实现\n\n```javascript\nfunction Queue() {\n    this.dataStore = [];\n    this.enqueue = enqueue;\n    this.dequeue = dequeue;\n    this.front = front;\n    this.back = back;\n    this.toString = toString;\n    this.empty = empty;\n}\n\n//enqueue向队尾添加一个元素\nfunction enqueue(element) {\n    this.dataStore.push(element);\n}\n\n//dequeue()删除队首的元素\nfunction dequeue() {\n    this.dataStore.shift();\n}\n\n//front()读取队首元素\nfunction front() {\n    return this.dataStore[0];\n}\n\n//back()读取队尾元素\nfunction back() {\n    return this.dataStore[this.dataStore.length - 1];\n}\n\n//toString()显示所有元素\nfunction toString() {\n    var retStr = \"\";\n    for (var i = 0; i < this.dataStore.length; i++) {\n        retStr += this.dataStore + \"\\n\";\n    }\n    return retStr;\n}\n\n//empty()判断是否为空\nfunction empty() {\n    if (this.dataStore.length === 0) {\n        return true;\n    }\n    return false;\n}\n```\n\n#### 3.优先队列\n\n在一般情况下，从队列中删除的元素，一定是率先入队的元素。但是也有一些使用队列的应用，在删除元素时不必遵守先进先出的约定。这种应用，需要使用一个叫做优先队列的数据结构来进行模拟。\n\n从优先队列中删除元素时， 需要考虑优先权的限制。比如医院急诊科（Emergency\nDepartment）的候诊室，就是一个采取优先队列的例子。当病人进入候诊室时，分诊护士会评估患者病情的严重程度，然后给一个优先级代码。高优先级的患者先于低优先级的患者就医，同样优先级的患者按照先来先服务的顺序就医。\n\n\n\n","source":"_posts/2015-11-16-JsQueue-javascript.md","raw":"---\nlayout: post\ntitle: JavaScript基础算法 - 队列\ndate: 2015-11-16\ncategories: 数据结构与算法\ntags: [数据结构与算法]\ndescription: 队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素...\nauthor: \"Gemicat\"\n---\n\n### 队列\n\n#### 1.队列的定义\n\n队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素。\n\n队列的另外一项重要操作是读取队头的元素。这个操作叫做peek()。该操作返回队头元素，但不把它从队列中删除。除了读取队头元素，我们还想知道队列中存储了多少元素，可以使用length属性满足该需求；要想清空队列中的所有元素，可以使用clear() 方法来实现。\n\n#### 2.队列的实现\n\n```javascript\nfunction Queue() {\n    this.dataStore = [];\n    this.enqueue = enqueue;\n    this.dequeue = dequeue;\n    this.front = front;\n    this.back = back;\n    this.toString = toString;\n    this.empty = empty;\n}\n\n//enqueue向队尾添加一个元素\nfunction enqueue(element) {\n    this.dataStore.push(element);\n}\n\n//dequeue()删除队首的元素\nfunction dequeue() {\n    this.dataStore.shift();\n}\n\n//front()读取队首元素\nfunction front() {\n    return this.dataStore[0];\n}\n\n//back()读取队尾元素\nfunction back() {\n    return this.dataStore[this.dataStore.length - 1];\n}\n\n//toString()显示所有元素\nfunction toString() {\n    var retStr = \"\";\n    for (var i = 0; i < this.dataStore.length; i++) {\n        retStr += this.dataStore + \"\\n\";\n    }\n    return retStr;\n}\n\n//empty()判断是否为空\nfunction empty() {\n    if (this.dataStore.length === 0) {\n        return true;\n    }\n    return false;\n}\n```\n\n#### 3.优先队列\n\n在一般情况下，从队列中删除的元素，一定是率先入队的元素。但是也有一些使用队列的应用，在删除元素时不必遵守先进先出的约定。这种应用，需要使用一个叫做优先队列的数据结构来进行模拟。\n\n从优先队列中删除元素时， 需要考虑优先权的限制。比如医院急诊科（Emergency\nDepartment）的候诊室，就是一个采取优先队列的例子。当病人进入候诊室时，分诊护士会评估患者病情的严重程度，然后给一个优先级代码。高优先级的患者先于低优先级的患者就医，同样优先级的患者按照先来先服务的顺序就医。\n\n\n\n","slug":"2015-11-16-JsQueue-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bcx000bmo11u8ndwkkf","content":"<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><h4 id=\"1-队列的定义\"><a href=\"#1-队列的定义\" class=\"headerlink\" title=\"1.队列的定义\"></a>1.队列的定义</h4><p>队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素。</p>\n<p>队列的另外一项重要操作是读取队头的元素。这个操作叫做peek()。该操作返回队头元素，但不把它从队列中删除。除了读取队头元素，我们还想知道队列中存储了多少元素，可以使用length属性满足该需求；要想清空队列中的所有元素，可以使用clear() 方法来实现。</p>\n<h4 id=\"2-队列的实现\"><a href=\"#2-队列的实现\" class=\"headerlink\" title=\"2.队列的实现\"></a>2.队列的实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.enqueue = enqueue;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dequeue = dequeue;</div><div class=\"line\">    <span class=\"keyword\">this</span>.front = front;</div><div class=\"line\">    <span class=\"keyword\">this</span>.back = back;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = toString;</div><div class=\"line\">    <span class=\"keyword\">this</span>.empty = empty;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//enqueue向队尾添加一个元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueue</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore.push(element);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//dequeue()删除队首的元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dequeue</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore.shift();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//front()读取队首元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">front</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//back()读取队尾元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">back</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.dataStore.length - <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//toString()显示所有元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> retStr = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</div><div class=\"line\">        retStr += <span class=\"keyword\">this</span>.dataStore + <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> retStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//empty()判断是否为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-优先队列\"><a href=\"#3-优先队列\" class=\"headerlink\" title=\"3.优先队列\"></a>3.优先队列</h4><p>在一般情况下，从队列中删除的元素，一定是率先入队的元素。但是也有一些使用队列的应用，在删除元素时不必遵守先进先出的约定。这种应用，需要使用一个叫做优先队列的数据结构来进行模拟。</p>\n<p>从优先队列中删除元素时， 需要考虑优先权的限制。比如医院急诊科（Emergency<br>Department）的候诊室，就是一个采取优先队列的例子。当病人进入候诊室时，分诊护士会评估患者病情的严重程度，然后给一个优先级代码。高优先级的患者先于低优先级的患者就医，同样优先级的患者按照先来先服务的顺序就医。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><h4 id=\"1-队列的定义\"><a href=\"#1-队列的定义\" class=\"headerlink\" title=\"1.队列的定义\"></a>1.队列的定义</h4><p>队列是一种先进先出（FIFO）的数据结构。队列的两种主要操作是向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素。</p>\n<p>队列的另外一项重要操作是读取队头的元素。这个操作叫做peek()。该操作返回队头元素，但不把它从队列中删除。除了读取队头元素，我们还想知道队列中存储了多少元素，可以使用length属性满足该需求；要想清空队列中的所有元素，可以使用clear() 方法来实现。</p>\n<h4 id=\"2-队列的实现\"><a href=\"#2-队列的实现\" class=\"headerlink\" title=\"2.队列的实现\"></a>2.队列的实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.enqueue = enqueue;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dequeue = dequeue;</div><div class=\"line\">    <span class=\"keyword\">this</span>.front = front;</div><div class=\"line\">    <span class=\"keyword\">this</span>.back = back;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = toString;</div><div class=\"line\">    <span class=\"keyword\">this</span>.empty = empty;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//enqueue向队尾添加一个元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueue</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore.push(element);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//dequeue()删除队首的元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dequeue</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dataStore.shift();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//front()读取队首元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">front</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//back()读取队尾元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">back</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.dataStore.length - <span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//toString()显示所有元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> retStr = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.dataStore.length; i++) &#123;</div><div class=\"line\">        retStr += <span class=\"keyword\">this</span>.dataStore + <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> retStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//empty()判断是否为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">empty</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataStore.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-优先队列\"><a href=\"#3-优先队列\" class=\"headerlink\" title=\"3.优先队列\"></a>3.优先队列</h4><p>在一般情况下，从队列中删除的元素，一定是率先入队的元素。但是也有一些使用队列的应用，在删除元素时不必遵守先进先出的约定。这种应用，需要使用一个叫做优先队列的数据结构来进行模拟。</p>\n<p>从优先队列中删除元素时， 需要考虑优先权的限制。比如医院急诊科（Emergency<br>Department）的候诊室，就是一个采取优先队列的例子。当病人进入候诊室时，分诊护士会评估患者病情的严重程度，然后给一个优先级代码。高优先级的患者先于低优先级的患者就医，同样优先级的患者按照先来先服务的顺序就医。</p>\n"},{"layout":"post","title":"Node入门笔记","date":"2015-11-22T16:00:00.000Z","description":"这篇文章是学习node过程中边学边记录下来的，方便与以后的温习与回顾...","author":"Gemicat","_content":"\n### Node快速上手\n\n#### 1 搭建HTTP服务器\n\n不同于PHP需要配置Apache服务器，Node内置服务器组建：\n\n```javascript\n//server.js\nvar http = require(\"http\");\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {\"Content-Type\": \"text/html\"});\n    res.write('<h1>Node.js</h1>');\n    res.end('<p>hello world</p>')\n}).listen(3000);\nconsole.log(\"HTTP server is listened port 3000\");\n```\n\n使用浏览器访问 127.0.0.1:3000 即可访问。当程序代码改动时，需要重启服务器。\n\n>小技巧。使用supervisor即可边改边看到效果\n>$ npm install -g supervisor\n\n使用supervisor命令启动server.js\n\n>$ supervisor server.js \n\n#### 2 异步I/O和时间式编程\n\n2.1 阻塞与非阻塞\n\n如果线程在执行中遇到I/O操作，通常要耗费相当长的时间，这是操作系统就会剥夺这个线程的CPU控制权，使其暂停执行，同时将资源让给其他线程执行。这种线程调度的方式成为阻塞。\n\n而NodeJS使用的非阻塞I/O则是遇到I/O操作时，将请求发送给操作系统，继续执行下一个事件，当操作系统完成I/O操作时，以事件的方式通知执行I/O操作的线程。\n\n2.2 回调函数\n\n下面是Node中异步读取文件的例子：\n\n```javascript\nvar fs = require('fs');\nfs.readFile('file.txt', 'utf-8', function (err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\nconsole.log('end');\n```\n\n输出：\n\n>end\n>Content of File\n\n虽然Node提供了一部分同步操作的接口，但是不建议使用。\n\n2.3 事件\n\nNode所有异步I/O操作在完成时都会发送一个事件到事件队列，事件是由EventEmitter对象提供的：\n\n```javascript\nvar EventEmitter = require('events').EventEmitter;\nvar event = new EventEmitter();\n\nevent.on('some_event',function(){\n    console.log(\"event\");\n});\n\nsetTimeout(function(){\n    event.emit('some_event')\n},1000);\n```\n\n这段代码在1秒后输出 \"event\"。原理是event对象注册了 some_event 事件的监听器，setTimeout在1秒后向event对象发送事件 some_event。\n\n\n\n","source":"_posts/2015-11-23-Node_2-node.md","raw":"---\nlayout: post\ntitle: Node入门笔记\ndate: 2015-11-23\ncategories: Node\ntags: [Node.JS]\ndescription: 这篇文章是学习node过程中边学边记录下来的，方便与以后的温习与回顾...\nauthor: \"Gemicat\"\n---\n\n### Node快速上手\n\n#### 1 搭建HTTP服务器\n\n不同于PHP需要配置Apache服务器，Node内置服务器组建：\n\n```javascript\n//server.js\nvar http = require(\"http\");\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {\"Content-Type\": \"text/html\"});\n    res.write('<h1>Node.js</h1>');\n    res.end('<p>hello world</p>')\n}).listen(3000);\nconsole.log(\"HTTP server is listened port 3000\");\n```\n\n使用浏览器访问 127.0.0.1:3000 即可访问。当程序代码改动时，需要重启服务器。\n\n>小技巧。使用supervisor即可边改边看到效果\n>$ npm install -g supervisor\n\n使用supervisor命令启动server.js\n\n>$ supervisor server.js \n\n#### 2 异步I/O和时间式编程\n\n2.1 阻塞与非阻塞\n\n如果线程在执行中遇到I/O操作，通常要耗费相当长的时间，这是操作系统就会剥夺这个线程的CPU控制权，使其暂停执行，同时将资源让给其他线程执行。这种线程调度的方式成为阻塞。\n\n而NodeJS使用的非阻塞I/O则是遇到I/O操作时，将请求发送给操作系统，继续执行下一个事件，当操作系统完成I/O操作时，以事件的方式通知执行I/O操作的线程。\n\n2.2 回调函数\n\n下面是Node中异步读取文件的例子：\n\n```javascript\nvar fs = require('fs');\nfs.readFile('file.txt', 'utf-8', function (err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\nconsole.log('end');\n```\n\n输出：\n\n>end\n>Content of File\n\n虽然Node提供了一部分同步操作的接口，但是不建议使用。\n\n2.3 事件\n\nNode所有异步I/O操作在完成时都会发送一个事件到事件队列，事件是由EventEmitter对象提供的：\n\n```javascript\nvar EventEmitter = require('events').EventEmitter;\nvar event = new EventEmitter();\n\nevent.on('some_event',function(){\n    console.log(\"event\");\n});\n\nsetTimeout(function(){\n    event.emit('some_event')\n},1000);\n```\n\n这段代码在1秒后输出 \"event\"。原理是event对象注册了 some_event 事件的监听器，setTimeout在1秒后向event对象发送事件 some_event。\n\n\n\n","slug":"2015-11-23-Node_2-node","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bd3000emo11l1nukoyw","content":"<h3 id=\"Node快速上手\"><a href=\"#Node快速上手\" class=\"headerlink\" title=\"Node快速上手\"></a>Node快速上手</h3><h4 id=\"1-搭建HTTP服务器\"><a href=\"#1-搭建HTTP服务器\" class=\"headerlink\" title=\"1 搭建HTTP服务器\"></a>1 搭建HTTP服务器</h4><p>不同于PHP需要配置Apache服务器，Node内置服务器组建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//server.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;hello world&lt;/p&gt;'</span>)</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"HTTP server is listened port 3000\"</span>);</div></pre></td></tr></table></figure>\n<p>使用浏览器访问 127.0.0.1:3000 即可访问。当程序代码改动时，需要重启服务器。</p>\n<blockquote>\n<p>小技巧。使用supervisor即可边改边看到效果<br>$ npm install -g supervisor</p>\n</blockquote>\n<p>使用supervisor命令启动server.js</p>\n<blockquote>\n<p>$ supervisor server.js </p>\n</blockquote>\n<h4 id=\"2-异步I-O和时间式编程\"><a href=\"#2-异步I-O和时间式编程\" class=\"headerlink\" title=\"2 异步I/O和时间式编程\"></a>2 异步I/O和时间式编程</h4><p>2.1 阻塞与非阻塞</p>\n<p>如果线程在执行中遇到I/O操作，通常要耗费相当长的时间，这是操作系统就会剥夺这个线程的CPU控制权，使其暂停执行，同时将资源让给其他线程执行。这种线程调度的方式成为阻塞。</p>\n<p>而NodeJS使用的非阻塞I/O则是遇到I/O操作时，将请求发送给操作系统，继续执行下一个事件，当操作系统完成I/O操作时，以事件的方式通知执行I/O操作的线程。</p>\n<p>2.2 回调函数</p>\n<p>下面是Node中异步读取文件的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'file.txt'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>end<br>Content of File</p>\n</blockquote>\n<p>虽然Node提供了一部分同步操作的接口，但是不建议使用。</p>\n<p>2.3 事件</p>\n<p>Node所有异步I/O操作在完成时都会发送一个事件到事件队列，事件是由EventEmitter对象提供的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\"></div><div class=\"line\">event.on(<span class=\"string\">'some_event'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"event\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    event.emit(<span class=\"string\">'some_event'</span>)</div><div class=\"line\">&#125;,<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>这段代码在1秒后输出 “event”。原理是event对象注册了 some_event 事件的监听器，setTimeout在1秒后向event对象发送事件 some_event。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Node快速上手\"><a href=\"#Node快速上手\" class=\"headerlink\" title=\"Node快速上手\"></a>Node快速上手</h3><h4 id=\"1-搭建HTTP服务器\"><a href=\"#1-搭建HTTP服务器\" class=\"headerlink\" title=\"1 搭建HTTP服务器\"></a>1 搭建HTTP服务器</h4><p>不同于PHP需要配置Apache服务器，Node内置服务器组建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//server.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;hello world&lt;/p&gt;'</span>)</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"HTTP server is listened port 3000\"</span>);</div></pre></td></tr></table></figure>\n<p>使用浏览器访问 127.0.0.1:3000 即可访问。当程序代码改动时，需要重启服务器。</p>\n<blockquote>\n<p>小技巧。使用supervisor即可边改边看到效果<br>$ npm install -g supervisor</p>\n</blockquote>\n<p>使用supervisor命令启动server.js</p>\n<blockquote>\n<p>$ supervisor server.js </p>\n</blockquote>\n<h4 id=\"2-异步I-O和时间式编程\"><a href=\"#2-异步I-O和时间式编程\" class=\"headerlink\" title=\"2 异步I/O和时间式编程\"></a>2 异步I/O和时间式编程</h4><p>2.1 阻塞与非阻塞</p>\n<p>如果线程在执行中遇到I/O操作，通常要耗费相当长的时间，这是操作系统就会剥夺这个线程的CPU控制权，使其暂停执行，同时将资源让给其他线程执行。这种线程调度的方式成为阻塞。</p>\n<p>而NodeJS使用的非阻塞I/O则是遇到I/O操作时，将请求发送给操作系统，继续执行下一个事件，当操作系统完成I/O操作时，以事件的方式通知执行I/O操作的线程。</p>\n<p>2.2 回调函数</p>\n<p>下面是Node中异步读取文件的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'file.txt'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>end<br>Content of File</p>\n</blockquote>\n<p>虽然Node提供了一部分同步操作的接口，但是不建议使用。</p>\n<p>2.3 事件</p>\n<p>Node所有异步I/O操作在完成时都会发送一个事件到事件队列，事件是由EventEmitter对象提供的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\"></div><div class=\"line\">event.on(<span class=\"string\">'some_event'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"event\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    event.emit(<span class=\"string\">'some_event'</span>)</div><div class=\"line\">&#125;,<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>这段代码在1秒后输出 “event”。原理是event对象注册了 some_event 事件的监听器，setTimeout在1秒后向event对象发送事件 some_event。</p>\n"},{"layout":"post","title":"Node核心模块","date":"2015-11-23T16:00:00.000Z","description":"这里展示了Node的核心模块...","author":"Gemicat","_content":"\n### Node核心模块\n\n#### 1 全局对象\n\n全局对象所有的属性都可以在程序的任何地方访问，在浏览器中，通常window是全局对象，在Node中全局对象是global。\n\n1.1 全局对象与全局变量\n\nglobal是全局变量的宿主，根据ECMAScript中的定义，满足以下条件的变量是全局变量：\n\n>在最外层定义的变量；\n>全局对象的属性；\n>隐式定义的变量。\n\n#### 2 常用工具util\n\n2.1 util.inherits\n\nutil.inherits(constructor, superConstructor)可以实现对象见原型继承：\n\n```javascript\nvar util = require('util');\nfunction Base() {\n    //....\n};\nfunction Sub() {\n    //....\n};\nutil.inherits(Sub, Base);\n```\n\n2.2 util.inspect\n\nutil.inspect(object, [showHidden], [depth], [colors])可以讲对象转换成字符串，通常用于调试和错误输出。\n\n#### 3 事件驱动events\n\n3.1 事件发射器\n\nevents.EventEmitter的核心是事件发射与事件监听功能的封装，对每个事件支持若干个事件监听器。\n\n```javascript\nvar events = require('events');\n\nvar emitter = new events.EventEmitter();\n\nemitter.on('someEvent', function (arg1, arg2) {\n    console.log(\"linstener1\", arg1, arg2);\n});\n\nemitter.on('someEvent', function (arg1, arg2) {\n    console.log(\"linstener2\", arg1, arg2);\n});\n\nemitter.emit('someEvent', 'gemicat', 1993);\n```\n\n运行结果是：\n\n```javascript\nlistener1 gemicat 1993\nlistener2 gemicat 1993\n```\n\n3.2 error事件\n\nEventEmitter定义当遇到异常时通常会发射error事件，当error被发射时，如果没有相应的监视器，Node会把它当作异常处理。\n\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.emit('error');\n```\n\n#### 4 文件系统fs\n\nfs模块时文件操作的封装。fs模块中所有的操作都提供了异步和同步的两个版本。\n\n4.1 fs.readFile\n\nfs.readFile(filename, [encoding], [callback(err, data)])为异步API\nfs.readFileSync(filename, [encoding])为同步。\n\n4.2 fs.open\n\nfs.open(path, flags, [mode], [callback(err, data)])\n\nflags可以是以下值\n\n```javascript\n1.r : 只读\n2.r+：读写\n3.w ：只写，如果文件不存在创建\n4.w+：读写，如果文件不存在创建\n5.a ：追加，如果文件不存在创建\n6.a+：以读取追加模式打开文件，如果文件不存在创建\nmode参数用于创建文件时给文件制定权限，默认是0666.\n```\n\n#### 5 HTP服务器与客户端\n\n5.1 HTTP服务器\n\nhttp.Server是http模块中的HTTP服务器对象。\n\n1.http.Server的事件\n\n```javascript\n1.request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例\n2.connection：当TCP建立连接时触发，提供一个参数socket，为net.Socket的实例。\n3.close：当服务器关闭时触发。\n```\n\n2.获取GET请求内容\n\n可以手动解析URL后面的内容作为GET的请求参数。使用Node的url模块的parse函数。\n\n```javascript\nvar http = require('http');\nvar util = require('util');\nvar url = require('url');\n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n```\n\n其中query就是我们所谓的GET求情内容。\n\n3.获取POST请求内容\n\n```javascript\nvar http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\n\nhttp.createServer(function (req, res) {\n    var post = '';\n\n    req.on('data', function (chunk) {\n        post += chunk;\n    });\n\n    req.on('end', function () {\n        post = querystring.parse(post);\n        res.end(util.parse(post));\n    });\n}).listen(3000);\n```\n\n这种方法非常不安全，效率非常低下。\n\n5.2 HTTP客户端\n\nhttp提供了两个函数http.request和http.get用于向HTTP服务器发起请求\n\n1.使用http.request发送POST请求：\n\n```javascript\nvar http = require('http');\nvar querystring = require('querystring');\n\nvar content = querystring.stringify({\n    name: 'gemicat',\n    email: 'gemicat@163.com',\n    address: 'earth',\n});\n\nvar options = {\n    host: 'www.byvoid.com',\n    path: '/application/node/post',\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': content.length,\n    }\n};\n\nvar req = http.request(options, function (res) {\n    res.setEncoding('utf8');\n    res.on('data', function (data) {\n        console.log(data);\n    })\n})\n\nreq.write(content);\nreq.end();\n```\n\n2.使用http.get处理GET请求\n\n```javascript\nvar http = require('http');\n\nhttp.get({host: 'gemicat.github.io'}, function (res) {\n    res.setEncoding('utf8');\n    res.on('data', function (data) {\n        console.log(data);\n    });\n});\n```\n\n\n\n\n","source":"_posts/2015-11-24-Node_3-node.md","raw":"---\nlayout: post\ntitle: Node核心模块\ndate: 2015-11-24\ncategories: Node\ntags: [Node.JS]\ndescription: 这里展示了Node的核心模块...\nauthor: \"Gemicat\"\n---\n\n### Node核心模块\n\n#### 1 全局对象\n\n全局对象所有的属性都可以在程序的任何地方访问，在浏览器中，通常window是全局对象，在Node中全局对象是global。\n\n1.1 全局对象与全局变量\n\nglobal是全局变量的宿主，根据ECMAScript中的定义，满足以下条件的变量是全局变量：\n\n>在最外层定义的变量；\n>全局对象的属性；\n>隐式定义的变量。\n\n#### 2 常用工具util\n\n2.1 util.inherits\n\nutil.inherits(constructor, superConstructor)可以实现对象见原型继承：\n\n```javascript\nvar util = require('util');\nfunction Base() {\n    //....\n};\nfunction Sub() {\n    //....\n};\nutil.inherits(Sub, Base);\n```\n\n2.2 util.inspect\n\nutil.inspect(object, [showHidden], [depth], [colors])可以讲对象转换成字符串，通常用于调试和错误输出。\n\n#### 3 事件驱动events\n\n3.1 事件发射器\n\nevents.EventEmitter的核心是事件发射与事件监听功能的封装，对每个事件支持若干个事件监听器。\n\n```javascript\nvar events = require('events');\n\nvar emitter = new events.EventEmitter();\n\nemitter.on('someEvent', function (arg1, arg2) {\n    console.log(\"linstener1\", arg1, arg2);\n});\n\nemitter.on('someEvent', function (arg1, arg2) {\n    console.log(\"linstener2\", arg1, arg2);\n});\n\nemitter.emit('someEvent', 'gemicat', 1993);\n```\n\n运行结果是：\n\n```javascript\nlistener1 gemicat 1993\nlistener2 gemicat 1993\n```\n\n3.2 error事件\n\nEventEmitter定义当遇到异常时通常会发射error事件，当error被发射时，如果没有相应的监视器，Node会把它当作异常处理。\n\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.emit('error');\n```\n\n#### 4 文件系统fs\n\nfs模块时文件操作的封装。fs模块中所有的操作都提供了异步和同步的两个版本。\n\n4.1 fs.readFile\n\nfs.readFile(filename, [encoding], [callback(err, data)])为异步API\nfs.readFileSync(filename, [encoding])为同步。\n\n4.2 fs.open\n\nfs.open(path, flags, [mode], [callback(err, data)])\n\nflags可以是以下值\n\n```javascript\n1.r : 只读\n2.r+：读写\n3.w ：只写，如果文件不存在创建\n4.w+：读写，如果文件不存在创建\n5.a ：追加，如果文件不存在创建\n6.a+：以读取追加模式打开文件，如果文件不存在创建\nmode参数用于创建文件时给文件制定权限，默认是0666.\n```\n\n#### 5 HTP服务器与客户端\n\n5.1 HTTP服务器\n\nhttp.Server是http模块中的HTTP服务器对象。\n\n1.http.Server的事件\n\n```javascript\n1.request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例\n2.connection：当TCP建立连接时触发，提供一个参数socket，为net.Socket的实例。\n3.close：当服务器关闭时触发。\n```\n\n2.获取GET请求内容\n\n可以手动解析URL后面的内容作为GET的请求参数。使用Node的url模块的parse函数。\n\n```javascript\nvar http = require('http');\nvar util = require('util');\nvar url = require('url');\n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n```\n\n其中query就是我们所谓的GET求情内容。\n\n3.获取POST请求内容\n\n```javascript\nvar http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\n\nhttp.createServer(function (req, res) {\n    var post = '';\n\n    req.on('data', function (chunk) {\n        post += chunk;\n    });\n\n    req.on('end', function () {\n        post = querystring.parse(post);\n        res.end(util.parse(post));\n    });\n}).listen(3000);\n```\n\n这种方法非常不安全，效率非常低下。\n\n5.2 HTTP客户端\n\nhttp提供了两个函数http.request和http.get用于向HTTP服务器发起请求\n\n1.使用http.request发送POST请求：\n\n```javascript\nvar http = require('http');\nvar querystring = require('querystring');\n\nvar content = querystring.stringify({\n    name: 'gemicat',\n    email: 'gemicat@163.com',\n    address: 'earth',\n});\n\nvar options = {\n    host: 'www.byvoid.com',\n    path: '/application/node/post',\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': content.length,\n    }\n};\n\nvar req = http.request(options, function (res) {\n    res.setEncoding('utf8');\n    res.on('data', function (data) {\n        console.log(data);\n    })\n})\n\nreq.write(content);\nreq.end();\n```\n\n2.使用http.get处理GET请求\n\n```javascript\nvar http = require('http');\n\nhttp.get({host: 'gemicat.github.io'}, function (res) {\n    res.setEncoding('utf8');\n    res.on('data', function (data) {\n        console.log(data);\n    });\n});\n```\n\n\n\n\n","slug":"2015-11-24-Node_3-node","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bd8000jmo11p9ir0zw5","content":"<h3 id=\"Node核心模块\"><a href=\"#Node核心模块\" class=\"headerlink\" title=\"Node核心模块\"></a>Node核心模块</h3><h4 id=\"1-全局对象\"><a href=\"#1-全局对象\" class=\"headerlink\" title=\"1 全局对象\"></a>1 全局对象</h4><p>全局对象所有的属性都可以在程序的任何地方访问，在浏览器中，通常window是全局对象，在Node中全局对象是global。</p>\n<p>1.1 全局对象与全局变量</p>\n<p>global是全局变量的宿主，根据ECMAScript中的定义，满足以下条件的变量是全局变量：</p>\n<blockquote>\n<p>在最外层定义的变量；<br>全局对象的属性；<br>隐式定义的变量。</p>\n</blockquote>\n<h4 id=\"2-常用工具util\"><a href=\"#2-常用工具util\" class=\"headerlink\" title=\"2 常用工具util\"></a>2 常用工具util</h4><p>2.1 util.inherits</p>\n<p>util.inherits(constructor, superConstructor)可以实现对象见原型继承：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Base</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;;</div><div class=\"line\">util.inherits(Sub, Base);</div></pre></td></tr></table></figure>\n<p>2.2 util.inspect</p>\n<p>util.inspect(object, [showHidden], [depth], [colors])可以讲对象转换成字符串，通常用于调试和错误输出。</p>\n<h4 id=\"3-事件驱动events\"><a href=\"#3-事件驱动events\" class=\"headerlink\" title=\"3 事件驱动events\"></a>3 事件驱动events</h4><p>3.1 事件发射器</p>\n<p>events.EventEmitter的核心是事件发射与事件监听功能的封装，对每个事件支持若干个事件监听器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"linstener1\"</span>, arg1, arg2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"linstener2\"</span>, arg1, arg2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">emitter.emit(<span class=\"string\">'someEvent'</span>, <span class=\"string\">'gemicat'</span>, <span class=\"number\">1993</span>);</div></pre></td></tr></table></figure>\n<p>运行结果是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">listener1 gemicat <span class=\"number\">1993</span></div><div class=\"line\">listener2 gemicat <span class=\"number\">1993</span></div></pre></td></tr></table></figure>\n<p>3.2 error事件</p>\n<p>EventEmitter定义当遇到异常时通常会发射error事件，当error被发射时，如果没有相应的监视器，Node会把它当作异常处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.emit(<span class=\"string\">'error'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"4-文件系统fs\"><a href=\"#4-文件系统fs\" class=\"headerlink\" title=\"4 文件系统fs\"></a>4 文件系统fs</h4><p>fs模块时文件操作的封装。fs模块中所有的操作都提供了异步和同步的两个版本。</p>\n<p>4.1 fs.readFile</p>\n<p>fs.readFile(filename, [encoding], [callback(err, data)])为异步API<br>fs.readFileSync(filename, [encoding])为同步。</p>\n<p>4.2 fs.open</p>\n<p>fs.open(path, flags, [mode], [callback(err, data)])</p>\n<p>flags可以是以下值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>r : 只读</div><div class=\"line\"><span class=\"number\">2.</span>r+：读写</div><div class=\"line\"><span class=\"number\">3.</span>w ：只写，如果文件不存在创建</div><div class=\"line\"><span class=\"number\">4.</span>w+：读写，如果文件不存在创建</div><div class=\"line\"><span class=\"number\">5.</span>a ：追加，如果文件不存在创建</div><div class=\"line\"><span class=\"number\">6.</span>a+：以读取追加模式打开文件，如果文件不存在创建</div><div class=\"line\">mode参数用于创建文件时给文件制定权限，默认是<span class=\"number\">0666.</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-HTP服务器与客户端\"><a href=\"#5-HTP服务器与客户端\" class=\"headerlink\" title=\"5 HTP服务器与客户端\"></a>5 HTP服务器与客户端</h4><p>5.1 HTTP服务器</p>\n<p>http.Server是http模块中的HTTP服务器对象。</p>\n<p>1.http.Server的事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例</div><div class=\"line\"><span class=\"number\">2.</span>connection：当TCP建立连接时触发，提供一个参数socket，为net.Socket的实例。</div><div class=\"line\"><span class=\"number\">3.</span>close：当服务器关闭时触发。</div></pre></td></tr></table></figure>\n<p>2.获取GET请求内容</p>\n<p>可以手动解析URL后面的内容作为GET的请求参数。使用Node的url模块的parse函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">    res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>其中query就是我们所谓的GET求情内容。</p>\n<p>3.获取POST请求内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">        post += chunk;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        post = querystring.parse(post);</div><div class=\"line\">        res.end(util.parse(post));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>这种方法非常不安全，效率非常低下。</p>\n<p>5.2 HTTP客户端</p>\n<p>http提供了两个函数http.request和http.get用于向HTTP服务器发起请求</p>\n<p>1.使用http.request发送POST请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> content = querystring.stringify(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'gemicat'</span>,</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">'gemicat@163.com'</span>,</div><div class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">'earth'</span>,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'www.byvoid.com'</span>,</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/application/node/post'</span>,</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span>,</div><div class=\"line\">        <span class=\"string\">'Content-Length'</span>: content.length,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    res.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">req.write(content);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<p>2.使用http.get处理GET请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\">http.get(&#123;<span class=\"attr\">host</span>: <span class=\"string\">'gemicat.github.io'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    res.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Node核心模块\"><a href=\"#Node核心模块\" class=\"headerlink\" title=\"Node核心模块\"></a>Node核心模块</h3><h4 id=\"1-全局对象\"><a href=\"#1-全局对象\" class=\"headerlink\" title=\"1 全局对象\"></a>1 全局对象</h4><p>全局对象所有的属性都可以在程序的任何地方访问，在浏览器中，通常window是全局对象，在Node中全局对象是global。</p>\n<p>1.1 全局对象与全局变量</p>\n<p>global是全局变量的宿主，根据ECMAScript中的定义，满足以下条件的变量是全局变量：</p>\n<blockquote>\n<p>在最外层定义的变量；<br>全局对象的属性；<br>隐式定义的变量。</p>\n</blockquote>\n<h4 id=\"2-常用工具util\"><a href=\"#2-常用工具util\" class=\"headerlink\" title=\"2 常用工具util\"></a>2 常用工具util</h4><p>2.1 util.inherits</p>\n<p>util.inherits(constructor, superConstructor)可以实现对象见原型继承：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Base</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;;</div><div class=\"line\">util.inherits(Sub, Base);</div></pre></td></tr></table></figure>\n<p>2.2 util.inspect</p>\n<p>util.inspect(object, [showHidden], [depth], [colors])可以讲对象转换成字符串，通常用于调试和错误输出。</p>\n<h4 id=\"3-事件驱动events\"><a href=\"#3-事件驱动events\" class=\"headerlink\" title=\"3 事件驱动events\"></a>3 事件驱动events</h4><p>3.1 事件发射器</p>\n<p>events.EventEmitter的核心是事件发射与事件监听功能的封装，对每个事件支持若干个事件监听器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"linstener1\"</span>, arg1, arg2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"linstener2\"</span>, arg1, arg2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">emitter.emit(<span class=\"string\">'someEvent'</span>, <span class=\"string\">'gemicat'</span>, <span class=\"number\">1993</span>);</div></pre></td></tr></table></figure>\n<p>运行结果是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">listener1 gemicat <span class=\"number\">1993</span></div><div class=\"line\">listener2 gemicat <span class=\"number\">1993</span></div></pre></td></tr></table></figure>\n<p>3.2 error事件</p>\n<p>EventEmitter定义当遇到异常时通常会发射error事件，当error被发射时，如果没有相应的监视器，Node会把它当作异常处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.emit(<span class=\"string\">'error'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"4-文件系统fs\"><a href=\"#4-文件系统fs\" class=\"headerlink\" title=\"4 文件系统fs\"></a>4 文件系统fs</h4><p>fs模块时文件操作的封装。fs模块中所有的操作都提供了异步和同步的两个版本。</p>\n<p>4.1 fs.readFile</p>\n<p>fs.readFile(filename, [encoding], [callback(err, data)])为异步API<br>fs.readFileSync(filename, [encoding])为同步。</p>\n<p>4.2 fs.open</p>\n<p>fs.open(path, flags, [mode], [callback(err, data)])</p>\n<p>flags可以是以下值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>r : 只读</div><div class=\"line\"><span class=\"number\">2.</span>r+：读写</div><div class=\"line\"><span class=\"number\">3.</span>w ：只写，如果文件不存在创建</div><div class=\"line\"><span class=\"number\">4.</span>w+：读写，如果文件不存在创建</div><div class=\"line\"><span class=\"number\">5.</span>a ：追加，如果文件不存在创建</div><div class=\"line\"><span class=\"number\">6.</span>a+：以读取追加模式打开文件，如果文件不存在创建</div><div class=\"line\">mode参数用于创建文件时给文件制定权限，默认是<span class=\"number\">0666.</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-HTP服务器与客户端\"><a href=\"#5-HTP服务器与客户端\" class=\"headerlink\" title=\"5 HTP服务器与客户端\"></a>5 HTP服务器与客户端</h4><p>5.1 HTTP服务器</p>\n<p>http.Server是http模块中的HTTP服务器对象。</p>\n<p>1.http.Server的事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span>request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例</div><div class=\"line\"><span class=\"number\">2.</span>connection：当TCP建立连接时触发，提供一个参数socket，为net.Socket的实例。</div><div class=\"line\"><span class=\"number\">3.</span>close：当服务器关闭时触发。</div></pre></td></tr></table></figure>\n<p>2.获取GET请求内容</p>\n<p>可以手动解析URL后面的内容作为GET的请求参数。使用Node的url模块的parse函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">    res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>其中query就是我们所谓的GET求情内容。</p>\n<p>3.获取POST请求内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">        post += chunk;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        post = querystring.parse(post);</div><div class=\"line\">        res.end(util.parse(post));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>这种方法非常不安全，效率非常低下。</p>\n<p>5.2 HTTP客户端</p>\n<p>http提供了两个函数http.request和http.get用于向HTTP服务器发起请求</p>\n<p>1.使用http.request发送POST请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> content = querystring.stringify(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'gemicat'</span>,</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">'gemicat@163.com'</span>,</div><div class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">'earth'</span>,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'www.byvoid.com'</span>,</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/application/node/post'</span>,</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span>,</div><div class=\"line\">        <span class=\"string\">'Content-Length'</span>: content.length,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    res.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">req.write(content);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<p>2.使用http.get处理GET请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\">http.get(&#123;<span class=\"attr\">host</span>: <span class=\"string\">'gemicat.github.io'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    res.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JS运动框架","date":"2016-02-16T16:00:00.000Z","description":"小型运动框架，可以实现缓冲运动，进一步理解js...","author":"Gemicat","_content":"\n[运动框架，进入另存为](https://raw.githubusercontent.com/Gemicat/gemicat.github.io/master/demo/Frame/move.js)\n\n### Coding\n\n```javascript\n// 兼容性获取对象属性\nfunction getStyle(obj, attr){\n    if(obj.currentStyle){\n        return obj.currentStyle[attr];\n    }else{\n        return getComputedStyle(obj, false)[attr];\n    }\n}\n\n// 运动框架\nfunction startMove(obj, json, fn){\n    clearInterval(obj.timer);\n    obj.timer = setInterval(function(){\n        \n        // 检测是否所有运动都完成\n        var bStop = true;\n        \n        for(var attr in json){\n\n            // 检测对象当前属性\n            var iCur = 0;\n            if(attr == \"opacity\"){\n                iCur = parseInt(parseFloat(getStyle(obj, attr))*100);\n            }else{\n                iCur = parseInt(getStyle(obj, attr));\n            }\n\n            // 缓冲运动速度计算\n            var iSpeed = (json[attr] - iCur) / 8;\n            iSpeed = iSpeed>0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);\n\n            // 检测是否所有运动都完成\n            if(iCur != json[attr]){\n                bStop = false;\n            }\n\n            // 对象属性变化\n            if(attr == \"opacity\"){\n                obj.style.filter = 'alpha(opacity:'+(iCur+iSpeed)+')';\n                obj.style.opacity = (iCur+iSpeed)/100;\n            }else{\n                obj.style[attr] = iCur + iSpeed + \"px\";\n            }\n        }\n\n        // 停止运动\n        if(bStop){\n            clearInterval(obj.timer);\n            if(fn){\n                fn();\n            }\n        }\n    },30);\n}\n```","source":"_posts/2016-02-17-MoveJs-javascript.md","raw":"---\nlayout: post\ntitle: JS运动框架\ndate: 2016-02-17\ncategories: javascript\ntags: [javascript]\ndescription: 小型运动框架，可以实现缓冲运动，进一步理解js...\nauthor: \"Gemicat\"\n---\n\n[运动框架，进入另存为](https://raw.githubusercontent.com/Gemicat/gemicat.github.io/master/demo/Frame/move.js)\n\n### Coding\n\n```javascript\n// 兼容性获取对象属性\nfunction getStyle(obj, attr){\n    if(obj.currentStyle){\n        return obj.currentStyle[attr];\n    }else{\n        return getComputedStyle(obj, false)[attr];\n    }\n}\n\n// 运动框架\nfunction startMove(obj, json, fn){\n    clearInterval(obj.timer);\n    obj.timer = setInterval(function(){\n        \n        // 检测是否所有运动都完成\n        var bStop = true;\n        \n        for(var attr in json){\n\n            // 检测对象当前属性\n            var iCur = 0;\n            if(attr == \"opacity\"){\n                iCur = parseInt(parseFloat(getStyle(obj, attr))*100);\n            }else{\n                iCur = parseInt(getStyle(obj, attr));\n            }\n\n            // 缓冲运动速度计算\n            var iSpeed = (json[attr] - iCur) / 8;\n            iSpeed = iSpeed>0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);\n\n            // 检测是否所有运动都完成\n            if(iCur != json[attr]){\n                bStop = false;\n            }\n\n            // 对象属性变化\n            if(attr == \"opacity\"){\n                obj.style.filter = 'alpha(opacity:'+(iCur+iSpeed)+')';\n                obj.style.opacity = (iCur+iSpeed)/100;\n            }else{\n                obj.style[attr] = iCur + iSpeed + \"px\";\n            }\n        }\n\n        // 停止运动\n        if(bStop){\n            clearInterval(obj.timer);\n            if(fn){\n                fn();\n            }\n        }\n    },30);\n}\n```","slug":"2016-02-17-MoveJs-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bd9000mmo11ruq49kbi","content":"<p><a href=\"https://raw.githubusercontent.com/Gemicat/gemicat.github.io/master/demo/Frame/move.js\" target=\"_blank\" rel=\"external\">运动框架，进入另存为</a></p>\n<h3 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 兼容性获取对象属性</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj, attr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj.currentStyle)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[attr];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(obj, <span class=\"literal\">false</span>)[attr];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 运动框架</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj, json, fn</span>)</span>&#123;</div><div class=\"line\">    clearInterval(obj.timer);</div><div class=\"line\">    obj.timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 检测是否所有运动都完成</span></div><div class=\"line\">        <span class=\"keyword\">var</span> bStop = <span class=\"literal\">true</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> attr <span class=\"keyword\">in</span> json)&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 检测对象当前属性</span></div><div class=\"line\">            <span class=\"keyword\">var</span> iCur = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(attr == <span class=\"string\">\"opacity\"</span>)&#123;</div><div class=\"line\">                iCur = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">parseFloat</span>(getStyle(obj, attr))*<span class=\"number\">100</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                iCur = <span class=\"built_in\">parseInt</span>(getStyle(obj, attr));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 缓冲运动速度计算</span></div><div class=\"line\">            <span class=\"keyword\">var</span> iSpeed = (json[attr] - iCur) / <span class=\"number\">8</span>;</div><div class=\"line\">            iSpeed = iSpeed&gt;<span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(iSpeed) : <span class=\"built_in\">Math</span>.floor(iSpeed);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 检测是否所有运动都完成</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(iCur != json[attr])&#123;</div><div class=\"line\">                bStop = <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 对象属性变化</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(attr == <span class=\"string\">\"opacity\"</span>)&#123;</div><div class=\"line\">                obj.style.filter = <span class=\"string\">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class=\"string\">')'</span>;</div><div class=\"line\">                obj.style.opacity = (iCur+iSpeed)/<span class=\"number\">100</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                obj.style[attr] = iCur + iSpeed + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 停止运动</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(bStop)&#123;</div><div class=\"line\">            clearInterval(obj.timer);</div><div class=\"line\">            <span class=\"keyword\">if</span>(fn)&#123;</div><div class=\"line\">                fn();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,<span class=\"number\">30</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://raw.githubusercontent.com/Gemicat/gemicat.github.io/master/demo/Frame/move.js\">运动框架，进入另存为</a></p>\n<h3 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 兼容性获取对象属性</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj, attr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj.currentStyle)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[attr];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(obj, <span class=\"literal\">false</span>)[attr];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 运动框架</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj, json, fn</span>)</span>&#123;</div><div class=\"line\">    clearInterval(obj.timer);</div><div class=\"line\">    obj.timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 检测是否所有运动都完成</span></div><div class=\"line\">        <span class=\"keyword\">var</span> bStop = <span class=\"literal\">true</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> attr <span class=\"keyword\">in</span> json)&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 检测对象当前属性</span></div><div class=\"line\">            <span class=\"keyword\">var</span> iCur = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(attr == <span class=\"string\">\"opacity\"</span>)&#123;</div><div class=\"line\">                iCur = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">parseFloat</span>(getStyle(obj, attr))*<span class=\"number\">100</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                iCur = <span class=\"built_in\">parseInt</span>(getStyle(obj, attr));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 缓冲运动速度计算</span></div><div class=\"line\">            <span class=\"keyword\">var</span> iSpeed = (json[attr] - iCur) / <span class=\"number\">8</span>;</div><div class=\"line\">            iSpeed = iSpeed&gt;<span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(iSpeed) : <span class=\"built_in\">Math</span>.floor(iSpeed);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 检测是否所有运动都完成</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(iCur != json[attr])&#123;</div><div class=\"line\">                bStop = <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 对象属性变化</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(attr == <span class=\"string\">\"opacity\"</span>)&#123;</div><div class=\"line\">                obj.style.filter = <span class=\"string\">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class=\"string\">')'</span>;</div><div class=\"line\">                obj.style.opacity = (iCur+iSpeed)/<span class=\"number\">100</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                obj.style[attr] = iCur + iSpeed + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 停止运动</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(bStop)&#123;</div><div class=\"line\">            clearInterval(obj.timer);</div><div class=\"line\">            <span class=\"keyword\">if</span>(fn)&#123;</div><div class=\"line\">                fn();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,<span class=\"number\">30</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"JavaScript基础算法 - 查找","date":"2016-02-16T16:00:00.000Z","description":"二分法查找代码示例...","author":"Gemicat","_content":"\n### 查找\n\n#### 二分法\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8];\nvar a = 1;\nvar start = 0;\nvar end = arr.length - 1;\n\n// 二分法递归方法\nfunction find(arr, a, start, end) {\n    var temp = Math.ceil((end + start) / 2);\n    if (start > end) {\n        console.log('找不到');\n        return false;\n    }\n    if (arr[temp] == a) {\n        console.log(\"找到了\");\n        return true;\n    } else if (arr[temp] > a) {\n        end = temp - 1;\n        find(arr, a, start, end);\n    }\n    else if (arr[temp] < a) {\n        start = temp + 1;\n        find(arr, a, start, end);\n    }\n}\n\n// 二分法非递归\nfunction find2(arr, a, start, end) {\n    while ((end - start) >= 0) {\n        var temp = Math.floor((end + start) / 2);\n        console.log(temp)\n        if (arr[temp] == a) {\n            console.log('找到了');\n            return true;\n        } else if (arr[temp] > a) {\n            end = temp - 1;\n        } else if (arr[temp] < a) {\n            start = temp + 1;\n        }\n    }\n    console.log('找不到');\n    return;\n}\n\nfind(arr, a, start, end);\nfind2(arr, a, start, end);\n```","source":"_posts/2016-02-17-JsFind-javascript.md","raw":"---\nlayout: post\ntitle: JavaScript基础算法 - 查找\ndate: 2016-02-17\ncategories: 数据结构与算法\ntags: [数据结构与算法]\ndescription: 二分法查找代码示例...\nauthor: \"Gemicat\"\n---\n\n### 查找\n\n#### 二分法\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8];\nvar a = 1;\nvar start = 0;\nvar end = arr.length - 1;\n\n// 二分法递归方法\nfunction find(arr, a, start, end) {\n    var temp = Math.ceil((end + start) / 2);\n    if (start > end) {\n        console.log('找不到');\n        return false;\n    }\n    if (arr[temp] == a) {\n        console.log(\"找到了\");\n        return true;\n    } else if (arr[temp] > a) {\n        end = temp - 1;\n        find(arr, a, start, end);\n    }\n    else if (arr[temp] < a) {\n        start = temp + 1;\n        find(arr, a, start, end);\n    }\n}\n\n// 二分法非递归\nfunction find2(arr, a, start, end) {\n    while ((end - start) >= 0) {\n        var temp = Math.floor((end + start) / 2);\n        console.log(temp)\n        if (arr[temp] == a) {\n            console.log('找到了');\n            return true;\n        } else if (arr[temp] > a) {\n            end = temp - 1;\n        } else if (arr[temp] < a) {\n            start = temp + 1;\n        }\n    }\n    console.log('找不到');\n    return;\n}\n\nfind(arr, a, start, end);\nfind2(arr, a, start, end);\n```","slug":"2016-02-17-JsFind-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdb000qmo116c3s52rx","content":"<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><h4 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> end = arr.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 二分法递归方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">arr, a, start, end</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp = <span class=\"built_in\">Math</span>.ceil((end + start) / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'找不到'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr[temp] == a) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"找到了\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &gt; a) &#123;</div><div class=\"line\">        end = temp - <span class=\"number\">1</span>;</div><div class=\"line\">        find(arr, a, start, end);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &lt; a) &#123;</div><div class=\"line\">        start = temp + <span class=\"number\">1</span>;</div><div class=\"line\">        find(arr, a, start, end);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 二分法非递归</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find2</span>(<span class=\"params\">arr, a, start, end</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((end - start) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> temp = <span class=\"built_in\">Math</span>.floor((end + start) / <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(temp)</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[temp] == a) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'找到了'</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &gt; a) &#123;</div><div class=\"line\">            end = temp - <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &lt; a) &#123;</div><div class=\"line\">            start = temp + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'找不到'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">find(arr, a, start, end);</div><div class=\"line\">find2(arr, a, start, end);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><h4 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> end = arr.length - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 二分法递归方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">arr, a, start, end</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp = <span class=\"built_in\">Math</span>.ceil((end + start) / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'找不到'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr[temp] == a) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"找到了\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &gt; a) &#123;</div><div class=\"line\">        end = temp - <span class=\"number\">1</span>;</div><div class=\"line\">        find(arr, a, start, end);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &lt; a) &#123;</div><div class=\"line\">        start = temp + <span class=\"number\">1</span>;</div><div class=\"line\">        find(arr, a, start, end);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 二分法非递归</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find2</span>(<span class=\"params\">arr, a, start, end</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((end - start) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> temp = <span class=\"built_in\">Math</span>.floor((end + start) / <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(temp)</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[temp] == a) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'找到了'</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &gt; a) &#123;</div><div class=\"line\">            end = temp - <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[temp] &lt; a) &#123;</div><div class=\"line\">            start = temp + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'找不到'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">find(arr, a, start, end);</div><div class=\"line\">find2(arr, a, start, end);</div></pre></td></tr></table></figure>"},{"layout":"post","title":"JavaScript基础算法 - 排序","date":"2016-02-16T16:00:00.000Z","description":"快速排序的代码示例...","author":"Gemicat","_content":"\n### 排序\n\n#### 快速排序\n\n```javascript\n**\n    * 快速排序\n    */\n\nvar temp;\nObject.prototype.swap = function (arr, index_1, index_2) {\n    var tmp = arr[index_1];\n    arr[index_1] = arr[index_2];\n    arr[index_2] = tmp;\n}\n\nfunction partition(arr, start, end) {\n    temp = arr[start];\n    while (start < end) {\n        while (start < end && arr[end] >= temp)--end;\n        swap(arr, start, end);\n        while (start < end && arr[start] <= temp)++start;\n        swap(arr, end, start);\n    }\n    return start;\n}\n\nfunction quickSort(arr, start, end) {\n    if (start < end) {\n        var num = partition(arr, start, end);\n        quickSort(arr, num + 1, end);\n        quickSort(arr, start, num - 1);\n    } else {\n        console.log(arr);\n        return;\n    }\n}\n\nvar arr = [2, 1, 3, 2];\n\nquickSort(arr, 0, 3);\n\n/**\n    * 找出数组第k小的值\n    * 在快速排序的基础上引用二分法的概念，当找到第k位时，说明是最小\n    */\nvar temp;\nObject.prototype.swap = function (arr, index_1, index_2) {\n    var tmp = arr[index_1];\n    arr[index_1] = arr[index_2];\n    arr[index_2] = tmp;\n}\n\nfunction partition(arr, start, end) {\n    temp = arr[start];\n    while (start < end) {\n        while (start < end && arr[end] >= temp)--end;\n        swap(arr, start, end);\n        while (start < end && arr[start] <= temp)++start;\n        swap(arr, end, start);\n    }\n    return start;\n}\n\nfunction findK(arr, key) {\n    // if (start == (key - 1)) {\n    //     console.log('第k小的为' + arr[key-1]);\n    //     return;\n    // }\n    var start = 0;\n    var end = arr.length - 1;\n    var num = partition(arr, start, end);\n\n    while (start < end) {\n        if (num == key - 1) {\n            console.log(arr[num]);\n            return;\n        }\n        else if (num < key) {\n            start = num + 1;\n            num = partition(arr, start, end);\n        }\n        else {\n            end = num - 1;\n            num = partition(arr, start, end);\n        }\n    }\n\n    console.log(\"not found!\");\n}\n\nvar arr = [10, 25, 38, 44];\nfindK(arr, 6);\n```","source":"_posts/2016-02-17-JsSort-javascript.md","raw":"---\nlayout: post\ntitle: JavaScript基础算法 - 排序\ndate: 2016-02-17\ncategories: 数据结构与算法\ntags: [数据结构与算法]\ndescription: 快速排序的代码示例...\nauthor: \"Gemicat\"\n---\n\n### 排序\n\n#### 快速排序\n\n```javascript\n**\n    * 快速排序\n    */\n\nvar temp;\nObject.prototype.swap = function (arr, index_1, index_2) {\n    var tmp = arr[index_1];\n    arr[index_1] = arr[index_2];\n    arr[index_2] = tmp;\n}\n\nfunction partition(arr, start, end) {\n    temp = arr[start];\n    while (start < end) {\n        while (start < end && arr[end] >= temp)--end;\n        swap(arr, start, end);\n        while (start < end && arr[start] <= temp)++start;\n        swap(arr, end, start);\n    }\n    return start;\n}\n\nfunction quickSort(arr, start, end) {\n    if (start < end) {\n        var num = partition(arr, start, end);\n        quickSort(arr, num + 1, end);\n        quickSort(arr, start, num - 1);\n    } else {\n        console.log(arr);\n        return;\n    }\n}\n\nvar arr = [2, 1, 3, 2];\n\nquickSort(arr, 0, 3);\n\n/**\n    * 找出数组第k小的值\n    * 在快速排序的基础上引用二分法的概念，当找到第k位时，说明是最小\n    */\nvar temp;\nObject.prototype.swap = function (arr, index_1, index_2) {\n    var tmp = arr[index_1];\n    arr[index_1] = arr[index_2];\n    arr[index_2] = tmp;\n}\n\nfunction partition(arr, start, end) {\n    temp = arr[start];\n    while (start < end) {\n        while (start < end && arr[end] >= temp)--end;\n        swap(arr, start, end);\n        while (start < end && arr[start] <= temp)++start;\n        swap(arr, end, start);\n    }\n    return start;\n}\n\nfunction findK(arr, key) {\n    // if (start == (key - 1)) {\n    //     console.log('第k小的为' + arr[key-1]);\n    //     return;\n    // }\n    var start = 0;\n    var end = arr.length - 1;\n    var num = partition(arr, start, end);\n\n    while (start < end) {\n        if (num == key - 1) {\n            console.log(arr[num]);\n            return;\n        }\n        else if (num < key) {\n            start = num + 1;\n            num = partition(arr, start, end);\n        }\n        else {\n            end = num - 1;\n            num = partition(arr, start, end);\n        }\n    }\n\n    console.log(\"not found!\");\n}\n\nvar arr = [10, 25, 38, 44];\nfindK(arr, 6);\n```","slug":"2016-02-17-JsSort-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdd000smo11o5ak0jx6","content":"<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">**</div><div class=\"line\">    * 快速排序</div><div class=\"line\">    */</div><div class=\"line\"></div><div class=\"line\">var temp;</div><div class=\"line\">Object.prototype.swap = function (arr, index_1, index_2) &#123;</div><div class=\"line\">    var tmp = arr[index_1];</div><div class=\"line\">    arr[index_1] = arr[index_2];</div><div class=\"line\">    arr[index_2] = tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function partition(arr, start, end) &#123;</div><div class=\"line\">    temp = arr[start];</div><div class=\"line\">    while (start &lt; end) &#123;</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[end] &gt;= temp)--end;</div><div class=\"line\">        swap(arr, start, end);</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[start] &lt;= temp)++start;</div><div class=\"line\">        swap(arr, end, start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return start;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function quickSort(arr, start, end) &#123;</div><div class=\"line\">    if (start &lt; end) &#123;</div><div class=\"line\">        var num = partition(arr, start, end);</div><div class=\"line\">        quickSort(arr, num + 1, end);</div><div class=\"line\">        quickSort(arr, start, num - 1);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(arr);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var arr = [2, 1, 3, 2];</div><div class=\"line\"></div><div class=\"line\">quickSort(arr, 0, 3);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">    * 找出数组第k小的值</div><div class=\"line\">    * 在快速排序的基础上引用二分法的概念，当找到第k位时，说明是最小</div><div class=\"line\">    */</div><div class=\"line\">var temp;</div><div class=\"line\">Object.prototype.swap = function (arr, index_1, index_2) &#123;</div><div class=\"line\">    var tmp = arr[index_1];</div><div class=\"line\">    arr[index_1] = arr[index_2];</div><div class=\"line\">    arr[index_2] = tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function partition(arr, start, end) &#123;</div><div class=\"line\">    temp = arr[start];</div><div class=\"line\">    while (start &lt; end) &#123;</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[end] &gt;= temp)--end;</div><div class=\"line\">        swap(arr, start, end);</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[start] &lt;= temp)++start;</div><div class=\"line\">        swap(arr, end, start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return start;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function findK(arr, key) &#123;</div><div class=\"line\">    // if (start == (key - 1)) &#123;</div><div class=\"line\">    //     console.log('第k小的为' + arr[key-1]);</div><div class=\"line\">    //     return;</div><div class=\"line\">    // &#125;</div><div class=\"line\">    var start = 0;</div><div class=\"line\">    var end = arr.length - 1;</div><div class=\"line\">    var num = partition(arr, start, end);</div><div class=\"line\"></div><div class=\"line\">    while (start &lt; end) &#123;</div><div class=\"line\">        if (num == key - 1) &#123;</div><div class=\"line\">            console.log(arr[num]);</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (num &lt; key) &#123;</div><div class=\"line\">            start = num + 1;</div><div class=\"line\">            num = partition(arr, start, end);</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            end = num - 1;</div><div class=\"line\">            num = partition(arr, start, end);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    console.log(\"not found!\");</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var arr = [10, 25, 38, 44];</div><div class=\"line\">findK(arr, 6);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">**</div><div class=\"line\">    * 快速排序</div><div class=\"line\">    */</div><div class=\"line\"></div><div class=\"line\">var temp;</div><div class=\"line\">Object.prototype.swap = function (arr, index_1, index_2) &#123;</div><div class=\"line\">    var tmp = arr[index_1];</div><div class=\"line\">    arr[index_1] = arr[index_2];</div><div class=\"line\">    arr[index_2] = tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function partition(arr, start, end) &#123;</div><div class=\"line\">    temp = arr[start];</div><div class=\"line\">    while (start &lt; end) &#123;</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[end] &gt;= temp)--end;</div><div class=\"line\">        swap(arr, start, end);</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[start] &lt;= temp)++start;</div><div class=\"line\">        swap(arr, end, start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return start;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function quickSort(arr, start, end) &#123;</div><div class=\"line\">    if (start &lt; end) &#123;</div><div class=\"line\">        var num = partition(arr, start, end);</div><div class=\"line\">        quickSort(arr, num + 1, end);</div><div class=\"line\">        quickSort(arr, start, num - 1);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        console.log(arr);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var arr = [2, 1, 3, 2];</div><div class=\"line\"></div><div class=\"line\">quickSort(arr, 0, 3);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">    * 找出数组第k小的值</div><div class=\"line\">    * 在快速排序的基础上引用二分法的概念，当找到第k位时，说明是最小</div><div class=\"line\">    */</div><div class=\"line\">var temp;</div><div class=\"line\">Object.prototype.swap = function (arr, index_1, index_2) &#123;</div><div class=\"line\">    var tmp = arr[index_1];</div><div class=\"line\">    arr[index_1] = arr[index_2];</div><div class=\"line\">    arr[index_2] = tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function partition(arr, start, end) &#123;</div><div class=\"line\">    temp = arr[start];</div><div class=\"line\">    while (start &lt; end) &#123;</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[end] &gt;= temp)--end;</div><div class=\"line\">        swap(arr, start, end);</div><div class=\"line\">        while (start &lt; end &amp;&amp; arr[start] &lt;= temp)++start;</div><div class=\"line\">        swap(arr, end, start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return start;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function findK(arr, key) &#123;</div><div class=\"line\">    // if (start == (key - 1)) &#123;</div><div class=\"line\">    //     console.log('第k小的为' + arr[key-1]);</div><div class=\"line\">    //     return;</div><div class=\"line\">    // &#125;</div><div class=\"line\">    var start = 0;</div><div class=\"line\">    var end = arr.length - 1;</div><div class=\"line\">    var num = partition(arr, start, end);</div><div class=\"line\"></div><div class=\"line\">    while (start &lt; end) &#123;</div><div class=\"line\">        if (num == key - 1) &#123;</div><div class=\"line\">            console.log(arr[num]);</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (num &lt; key) &#123;</div><div class=\"line\">            start = num + 1;</div><div class=\"line\">            num = partition(arr, start, end);</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            end = num - 1;</div><div class=\"line\">            num = partition(arr, start, end);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    console.log(\"not found!\");</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var arr = [10, 25, 38, 44];</div><div class=\"line\">findK(arr, 6);</div></pre></td></tr></table></figure>"},{"layout":"post","title":"2015算法笔试题","date":"2016-02-16T16:00:00.000Z","description":"随意看到的算法笔试题...","author":"Gemicat","_content":"\n### 1.检测字符串中字母是否被“+”包围.\n\n```javascript\nfunction testSymbols(str) {\n    var arr = str.split(\"\");\n    var reg = /^[A-Za-z]*$/gi;\n    var len = arr.length;\n\n    if (reg.test(arr[0]) || reg.test(arr[len - 1])) {\n        return false;\n    }\n\n    for (var i = 1; i < len - 1; i++) {\n        if (reg.test(arr[i])) {\n            if (arr[i - 1] != \"+\" || arr[i + 1] != \"+\") {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```\n\n### 2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.\n\n```javascript\nvar str = \"++d+-o+u+b--a++-\";\nconsole.log(testSymbols(str));\n\nfunction isMagicSum(arr) {\n    var arr = arr.sort(function (a, b) {\n        return a - b;\n    });\n    var max = arr[arr.length - 1];\n    arr.pop();\n    for (var i = 1; i < 1 << arr.length; i++) {\n        var sum = 0;\n        for (var j = 0; j < arr.length; j++) {\n            if ((i & 1 << j) != 0) {\n                sum += arr[j];\n            }\n        }\n        if (sum == max) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n### 3.小熊分苹果\n\nN（1\\<N\\<9）只熊分一堆苹果，第一只熊（叫小东鄙视）把苹果平均分成N分，刚好多出一个，扔掉多出的那个并取走一份，后面每只熊以此类推。\n问苹果最少多少个。\n\n```javascript\nfunction apple(n) {\n    var i = 1, final = 1;\n    var temp = n;\n    var sum;\n\n    while (temp > 1) {\n        var tmp1 = ((i * n) + 1), tmp2 = (n - 1);\n        var num = tmp1 / tmp2;\n\n        if (tmp1 % tmp2 != 0) {\n            ++final;\n            i = final;\n            temp = n;\n            continue;\n        }\n\n        i = num, temp--;\n    }\n\n    return i * n + 1;\n}\nconsole.log(apple(5));\n```\n\n### 4.年终奖问题\n\n```javascript\nfunction findMax(x, y, sum) {\n    sum += arr[x][y];\n    if ((x == 5) && (y == 5) && (sum > max)) {\n        max = sum;\n    }\n    if (x < 5) {\n        findMax(x + 1, y, sum);\n    }\n    if (y < 5) {\n        findMax(x, y + 1, sum);\n    }\n}\n\nvar arr = [\n    [200, 120, 400, 150, 180, 300],\n    [150, 250, 360, 120, 200, 130],\n    [350, 300, 250, 100, 500, 260],\n    [100, 150, 260, 320, 100, 150],\n    [500, 130, 260, 100, 200, 170],\n    [160, 100, 250, 200, 600, 200]\n];\nvar max = 0;\nfindMax(0, 0, 0);\nconsole.log(max);\n```","source":"_posts/2016-02-17-Qs_2-codility.md","raw":"---\nlayout: post\ntitle: 2015算法笔试题\ndate: 2016-02-17\ncategories: LeetCode\ntags: [LeetCode]\ndescription: 随意看到的算法笔试题...\nauthor: \"Gemicat\"\n---\n\n### 1.检测字符串中字母是否被“+”包围.\n\n```javascript\nfunction testSymbols(str) {\n    var arr = str.split(\"\");\n    var reg = /^[A-Za-z]*$/gi;\n    var len = arr.length;\n\n    if (reg.test(arr[0]) || reg.test(arr[len - 1])) {\n        return false;\n    }\n\n    for (var i = 1; i < len - 1; i++) {\n        if (reg.test(arr[i])) {\n            if (arr[i - 1] != \"+\" || arr[i + 1] != \"+\") {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```\n\n### 2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.\n\n```javascript\nvar str = \"++d+-o+u+b--a++-\";\nconsole.log(testSymbols(str));\n\nfunction isMagicSum(arr) {\n    var arr = arr.sort(function (a, b) {\n        return a - b;\n    });\n    var max = arr[arr.length - 1];\n    arr.pop();\n    for (var i = 1; i < 1 << arr.length; i++) {\n        var sum = 0;\n        for (var j = 0; j < arr.length; j++) {\n            if ((i & 1 << j) != 0) {\n                sum += arr[j];\n            }\n        }\n        if (sum == max) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n### 3.小熊分苹果\n\nN（1\\<N\\<9）只熊分一堆苹果，第一只熊（叫小东鄙视）把苹果平均分成N分，刚好多出一个，扔掉多出的那个并取走一份，后面每只熊以此类推。\n问苹果最少多少个。\n\n```javascript\nfunction apple(n) {\n    var i = 1, final = 1;\n    var temp = n;\n    var sum;\n\n    while (temp > 1) {\n        var tmp1 = ((i * n) + 1), tmp2 = (n - 1);\n        var num = tmp1 / tmp2;\n\n        if (tmp1 % tmp2 != 0) {\n            ++final;\n            i = final;\n            temp = n;\n            continue;\n        }\n\n        i = num, temp--;\n    }\n\n    return i * n + 1;\n}\nconsole.log(apple(5));\n```\n\n### 4.年终奖问题\n\n```javascript\nfunction findMax(x, y, sum) {\n    sum += arr[x][y];\n    if ((x == 5) && (y == 5) && (sum > max)) {\n        max = sum;\n    }\n    if (x < 5) {\n        findMax(x + 1, y, sum);\n    }\n    if (y < 5) {\n        findMax(x, y + 1, sum);\n    }\n}\n\nvar arr = [\n    [200, 120, 400, 150, 180, 300],\n    [150, 250, 360, 120, 200, 130],\n    [350, 300, 250, 100, 500, 260],\n    [100, 150, 260, 320, 100, 150],\n    [500, 130, 260, 100, 200, 170],\n    [160, 100, 250, 200, 600, 200]\n];\nvar max = 0;\nfindMax(0, 0, 0);\nconsole.log(max);\n```","slug":"2016-02-17-Qs_2-codility","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdg000xmo11a2vk4yw9","content":"<h3 id=\"1-检测字符串中字母是否被“-”包围\"><a href=\"#1-检测字符串中字母是否被“-”包围\" class=\"headerlink\" title=\"1.检测字符串中字母是否被“+”包围.\"></a>1.检测字符串中字母是否被“+”包围.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testSymbols</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^[A-Za-z]*$/gi</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (reg.test(arr[<span class=\"number\">0</span>]) || reg.test(arr[len - <span class=\"number\">1</span>])) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reg.test(arr[i])) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[i - <span class=\"number\">1</span>] != <span class=\"string\">\"+\"</span> || arr[i + <span class=\"number\">1</span>] != <span class=\"string\">\"+\"</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成\"><a href=\"#2-给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成\" class=\"headerlink\" title=\"2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.\"></a>2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"++d+-o+u+b--a++-\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(testSymbols(str));</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMagicSum</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a - b;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> max = arr[arr.length - <span class=\"number\">1</span>];</div><div class=\"line\">    arr.pop();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1</span> &lt;&lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((i &amp; <span class=\"number\">1</span> &lt;&lt; j) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                sum += arr[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sum == max) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-小熊分苹果\"><a href=\"#3-小熊分苹果\" class=\"headerlink\" title=\"3.小熊分苹果\"></a>3.小熊分苹果</h3><p>N（1\\&lt;N\\&lt;9）只熊分一堆苹果，第一只熊（叫小东鄙视）把苹果平均分成N分，刚好多出一个，扔掉多出的那个并取走一份，后面每只熊以此类推。<br>问苹果最少多少个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apple</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, final = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp = n;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (temp &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> tmp1 = ((i * n) + <span class=\"number\">1</span>), tmp2 = (n - <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> num = tmp1 / tmp2;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (tmp1 % tmp2 != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            ++final;</div><div class=\"line\">            i = final;</div><div class=\"line\">            temp = n;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        i = num, temp--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> i * n + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(apple(<span class=\"number\">5</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"4-年终奖问题\"><a href=\"#4-年终奖问题\" class=\"headerlink\" title=\"4.年终奖问题\"></a>4.年终奖问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findMax</span>(<span class=\"params\">x, y, sum</span>) </span>&#123;</div><div class=\"line\">    sum += arr[x][y];</div><div class=\"line\">    <span class=\"keyword\">if</span> ((x == <span class=\"number\">5</span>) &amp;&amp; (y == <span class=\"number\">5</span>) &amp;&amp; (sum &gt; max)) &#123;</div><div class=\"line\">        max = sum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        findMax(x + <span class=\"number\">1</span>, y, sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        findMax(x, y + <span class=\"number\">1</span>, sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">    [<span class=\"number\">200</span>, <span class=\"number\">120</span>, <span class=\"number\">400</span>, <span class=\"number\">150</span>, <span class=\"number\">180</span>, <span class=\"number\">300</span>],</div><div class=\"line\">    [<span class=\"number\">150</span>, <span class=\"number\">250</span>, <span class=\"number\">360</span>, <span class=\"number\">120</span>, <span class=\"number\">200</span>, <span class=\"number\">130</span>],</div><div class=\"line\">    [<span class=\"number\">350</span>, <span class=\"number\">300</span>, <span class=\"number\">250</span>, <span class=\"number\">100</span>, <span class=\"number\">500</span>, <span class=\"number\">260</span>],</div><div class=\"line\">    [<span class=\"number\">100</span>, <span class=\"number\">150</span>, <span class=\"number\">260</span>, <span class=\"number\">320</span>, <span class=\"number\">100</span>, <span class=\"number\">150</span>],</div><div class=\"line\">    [<span class=\"number\">500</span>, <span class=\"number\">130</span>, <span class=\"number\">260</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">170</span>],</div><div class=\"line\">    [<span class=\"number\">160</span>, <span class=\"number\">100</span>, <span class=\"number\">250</span>, <span class=\"number\">200</span>, <span class=\"number\">600</span>, <span class=\"number\">200</span>]</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">findMax(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(max);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-检测字符串中字母是否被“-”包围\"><a href=\"#1-检测字符串中字母是否被“-”包围\" class=\"headerlink\" title=\"1.检测字符串中字母是否被“+”包围.\"></a>1.检测字符串中字母是否被“+”包围.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testSymbols</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^[A-Za-z]*$/gi</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (reg.test(arr[<span class=\"number\">0</span>]) || reg.test(arr[len - <span class=\"number\">1</span>])) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reg.test(arr[i])) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[i - <span class=\"number\">1</span>] != <span class=\"string\">\"+\"</span> || arr[i + <span class=\"number\">1</span>] != <span class=\"string\">\"+\"</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成\"><a href=\"#2-给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成\" class=\"headerlink\" title=\"2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.\"></a>2.给定一个数组，问数组中最大的数能否用除此数字外任意个数组中的元素相加而成.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"++d+-o+u+b--a++-\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(testSymbols(str));</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMagicSum</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a - b;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> max = arr[arr.length - <span class=\"number\">1</span>];</div><div class=\"line\">    arr.pop();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1</span> &lt;&lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((i &amp; <span class=\"number\">1</span> &lt;&lt; j) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                sum += arr[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sum == max) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-小熊分苹果\"><a href=\"#3-小熊分苹果\" class=\"headerlink\" title=\"3.小熊分苹果\"></a>3.小熊分苹果</h3><p>N（1\\&lt;N\\&lt;9）只熊分一堆苹果，第一只熊（叫小东鄙视）把苹果平均分成N分，刚好多出一个，扔掉多出的那个并取走一份，后面每只熊以此类推。<br>问苹果最少多少个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apple</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, final = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp = n;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (temp &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> tmp1 = ((i * n) + <span class=\"number\">1</span>), tmp2 = (n - <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> num = tmp1 / tmp2;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (tmp1 % tmp2 != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            ++final;</div><div class=\"line\">            i = final;</div><div class=\"line\">            temp = n;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        i = num, temp--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> i * n + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(apple(<span class=\"number\">5</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"4-年终奖问题\"><a href=\"#4-年终奖问题\" class=\"headerlink\" title=\"4.年终奖问题\"></a>4.年终奖问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findMax</span>(<span class=\"params\">x, y, sum</span>) </span>&#123;</div><div class=\"line\">    sum += arr[x][y];</div><div class=\"line\">    <span class=\"keyword\">if</span> ((x == <span class=\"number\">5</span>) &amp;&amp; (y == <span class=\"number\">5</span>) &amp;&amp; (sum &gt; max)) &#123;</div><div class=\"line\">        max = sum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        findMax(x + <span class=\"number\">1</span>, y, sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &lt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        findMax(x, y + <span class=\"number\">1</span>, sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">    [<span class=\"number\">200</span>, <span class=\"number\">120</span>, <span class=\"number\">400</span>, <span class=\"number\">150</span>, <span class=\"number\">180</span>, <span class=\"number\">300</span>],</div><div class=\"line\">    [<span class=\"number\">150</span>, <span class=\"number\">250</span>, <span class=\"number\">360</span>, <span class=\"number\">120</span>, <span class=\"number\">200</span>, <span class=\"number\">130</span>],</div><div class=\"line\">    [<span class=\"number\">350</span>, <span class=\"number\">300</span>, <span class=\"number\">250</span>, <span class=\"number\">100</span>, <span class=\"number\">500</span>, <span class=\"number\">260</span>],</div><div class=\"line\">    [<span class=\"number\">100</span>, <span class=\"number\">150</span>, <span class=\"number\">260</span>, <span class=\"number\">320</span>, <span class=\"number\">100</span>, <span class=\"number\">150</span>],</div><div class=\"line\">    [<span class=\"number\">500</span>, <span class=\"number\">130</span>, <span class=\"number\">260</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">170</span>],</div><div class=\"line\">    [<span class=\"number\">160</span>, <span class=\"number\">100</span>, <span class=\"number\">250</span>, <span class=\"number\">200</span>, <span class=\"number\">600</span>, <span class=\"number\">200</span>]</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">findMax(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(max);</div></pre></td></tr></table></figure>"},{"layout":"post","title":"刷题","date":"2016-02-16T16:00:00.000Z","description":"LeetCode刷题笔记...","author":"Gemicat","_content":"\n### PermMissingElem\n\nFind the missing element in a given permutation.\n\n> PHP部分\n\n```javascript\n//时间复杂度O(n),空间复杂度O(1)\n//通过率100%\nfunction solution($A) {\n    // write your code in PHP5.5\n    sort($A);\n    $len = count($A);\n    for($i=1;$i<=$len; $i++){\n        if($A[$i-1] != $i){\n            return $i;\n        }\n    }\n    return ++$len;\n}\n```\n\n> JS部分\n\n```javascript\n// 通过率50%，为什么？\n\nfunction solution(A) {\n    // write your code in JavaScript (Node.js 0.12)\n    A.sort();\n    var len = A.length;\n    for(var i=1;i<=len;i++){\n        if(A[i-1] != i){\n            return i;\n        }\n    }\n    return ++len;\n}\n```\n\n### 1.Two Sum\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution.\n\n__Example__\n\n    Given nums = [2, 7, 11, 15], target = 9,\n\n    Because nums[0] + nums[1] = 2 + 7 = 9,\n    return [0, 1].\n\n> JavaScript\n\n```javascript\n/**\n- @param {number[]} nums\n- @param {number} target\n- @return {number[]}\n*/\nvar twoSum = function(nums, target) {\n    var length = nums.length;\n    var i, j;\n    for (i = 0; i < (length - 1); i++) {\n        for (j = (i + 1); j < length; j++) {\n            if (nums[i] + nums[j] == target) {\n                return [i, j];\n            }\n        }\n    }\n    return false;\n};\n```\n\n### 2.ZigZag Conversion\n\nThe string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n    P   A   H   N\n    A P L S I I G\n    Y   I   R\n\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\n    string convert(string text, int nRows); \n\nconvert(`\"PAYPALISHIRING\"`, 3) should return `\"PAHNAPLSIIGYIR\"`.\n\n> JavaScript\n\n```javascript\n/**\n    - @param {string} s\n    - @param {number} numRows\n    - @return {string}\n    */\nvar convert = function(s, numRows) {\n    if (s.length === 0 || numRows <= 1 || s.length <= numRows) {\n        return s;\n    }\n    var flag = 2 * (numRows - 1),\n        length = s.length,\n        ret = '',\n        rowId = 1,\n        index,\n        dist;\n\n    // 第一层字符串\n    for (var i = 0; i < length; i = i + flag) {\n        ret += s[i]\n    }\n\n    // 中间层字符串输出\n    while (rowId < numRows - 1) {\n        index = rowId;\n        //每一层的开头\n        ret = ret + s[index];\n        while (1) {\n            dist = flag - (index % (numRows - 1)) * 2;\n            index = index + dist;\n            if (index < length) {\n                ret = ret + s[index];\n            } else {\n                break;\n            }\n            dist = 2 * (numRows - 1 - (index % (numRows - 1)));\n            index = index + dist;\n            if (index < length) {\n                ret = ret + s[index];\n            } else {\n                break;\n            }\n        }\n        rowId++;\n    }\n\n    // 最底层字符串\n    for (var i = rowId; i < length; i = i + flag) {\n        ret = ret + s[i];\n    }\n    return ret;\n};\n```\n\n### 3.Reverse Integer\n\nReverse digits of an integer.\n\n    Example1: x = 123, return 321\n    Example2: x = -123, return -321\n\n> JavaScript\n\n```javascript\n/**\n    - @param {number} x\n    - @return {number}\n    */\nvar reverse = function(x) {\n    var result = 0,\n        flag = 1;\n    if (x < 0) {\n        flag = -1;\n    }\n    x = Math.abs(x);\n    x = (x.toString()).split('').reverse();\n    result = +(x.join(''));\n    if (result > 2147483647 || result < -2147483648) {\n        return 0;\n    }\n    return flag * result;\n};\n```\n","source":"_posts/2016-02-17-Qs_1-codility.md","raw":"---\nlayout: post\ntitle: 刷题\ndate: 2016-02-17\ncategories: LeetCode\ntags: [LeetCode]\ndescription: LeetCode刷题笔记...\nauthor: \"Gemicat\"\n---\n\n### PermMissingElem\n\nFind the missing element in a given permutation.\n\n> PHP部分\n\n```javascript\n//时间复杂度O(n),空间复杂度O(1)\n//通过率100%\nfunction solution($A) {\n    // write your code in PHP5.5\n    sort($A);\n    $len = count($A);\n    for($i=1;$i<=$len; $i++){\n        if($A[$i-1] != $i){\n            return $i;\n        }\n    }\n    return ++$len;\n}\n```\n\n> JS部分\n\n```javascript\n// 通过率50%，为什么？\n\nfunction solution(A) {\n    // write your code in JavaScript (Node.js 0.12)\n    A.sort();\n    var len = A.length;\n    for(var i=1;i<=len;i++){\n        if(A[i-1] != i){\n            return i;\n        }\n    }\n    return ++len;\n}\n```\n\n### 1.Two Sum\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution.\n\n__Example__\n\n    Given nums = [2, 7, 11, 15], target = 9,\n\n    Because nums[0] + nums[1] = 2 + 7 = 9,\n    return [0, 1].\n\n> JavaScript\n\n```javascript\n/**\n- @param {number[]} nums\n- @param {number} target\n- @return {number[]}\n*/\nvar twoSum = function(nums, target) {\n    var length = nums.length;\n    var i, j;\n    for (i = 0; i < (length - 1); i++) {\n        for (j = (i + 1); j < length; j++) {\n            if (nums[i] + nums[j] == target) {\n                return [i, j];\n            }\n        }\n    }\n    return false;\n};\n```\n\n### 2.ZigZag Conversion\n\nThe string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n    P   A   H   N\n    A P L S I I G\n    Y   I   R\n\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\n    string convert(string text, int nRows); \n\nconvert(`\"PAYPALISHIRING\"`, 3) should return `\"PAHNAPLSIIGYIR\"`.\n\n> JavaScript\n\n```javascript\n/**\n    - @param {string} s\n    - @param {number} numRows\n    - @return {string}\n    */\nvar convert = function(s, numRows) {\n    if (s.length === 0 || numRows <= 1 || s.length <= numRows) {\n        return s;\n    }\n    var flag = 2 * (numRows - 1),\n        length = s.length,\n        ret = '',\n        rowId = 1,\n        index,\n        dist;\n\n    // 第一层字符串\n    for (var i = 0; i < length; i = i + flag) {\n        ret += s[i]\n    }\n\n    // 中间层字符串输出\n    while (rowId < numRows - 1) {\n        index = rowId;\n        //每一层的开头\n        ret = ret + s[index];\n        while (1) {\n            dist = flag - (index % (numRows - 1)) * 2;\n            index = index + dist;\n            if (index < length) {\n                ret = ret + s[index];\n            } else {\n                break;\n            }\n            dist = 2 * (numRows - 1 - (index % (numRows - 1)));\n            index = index + dist;\n            if (index < length) {\n                ret = ret + s[index];\n            } else {\n                break;\n            }\n        }\n        rowId++;\n    }\n\n    // 最底层字符串\n    for (var i = rowId; i < length; i = i + flag) {\n        ret = ret + s[i];\n    }\n    return ret;\n};\n```\n\n### 3.Reverse Integer\n\nReverse digits of an integer.\n\n    Example1: x = 123, return 321\n    Example2: x = -123, return -321\n\n> JavaScript\n\n```javascript\n/**\n    - @param {number} x\n    - @return {number}\n    */\nvar reverse = function(x) {\n    var result = 0,\n        flag = 1;\n    if (x < 0) {\n        flag = -1;\n    }\n    x = Math.abs(x);\n    x = (x.toString()).split('').reverse();\n    result = +(x.join(''));\n    if (result > 2147483647 || result < -2147483648) {\n        return 0;\n    }\n    return flag * result;\n};\n```\n","slug":"2016-02-17-Qs_1-codility","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdh0010mo11riq01ntk","content":"<h3 id=\"PermMissingElem\"><a href=\"#PermMissingElem\" class=\"headerlink\" title=\"PermMissingElem\"></a>PermMissingElem</h3><p>Find the missing element in a given permutation.</p>\n<blockquote>\n<p>PHP部分</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//时间复杂度O(n),空间复杂度O(1)</span></div><div class=\"line\"><span class=\"comment\">//通过率100%</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">$A</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// write your code in PHP5.5</span></div><div class=\"line\">    sort($A);</div><div class=\"line\">    $len = count($A);</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">1</span>;$i&lt;=$len; $i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($A[$i<span class=\"number\">-1</span>] != $i)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ++$len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JS部分</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过率50%，为什么？</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">A</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// write your code in JavaScript (Node.js 0.12)</span></div><div class=\"line\">    A.sort();</div><div class=\"line\">    <span class=\"keyword\">var</span> len = A.length;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(A[i<span class=\"number\">-1</span>] != i)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ++len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1.Two Sum\"></a>1.Two Sum</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution.</p>\n<p><strong>Example</strong></p>\n<pre><code>Given nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n</code></pre><blockquote>\n<p>JavaScript</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">- @param &#123;number[]&#125; nums</div><div class=\"line\">- @param &#123;number&#125; target</div><div class=\"line\">- @return &#123;number[]&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = nums.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (length - <span class=\"number\">1</span>); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = (i + <span class=\"number\">1</span>); j &lt; length; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> [i, j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"2-ZigZag-Conversion\"><a href=\"#2-ZigZag-Conversion\" class=\"headerlink\" title=\"2.ZigZag Conversion\"></a>2.ZigZag Conversion</h3><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n<pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n<pre><code>string convert(string text, int nRows); \n</code></pre><p>convert(<code>&quot;PAYPALISHIRING&quot;</code>, 3) should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>\n<blockquote>\n<p>JavaScript</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    - @param &#123;string&#125; s</div><div class=\"line\">    - @param &#123;number&#125; numRows</div><div class=\"line\">    - @return &#123;string&#125;</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"keyword\">var</span> convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, numRows</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.length === <span class=\"number\">0</span> || numRows &lt;= <span class=\"number\">1</span> || s.length &lt;= numRows) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> s;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"number\">2</span> * (numRows - <span class=\"number\">1</span>),</div><div class=\"line\">        length = s.length,</div><div class=\"line\">        ret = <span class=\"string\">''</span>,</div><div class=\"line\">        rowId = <span class=\"number\">1</span>,</div><div class=\"line\">        index,</div><div class=\"line\">        dist;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第一层字符串</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i = i + flag) &#123;</div><div class=\"line\">        ret += s[i]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 中间层字符串输出</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (rowId &lt; numRows - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        index = rowId;</div><div class=\"line\">        <span class=\"comment\">//每一层的开头</span></div><div class=\"line\">        ret = ret + s[index];</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            dist = flag - (index % (numRows - <span class=\"number\">1</span>)) * <span class=\"number\">2</span>;</div><div class=\"line\">            index = index + dist;</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &lt; length) &#123;</div><div class=\"line\">                ret = ret + s[index];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dist = <span class=\"number\">2</span> * (numRows - <span class=\"number\">1</span> - (index % (numRows - <span class=\"number\">1</span>)));</div><div class=\"line\">            index = index + dist;</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &lt; length) &#123;</div><div class=\"line\">                ret = ret + s[index];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        rowId++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 最底层字符串</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = rowId; i &lt; length; i = i + flag) &#123;</div><div class=\"line\">        ret = ret + s[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Reverse-Integer\"><a href=\"#3-Reverse-Integer\" class=\"headerlink\" title=\"3.Reverse Integer\"></a>3.Reverse Integer</h3><p>Reverse digits of an integer.</p>\n<pre><code>Example1: x = 123, return 321\nExample2: x = -123, return -321\n</code></pre><blockquote>\n<p>JavaScript</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    - @param &#123;number&#125; x</div><div class=\"line\">    - @return &#123;number&#125;</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>,</div><div class=\"line\">        flag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        flag = <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    x = <span class=\"built_in\">Math</span>.abs(x);</div><div class=\"line\">    x = (x.toString()).split(<span class=\"string\">''</span>).reverse();</div><div class=\"line\">    result = +(x.join(<span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (result &gt; <span class=\"number\">2147483647</span> || result &lt; <span class=\"number\">-2147483648</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> flag * result;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"PermMissingElem\"><a href=\"#PermMissingElem\" class=\"headerlink\" title=\"PermMissingElem\"></a>PermMissingElem</h3><p>Find the missing element in a given permutation.</p>\n<blockquote>\n<p>PHP部分</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//时间复杂度O(n),空间复杂度O(1)</span></div><div class=\"line\"><span class=\"comment\">//通过率100%</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">$A</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// write your code in PHP5.5</span></div><div class=\"line\">    sort($A);</div><div class=\"line\">    $len = count($A);</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">1</span>;$i&lt;=$len; $i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($A[$i<span class=\"number\">-1</span>] != $i)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ++$len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JS部分</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过率50%，为什么？</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">A</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// write your code in JavaScript (Node.js 0.12)</span></div><div class=\"line\">    A.sort();</div><div class=\"line\">    <span class=\"keyword\">var</span> len = A.length;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(A[i<span class=\"number\">-1</span>] != i)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ++len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1.Two Sum\"></a>1.Two Sum</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution.</p>\n<p><strong>Example</strong></p>\n<pre><code>Given nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n</code></pre><blockquote>\n<p>JavaScript</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">- @param &#123;number[]&#125; nums</div><div class=\"line\">- @param &#123;number&#125; target</div><div class=\"line\">- @return &#123;number[]&#125;</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = nums.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (length - <span class=\"number\">1</span>); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = (i + <span class=\"number\">1</span>); j &lt; length; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> [i, j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"2-ZigZag-Conversion\"><a href=\"#2-ZigZag-Conversion\" class=\"headerlink\" title=\"2.ZigZag Conversion\"></a>2.ZigZag Conversion</h3><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n<pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n<pre><code>string convert(string text, int nRows); \n</code></pre><p>convert(<code>&quot;PAYPALISHIRING&quot;</code>, 3) should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>\n<blockquote>\n<p>JavaScript</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    - @param &#123;string&#125; s</div><div class=\"line\">    - @param &#123;number&#125; numRows</div><div class=\"line\">    - @return &#123;string&#125;</div><div class=\"line\">    */</span></div><div class=\"line\"><span class=\"keyword\">var</span> convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, numRows</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s.length === <span class=\"number\">0</span> || numRows &lt;= <span class=\"number\">1</span> || s.length &lt;= numRows) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> s;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"number\">2</span> * (numRows - <span class=\"number\">1</span>),</div><div class=\"line\">        length = s.length,</div><div class=\"line\">        ret = <span class=\"string\">''</span>,</div><div class=\"line\">        rowId = <span class=\"number\">1</span>,</div><div class=\"line\">        index,</div><div class=\"line\">        dist;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第一层字符串</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i = i + flag) &#123;</div><div class=\"line\">        ret += s[i]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 中间层字符串输出</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (rowId &lt; numRows - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        index = rowId;</div><div class=\"line\">        <span class=\"comment\">//每一层的开头</span></div><div class=\"line\">        ret = ret + s[index];</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            dist = flag - (index % (numRows - <span class=\"number\">1</span>)) * <span class=\"number\">2</span>;</div><div class=\"line\">            index = index + dist;</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &lt; length) &#123;</div><div class=\"line\">                ret = ret + s[index];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dist = <span class=\"number\">2</span> * (numRows - <span class=\"number\">1</span> - (index % (numRows - <span class=\"number\">1</span>)));</div><div class=\"line\">            index = index + dist;</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &lt; length) &#123;</div><div class=\"line\">                ret = ret + s[index];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        rowId++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 最底层字符串</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = rowId; i &lt; length; i = i + flag) &#123;</div><div class=\"line\">        ret = ret + s[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Reverse-Integer\"><a href=\"#3-Reverse-Integer\" class=\"headerlink\" title=\"3.Reverse Integer\"></a>3.Reverse Integer</h3><p>Reverse digits of an integer.</p>\n<pre><code>Example1: x = 123, return 321\nExample2: x = -123, return -321\n</code></pre><blockquote>\n<p>JavaScript</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    - @param &#123;number&#125; x</div><div class=\"line\">    - @return &#123;number&#125;</div><div class=\"line\">    */</span></div><div class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>,</div><div class=\"line\">        flag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        flag = <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    x = <span class=\"built_in\">Math</span>.abs(x);</div><div class=\"line\">    x = (x.toString()).split(<span class=\"string\">''</span>).reverse();</div><div class=\"line\">    result = +(x.join(<span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (result &gt; <span class=\"number\">2147483647</span> || result &lt; <span class=\"number\">-2147483648</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> flag * result;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Backbone.JS从入门到放弃","date":"2016-02-28T16:00:00.000Z","description":"backbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架...","author":"Gemicat","_content":"\n### 1.认识backbone\n\nbackbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架。\n\n通过backbone，你可以把你的数据当作Models，通过Models你可以创建数据，进行数据验证，销毁或者保存到服务器上。当界面上的操作引起model中属性的变化时，model会触发change的事件;那些用来显示model状态的views会接受到model触发change的消息，进而发出对应的响应，并且重新渲染新的数据到界面。在一个完整的backbone应用中，你不需要写那些胶水代码来从DOM中通过特殊的id来获取节点，或者手工的更新HTML页面，因为在model发生变化时，views会很简单的进行自我更新。\n\n### 2.通过helloworld来认识backbone\n\n### 3.backbone中的model实例\n\nbackbone中最基础的东西就是model，这个东西就像后端开发中数据库映射的model一样，也是数据对象模型。\n\n#### 3.1最简单的一个对象\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n</head>\n<body>\n\n</body>\n<script type=\"text/javascript\" src=\"./lib/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"./lib/underscore.js\"></script>\n<script type=\"text/javascript\" src=\"./lib/backbone.js\"></script>\n<script type=\"text/javascript\">\n    (function($){\n        \n        // 创建一个Man对象\n        Man = Backbone.Model.extend({\n            // 构造函数，默认调用alert弹出 “hi”\n            initialize : function(){\n                alert('hi');\n            }\n        });\n        // 实例化man\n        var man = new Man();\n\n    })(jQuery);\n</script>\n</html>\n```\n\n#### 3.2对象赋值的两种方法\n\n直接定义，设置默认值\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    }\n});\n// 实例化man\nvar man = new Man();\nalert(man.get('age'));\n```\n\n赋值时定义\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n    }\n});\n// 实例化man\nvar man = new Man();\nman.set({name:'李四', age:28});\nalert(man.get('age'))\n```\n\n#### 3.3对象中的方法\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    },\n    aboutMe : function(){\n        return '我叫' + this.get('name') + '，今年' + this.get('age') + '岁。';\n    }\n});\n// 实例化man\nvar man = new Man();\nalert(man.aboutMe());\n```\n\n#### 3.4监听对象中属性的变化\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n        // 在初始化时绑定监听 change:监听的对象\n        this.bind('change:name', function(){\n            var name = this.get('name');\n            alert('你改变了name属性为：' + name);\n        })\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    },\n    aboutMe : function(){\n        return '我叫' + this.get('name') + '，今年' + this.get('age') + '岁。';\n    }\n});\n// 实例化man\nvar man = new Man();\n// 设置name的值来触发change事件\nman.set({name:'gemicat'});\n```\n\n#### 3.5为对象添加验证规则，以及错误提示\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        console.log('hi');\n        // 在初始化时绑定监听 change:监听的对象\n        this.bind('change:name', function(){\n            var name = this.get('name');\n            console.log('你改变了name属性为：' + name);\n        });\n        // 绑定当遇到错误出如何处理\n        this.on('invalid', function(model, error){\n            console.log(error);\n        });\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    },\n    // 设置错误类型，当名字为空时返回以下字符串\n    validate : function(attrs){\n        if(attrs.name == ''){\n            return \"name不能为空\";\n        }\n    },\n    aboutMe : function(){\n        return '我叫' + this.get('name') + '，今年' + this.get('age') + '岁。';\n    }\n});\n// 实例化man\nvar man = new Man();\n// 设置空 name，必须要加{validate:true}来强制使用错误检测\nman.set({name:''},{validate:true});\n```\n\n### 4.backbone的collection实例\n\ncollection是model对象的一个有序的集合\n\n#### 4.1关于book和bookself的例子\n\n```javascript\nBook = Backbone.Model.extend({\n    default : {\n        title : 'default'\n    },\n    initalize : function(){\n        // init事件\n    }\n});\n\nBookShelf = Backbone.Collection.extend({\n    model : Book\n});\n\nvar book1 = new Book({title:'book1'});\nvar book2 = new Book({title:'book2'});\nvar book3 = new Book({title:'book3'});\n// 添加图书，或者使用bookShelf.add(book1);\nvar bookShelf = new BookShelf([book1, book2, book3]);\n\nbookShelf.each(function(book){\n    console.log(book.get('title'));\n})\n```\n\n#### 4.2使用fetch从服务器端获取数据\n\n```javascript\nbookShelf.fetch({\n    url :'/getbooks/', \n    success : function(collection, res){\n        collection.each(function(book){\n            console.log(book.get('title'));\n        }),\n    error : function(){\n        console.log('error');\n    }\n}})\n```\n\n#### 4.3reset方法\n\n这个方法是要喝fetch进行配合使用，collection在fetch到数据后，会调用reset方法。\n\n```javascript\nbookShelf.bind('reset', showAllBooks);\nshowAllBooks = function(){\n    bookShelf.each(function(book){\n        // 操作\n    })\n}\n```\n\n> 绑定的步骤要在fetch之前进行\n\n### 5.backbone中的router实例\n\nrouter是路由，Backbone.Router承担了一部分控制器的工作，会把链接中的#标签当作是url路径，将特定的url或者锚点规则绑定到一个指定的方法。\n\n#### 5.1一个简单的例子\n\n```javascript\nvar AppRouter = Backbone.Router.extend({\n    routes : {\n        \"\" : 'main',\n        \"topic\" : 'renderList',\n        \"topic/:id\" : 'renderDetail',\n        \"*actions\" : \"defaultRoute\"\n    },\n    main : function(){\n        console.log('应用入口方法');\n    },\n    renderList : function(){\n        console.log(\"渲染列表方法\");\n    },\n    renderDetail : function(id){\n        console.log(\"渲染详情的方法为：\" + id);\n    },\n    defaultRoute : function(actions){\n        console.log(actions);\n    }\n});\n\nvar app_router = new AppRouter;\nBackbone.history.start();\n```\n\n通过调用Backbone.history.start()来初始化这个Router。\n传参的方式有两种，一种是用 \":\" 来把#后对应位置作为参数，一种是\"*\"通配符。\n\n### 6.backbone中的view实例\n\nModel和Collection都是用于数据管理和交互，视图（View）将这些数据渲染到页面。\n\nBackbone中的视图提供了一组处理DOM和渲染模型数据的方法。\n\n视图类提供的方法就是在Backbone.View的基础上进行扩展。\n\n#### 6.1定义和创建视图\n\n```html\n<div title=\"列表\" style=\"color:red\" id=\"list\" class=\"listview\"></div>  \n<script type=\"text/javascript\">  \n    var ListView = Backbone.View.extend({  \n        el : '#list'  \n    });  \n    var listview = new ListView();  \n</script>\n```\n\nlistView中的el属性为字符串形式的dom选择器，还可以动态生成dom。\n\n```html\n<script type=\"text/javascript\">  \n    var ListView = Backbone.View.extend({  \n        tagName : 'div',  \n        className : 'listview',  \n        id : 'list',  \n        attributes : {  \n            title : '列表',  \n            style : 'color:red'  \n        },  \n        render : function() {  \n            this.el.innerHTML = 'Hello World!';  \n            document.body.appendChild(this.el);  \n        }  \n    });  \n    var listview = new ListView(); \n    //rander()方法将新标签添加到页面，不然只会保存在el中。 \n    listview.render();  \n</script> \n```\n\n#### 6.2处理DOM事件\n\n```html\n<p id=\"view\">  \n    <input type=\"button\" value=\"Create\" id=\"create\" />  \n    <input type=\"button\" value=\"Read\" id=\"read\" />  \n    <input type=\"button\" value=\"Update\" id=\"update\" />  \n    <input type=\"button\" value=\"Delete\" id=\"delete\" />  \n</p>  \n<script type=\"text/javascript\">  \n    var MyView = Backbone.View.extend({  \n        el : '#view',  \n        events : {  \n            'click #create' : 'createData',  \n            'click #read' : 'readData',  \n            'click #update' : 'updateData',  \n            'click #delete' : 'deleteData'  \n        },  \n        createData : function() {  \n            // todo  \n        },  \n        readData : function() {  \n            // todo  \n        },  \n        updateData : function() {  \n            // todo  \n        },  \n        deleteData : function() {  \n            // todo  \n        }  \n    });  \n    var view = new MyView();  \n</script> \n```\n\n#### 6.3View中的模板","source":"_posts/2016-02-29-backbone_1-javascript.md","raw":"---\nlayout: post\ntitle: Backbone.JS从入门到放弃\ndate: 2016-02-29\ncategories: javascript\ntags: [javascript]\ndescription: backbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架...\nauthor: \"Gemicat\"\n---\n\n### 1.认识backbone\n\nbackbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架。\n\n通过backbone，你可以把你的数据当作Models，通过Models你可以创建数据，进行数据验证，销毁或者保存到服务器上。当界面上的操作引起model中属性的变化时，model会触发change的事件;那些用来显示model状态的views会接受到model触发change的消息，进而发出对应的响应，并且重新渲染新的数据到界面。在一个完整的backbone应用中，你不需要写那些胶水代码来从DOM中通过特殊的id来获取节点，或者手工的更新HTML页面，因为在model发生变化时，views会很简单的进行自我更新。\n\n### 2.通过helloworld来认识backbone\n\n### 3.backbone中的model实例\n\nbackbone中最基础的东西就是model，这个东西就像后端开发中数据库映射的model一样，也是数据对象模型。\n\n#### 3.1最简单的一个对象\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n</head>\n<body>\n\n</body>\n<script type=\"text/javascript\" src=\"./lib/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"./lib/underscore.js\"></script>\n<script type=\"text/javascript\" src=\"./lib/backbone.js\"></script>\n<script type=\"text/javascript\">\n    (function($){\n        \n        // 创建一个Man对象\n        Man = Backbone.Model.extend({\n            // 构造函数，默认调用alert弹出 “hi”\n            initialize : function(){\n                alert('hi');\n            }\n        });\n        // 实例化man\n        var man = new Man();\n\n    })(jQuery);\n</script>\n</html>\n```\n\n#### 3.2对象赋值的两种方法\n\n直接定义，设置默认值\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    }\n});\n// 实例化man\nvar man = new Man();\nalert(man.get('age'));\n```\n\n赋值时定义\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n    }\n});\n// 实例化man\nvar man = new Man();\nman.set({name:'李四', age:28});\nalert(man.get('age'))\n```\n\n#### 3.3对象中的方法\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    },\n    aboutMe : function(){\n        return '我叫' + this.get('name') + '，今年' + this.get('age') + '岁。';\n    }\n});\n// 实例化man\nvar man = new Man();\nalert(man.aboutMe());\n```\n\n#### 3.4监听对象中属性的变化\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        alert('hi');\n        // 在初始化时绑定监听 change:监听的对象\n        this.bind('change:name', function(){\n            var name = this.get('name');\n            alert('你改变了name属性为：' + name);\n        })\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    },\n    aboutMe : function(){\n        return '我叫' + this.get('name') + '，今年' + this.get('age') + '岁。';\n    }\n});\n// 实例化man\nvar man = new Man();\n// 设置name的值来触发change事件\nman.set({name:'gemicat'});\n```\n\n#### 3.5为对象添加验证规则，以及错误提示\n\n```javascript\n// 创建一个Man对象\nMan = Backbone.Model.extend({\n    // 构造函数，默认调用alert弹出 “hi”\n    initialize : function(){\n        console.log('hi');\n        // 在初始化时绑定监听 change:监听的对象\n        this.bind('change:name', function(){\n            var name = this.get('name');\n            console.log('你改变了name属性为：' + name);\n        });\n        // 绑定当遇到错误出如何处理\n        this.on('invalid', function(model, error){\n            console.log(error);\n        });\n    },\n    defaults : {\n        name : '张三',\n        age : 38\n    },\n    // 设置错误类型，当名字为空时返回以下字符串\n    validate : function(attrs){\n        if(attrs.name == ''){\n            return \"name不能为空\";\n        }\n    },\n    aboutMe : function(){\n        return '我叫' + this.get('name') + '，今年' + this.get('age') + '岁。';\n    }\n});\n// 实例化man\nvar man = new Man();\n// 设置空 name，必须要加{validate:true}来强制使用错误检测\nman.set({name:''},{validate:true});\n```\n\n### 4.backbone的collection实例\n\ncollection是model对象的一个有序的集合\n\n#### 4.1关于book和bookself的例子\n\n```javascript\nBook = Backbone.Model.extend({\n    default : {\n        title : 'default'\n    },\n    initalize : function(){\n        // init事件\n    }\n});\n\nBookShelf = Backbone.Collection.extend({\n    model : Book\n});\n\nvar book1 = new Book({title:'book1'});\nvar book2 = new Book({title:'book2'});\nvar book3 = new Book({title:'book3'});\n// 添加图书，或者使用bookShelf.add(book1);\nvar bookShelf = new BookShelf([book1, book2, book3]);\n\nbookShelf.each(function(book){\n    console.log(book.get('title'));\n})\n```\n\n#### 4.2使用fetch从服务器端获取数据\n\n```javascript\nbookShelf.fetch({\n    url :'/getbooks/', \n    success : function(collection, res){\n        collection.each(function(book){\n            console.log(book.get('title'));\n        }),\n    error : function(){\n        console.log('error');\n    }\n}})\n```\n\n#### 4.3reset方法\n\n这个方法是要喝fetch进行配合使用，collection在fetch到数据后，会调用reset方法。\n\n```javascript\nbookShelf.bind('reset', showAllBooks);\nshowAllBooks = function(){\n    bookShelf.each(function(book){\n        // 操作\n    })\n}\n```\n\n> 绑定的步骤要在fetch之前进行\n\n### 5.backbone中的router实例\n\nrouter是路由，Backbone.Router承担了一部分控制器的工作，会把链接中的#标签当作是url路径，将特定的url或者锚点规则绑定到一个指定的方法。\n\n#### 5.1一个简单的例子\n\n```javascript\nvar AppRouter = Backbone.Router.extend({\n    routes : {\n        \"\" : 'main',\n        \"topic\" : 'renderList',\n        \"topic/:id\" : 'renderDetail',\n        \"*actions\" : \"defaultRoute\"\n    },\n    main : function(){\n        console.log('应用入口方法');\n    },\n    renderList : function(){\n        console.log(\"渲染列表方法\");\n    },\n    renderDetail : function(id){\n        console.log(\"渲染详情的方法为：\" + id);\n    },\n    defaultRoute : function(actions){\n        console.log(actions);\n    }\n});\n\nvar app_router = new AppRouter;\nBackbone.history.start();\n```\n\n通过调用Backbone.history.start()来初始化这个Router。\n传参的方式有两种，一种是用 \":\" 来把#后对应位置作为参数，一种是\"*\"通配符。\n\n### 6.backbone中的view实例\n\nModel和Collection都是用于数据管理和交互，视图（View）将这些数据渲染到页面。\n\nBackbone中的视图提供了一组处理DOM和渲染模型数据的方法。\n\n视图类提供的方法就是在Backbone.View的基础上进行扩展。\n\n#### 6.1定义和创建视图\n\n```html\n<div title=\"列表\" style=\"color:red\" id=\"list\" class=\"listview\"></div>  \n<script type=\"text/javascript\">  \n    var ListView = Backbone.View.extend({  \n        el : '#list'  \n    });  \n    var listview = new ListView();  \n</script>\n```\n\nlistView中的el属性为字符串形式的dom选择器，还可以动态生成dom。\n\n```html\n<script type=\"text/javascript\">  \n    var ListView = Backbone.View.extend({  \n        tagName : 'div',  \n        className : 'listview',  \n        id : 'list',  \n        attributes : {  \n            title : '列表',  \n            style : 'color:red'  \n        },  \n        render : function() {  \n            this.el.innerHTML = 'Hello World!';  \n            document.body.appendChild(this.el);  \n        }  \n    });  \n    var listview = new ListView(); \n    //rander()方法将新标签添加到页面，不然只会保存在el中。 \n    listview.render();  \n</script> \n```\n\n#### 6.2处理DOM事件\n\n```html\n<p id=\"view\">  \n    <input type=\"button\" value=\"Create\" id=\"create\" />  \n    <input type=\"button\" value=\"Read\" id=\"read\" />  \n    <input type=\"button\" value=\"Update\" id=\"update\" />  \n    <input type=\"button\" value=\"Delete\" id=\"delete\" />  \n</p>  \n<script type=\"text/javascript\">  \n    var MyView = Backbone.View.extend({  \n        el : '#view',  \n        events : {  \n            'click #create' : 'createData',  \n            'click #read' : 'readData',  \n            'click #update' : 'updateData',  \n            'click #delete' : 'deleteData'  \n        },  \n        createData : function() {  \n            // todo  \n        },  \n        readData : function() {  \n            // todo  \n        },  \n        updateData : function() {  \n            // todo  \n        },  \n        deleteData : function() {  \n            // todo  \n        }  \n    });  \n    var view = new MyView();  \n</script> \n```\n\n#### 6.3View中的模板","slug":"2016-02-29-backbone_1-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdk0015mo11b6dbiitj","content":"<h3 id=\"1-认识backbone\"><a href=\"#1-认识backbone\" class=\"headerlink\" title=\"1.认识backbone\"></a>1.认识backbone</h3><p>backbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架。</p>\n<p>通过backbone，你可以把你的数据当作Models，通过Models你可以创建数据，进行数据验证，销毁或者保存到服务器上。当界面上的操作引起model中属性的变化时，model会触发change的事件;那些用来显示model状态的views会接受到model触发change的消息，进而发出对应的响应，并且重新渲染新的数据到界面。在一个完整的backbone应用中，你不需要写那些胶水代码来从DOM中通过特殊的id来获取节点，或者手工的更新HTML页面，因为在model发生变化时，views会很简单的进行自我更新。</p>\n<h3 id=\"2-通过helloworld来认识backbone\"><a href=\"#2-通过helloworld来认识backbone\" class=\"headerlink\" title=\"2.通过helloworld来认识backbone\"></a>2.通过helloworld来认识backbone</h3><h3 id=\"3-backbone中的model实例\"><a href=\"#3-backbone中的model实例\" class=\"headerlink\" title=\"3.backbone中的model实例\"></a>3.backbone中的model实例</h3><p>backbone中最基础的东西就是model，这个东西就像后端开发中数据库映射的model一样，也是数据对象模型。</p>\n<h4 id=\"3-1最简单的一个对象\"><a href=\"#3-1最简单的一个对象\" class=\"headerlink\" title=\"3.1最简单的一个对象\"></a>3.1最简单的一个对象</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./lib/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./lib/underscore.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./lib/backbone.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">        Man = Backbone.Model.extend(&#123;</div><div class=\"line\">            <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">            initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// 实例化man</span></div><div class=\"line\">        <span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"></div><div class=\"line\">    &#125;)(jQuery);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-2对象赋值的两种方法\"><a href=\"#3-2对象赋值的两种方法\" class=\"headerlink\" title=\"3.2对象赋值的两种方法\"></a>3.2对象赋值的两种方法</h4><p>直接定义，设置默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\">alert(man.get(<span class=\"string\">'age'</span>));</div></pre></td></tr></table></figure>\n<p>赋值时定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\">man.set(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;);</div><div class=\"line\">alert(man.get(<span class=\"string\">'age'</span>))</div></pre></td></tr></table></figure>\n<h4 id=\"3-3对象中的方法\"><a href=\"#3-3对象中的方法\" class=\"headerlink\" title=\"3.3对象中的方法\"></a>3.3对象中的方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">aboutMe</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>) + <span class=\"string\">'，今年'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'age'</span>) + <span class=\"string\">'岁。'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\">alert(man.aboutMe());</div></pre></td></tr></table></figure>\n<h4 id=\"3-4监听对象中属性的变化\"><a href=\"#3-4监听对象中属性的变化\" class=\"headerlink\" title=\"3.4监听对象中属性的变化\"></a>3.4监听对象中属性的变化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">        <span class=\"comment\">// 在初始化时绑定监听 change:监听的对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.bind(<span class=\"string\">'change:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>);</div><div class=\"line\">            alert(<span class=\"string\">'你改变了name属性为：'</span> + name);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">aboutMe</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>) + <span class=\"string\">'，今年'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'age'</span>) + <span class=\"string\">'岁。'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">// 设置name的值来触发change事件</span></div><div class=\"line\">man.set(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'gemicat'</span>&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"3-5为对象添加验证规则，以及错误提示\"><a href=\"#3-5为对象添加验证规则，以及错误提示\" class=\"headerlink\" title=\"3.5为对象添加验证规则，以及错误提示\"></a>3.5为对象添加验证规则，以及错误提示</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</div><div class=\"line\">        <span class=\"comment\">// 在初始化时绑定监听 change:监听的对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.bind(<span class=\"string\">'change:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'你改变了name属性为：'</span> + name);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// 绑定当遇到错误出如何处理</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.on(<span class=\"string\">'invalid'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">model, error</span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 设置错误类型，当名字为空时返回以下字符串</span></div><div class=\"line\">    validate : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(attrs.name == <span class=\"string\">''</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"name不能为空\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">aboutMe</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>) + <span class=\"string\">'，今年'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'age'</span>) + <span class=\"string\">'岁。'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">// 设置空 name，必须要加&#123;validate:true&#125;来强制使用错误检测</span></div><div class=\"line\">man.set(&#123;<span class=\"attr\">name</span>:<span class=\"string\">''</span>&#125;,&#123;<span class=\"attr\">validate</span>:<span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"4-backbone的collection实例\"><a href=\"#4-backbone的collection实例\" class=\"headerlink\" title=\"4.backbone的collection实例\"></a>4.backbone的collection实例</h3><p>collection是model对象的一个有序的集合</p>\n<h4 id=\"4-1关于book和bookself的例子\"><a href=\"#4-1关于book和bookself的例子\" class=\"headerlink\" title=\"4.1关于book和bookself的例子\"></a>4.1关于book和bookself的例子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Book = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">default</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">title</span> : <span class=\"string\">'default'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">initalize</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// init事件</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">BookShelf = Backbone.Collection.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">model</span> : Book</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> book1 = <span class=\"keyword\">new</span> Book(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'book1'</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> book2 = <span class=\"keyword\">new</span> Book(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'book2'</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> book3 = <span class=\"keyword\">new</span> Book(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'book3'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 添加图书，或者使用bookShelf.add(book1);</span></div><div class=\"line\"><span class=\"keyword\">var</span> bookShelf = <span class=\"keyword\">new</span> BookShelf([book1, book2, book3]);</div><div class=\"line\"></div><div class=\"line\">bookShelf.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(book.get(<span class=\"string\">'title'</span>));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"4-2使用fetch从服务器端获取数据\"><a href=\"#4-2使用fetch从服务器端获取数据\" class=\"headerlink\" title=\"4.2使用fetch从服务器端获取数据\"></a>4.2使用fetch从服务器端获取数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bookShelf.fetch(&#123;</div><div class=\"line\">    <span class=\"attr\">url</span> :<span class=\"string\">'/getbooks/'</span>, </div><div class=\"line\">    <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">collection, res</span>)</span>&#123;</div><div class=\"line\">        collection.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(book.get(<span class=\"string\">'title'</span>));</div><div class=\"line\">        &#125;),</div><div class=\"line\">    <span class=\"attr\">error</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"4-3reset方法\"><a href=\"#4-3reset方法\" class=\"headerlink\" title=\"4.3reset方法\"></a>4.3reset方法</h4><p>这个方法是要喝fetch进行配合使用，collection在fetch到数据后，会调用reset方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bookShelf.bind(<span class=\"string\">'reset'</span>, showAllBooks);</div><div class=\"line\">showAllBooks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    bookShelf.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 操作</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>绑定的步骤要在fetch之前进行</p>\n</blockquote>\n<h3 id=\"5-backbone中的router实例\"><a href=\"#5-backbone中的router实例\" class=\"headerlink\" title=\"5.backbone中的router实例\"></a>5.backbone中的router实例</h3><p>router是路由，Backbone.Router承担了一部分控制器的工作，会把链接中的#标签当作是url路径，将特定的url或者锚点规则绑定到一个指定的方法。</p>\n<h4 id=\"5-1一个简单的例子\"><a href=\"#5-1一个简单的例子\" class=\"headerlink\" title=\"5.1一个简单的例子\"></a>5.1一个简单的例子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> AppRouter = Backbone.Router.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">routes</span> : &#123;</div><div class=\"line\">        <span class=\"string\">\"\"</span> : <span class=\"string\">'main'</span>,</div><div class=\"line\">        <span class=\"string\">\"topic\"</span> : <span class=\"string\">'renderList'</span>,</div><div class=\"line\">        <span class=\"string\">\"topic/:id\"</span> : <span class=\"string\">'renderDetail'</span>,</div><div class=\"line\">        <span class=\"string\">\"*actions\"</span> : <span class=\"string\">\"defaultRoute\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">main</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'应用入口方法'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renderList</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"渲染列表方法\"</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renderDetail</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"渲染详情的方法为：\"</span> + id);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaultRoute</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">actions</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(actions);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app_router = <span class=\"keyword\">new</span> AppRouter;</div><div class=\"line\">Backbone.history.start();</div></pre></td></tr></table></figure>\n<p>通过调用Backbone.history.start()来初始化这个Router。<br>传参的方式有两种，一种是用 “:” 来把#后对应位置作为参数，一种是”*”通配符。</p>\n<h3 id=\"6-backbone中的view实例\"><a href=\"#6-backbone中的view实例\" class=\"headerlink\" title=\"6.backbone中的view实例\"></a>6.backbone中的view实例</h3><p>Model和Collection都是用于数据管理和交互，视图（View）将这些数据渲染到页面。</p>\n<p>Backbone中的视图提供了一组处理DOM和渲染模型数据的方法。</p>\n<p>视图类提供的方法就是在Backbone.View的基础上进行扩展。</p>\n<h4 id=\"6-1定义和创建视图\"><a href=\"#6-1定义和创建视图\" class=\"headerlink\" title=\"6.1定义和创建视图\"></a>6.1定义和创建视图</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">title</span>=<span class=\"string\">\"列表\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listview\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> ListView = Backbone.View.extend(&#123;  </div><div class=\"line\">        <span class=\"attr\">el</span> : <span class=\"string\">'#list'</span>  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> listview = <span class=\"keyword\">new</span> ListView();  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>listView中的el属性为字符串形式的dom选择器，还可以动态生成dom。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> ListView = Backbone.View.extend(&#123;  </div><div class=\"line\">        <span class=\"attr\">tagName</span> : <span class=\"string\">'div'</span>,  </div><div class=\"line\">        <span class=\"attr\">className</span> : <span class=\"string\">'listview'</span>,  </div><div class=\"line\">        <span class=\"attr\">id</span> : <span class=\"string\">'list'</span>,  </div><div class=\"line\">        <span class=\"attr\">attributes</span> : &#123;  </div><div class=\"line\">            <span class=\"attr\">title</span> : <span class=\"string\">'列表'</span>,  </div><div class=\"line\">            <span class=\"attr\">style</span> : <span class=\"string\">'color:red'</span>  </div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">render</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.el.innerHTML = <span class=\"string\">'Hello World!'</span>;  </div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.el);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> listview = <span class=\"keyword\">new</span> ListView(); </div><div class=\"line\">    <span class=\"comment\">//rander()方法将新标签添加到页面，不然只会保存在el中。 </span></div><div class=\"line\">    listview.render();  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-2处理DOM事件\"><a href=\"#6-2处理DOM事件\" class=\"headerlink\" title=\"6.2处理DOM事件\"></a>6.2处理DOM事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"view\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Create\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"create\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Read\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"read\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Update\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Delete\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> /&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </span></div><div class=\"line\">    <span class=\"keyword\">var</span> MyView = Backbone.View.extend(&#123;  </div><div class=\"line\">        <span class=\"attr\">el</span> : <span class=\"string\">'#view'</span>,  </div><div class=\"line\">        <span class=\"attr\">events</span> : &#123;  </div><div class=\"line\">            <span class=\"string\">'click #create'</span> : <span class=\"string\">'createData'</span>,  </div><div class=\"line\">            <span class=\"string\">'click #read'</span> : <span class=\"string\">'readData'</span>,  </div><div class=\"line\">            <span class=\"string\">'click #update'</span> : <span class=\"string\">'updateData'</span>,  </div><div class=\"line\">            <span class=\"string\">'click #delete'</span> : <span class=\"string\">'deleteData'</span>  </div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">createData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">readData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">updateData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">deleteData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> view = <span class=\"keyword\">new</span> MyView();  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-3View中的模板\"><a href=\"#6-3View中的模板\" class=\"headerlink\" title=\"6.3View中的模板\"></a>6.3View中的模板</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-认识backbone\"><a href=\"#1-认识backbone\" class=\"headerlink\" title=\"1.认识backbone\"></a>1.认识backbone</h3><p>backbone.js提供了一套web开发的框架，通过Models进行key-value绑定及custom事件处理，通过Collections提供一套丰富的API用于枚举功能通过Views来进行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery和underscore的一个js框架。</p>\n<p>通过backbone，你可以把你的数据当作Models，通过Models你可以创建数据，进行数据验证，销毁或者保存到服务器上。当界面上的操作引起model中属性的变化时，model会触发change的事件;那些用来显示model状态的views会接受到model触发change的消息，进而发出对应的响应，并且重新渲染新的数据到界面。在一个完整的backbone应用中，你不需要写那些胶水代码来从DOM中通过特殊的id来获取节点，或者手工的更新HTML页面，因为在model发生变化时，views会很简单的进行自我更新。</p>\n<h3 id=\"2-通过helloworld来认识backbone\"><a href=\"#2-通过helloworld来认识backbone\" class=\"headerlink\" title=\"2.通过helloworld来认识backbone\"></a>2.通过helloworld来认识backbone</h3><h3 id=\"3-backbone中的model实例\"><a href=\"#3-backbone中的model实例\" class=\"headerlink\" title=\"3.backbone中的model实例\"></a>3.backbone中的model实例</h3><p>backbone中最基础的东西就是model，这个东西就像后端开发中数据库映射的model一样，也是数据对象模型。</p>\n<h4 id=\"3-1最简单的一个对象\"><a href=\"#3-1最简单的一个对象\" class=\"headerlink\" title=\"3.1最简单的一个对象\"></a>3.1最简单的一个对象</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./lib/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./lib/underscore.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./lib/backbone.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">        Man = Backbone.Model.extend(&#123;</div><div class=\"line\">            <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">            initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// 实例化man</span></div><div class=\"line\">        <span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"></div><div class=\"line\">    &#125;)(jQuery);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-2对象赋值的两种方法\"><a href=\"#3-2对象赋值的两种方法\" class=\"headerlink\" title=\"3.2对象赋值的两种方法\"></a>3.2对象赋值的两种方法</h4><p>直接定义，设置默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\">alert(man.get(<span class=\"string\">'age'</span>));</div></pre></td></tr></table></figure>\n<p>赋值时定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\">man.set(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;);</div><div class=\"line\">alert(man.get(<span class=\"string\">'age'</span>))</div></pre></td></tr></table></figure>\n<h4 id=\"3-3对象中的方法\"><a href=\"#3-3对象中的方法\" class=\"headerlink\" title=\"3.3对象中的方法\"></a>3.3对象中的方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">aboutMe</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>) + <span class=\"string\">'，今年'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'age'</span>) + <span class=\"string\">'岁。'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\">alert(man.aboutMe());</div></pre></td></tr></table></figure>\n<h4 id=\"3-4监听对象中属性的变化\"><a href=\"#3-4监听对象中属性的变化\" class=\"headerlink\" title=\"3.4监听对象中属性的变化\"></a>3.4监听对象中属性的变化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hi'</span>);</div><div class=\"line\">        <span class=\"comment\">// 在初始化时绑定监听 change:监听的对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.bind(<span class=\"string\">'change:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>);</div><div class=\"line\">            alert(<span class=\"string\">'你改变了name属性为：'</span> + name);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">aboutMe</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>) + <span class=\"string\">'，今年'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'age'</span>) + <span class=\"string\">'岁。'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">// 设置name的值来触发change事件</span></div><div class=\"line\">man.set(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'gemicat'</span>&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"3-5为对象添加验证规则，以及错误提示\"><a href=\"#3-5为对象添加验证规则，以及错误提示\" class=\"headerlink\" title=\"3.5为对象添加验证规则，以及错误提示\"></a>3.5为对象添加验证规则，以及错误提示</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个Man对象</span></div><div class=\"line\">Man = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"comment\">// 构造函数，默认调用alert弹出 “hi”</span></div><div class=\"line\">    initialize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</div><div class=\"line\">        <span class=\"comment\">// 在初始化时绑定监听 change:监听的对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.bind(<span class=\"string\">'change:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'你改变了name属性为：'</span> + name);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// 绑定当遇到错误出如何处理</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.on(<span class=\"string\">'invalid'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">model, error</span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaults</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> : <span class=\"string\">'张三'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span> : <span class=\"number\">38</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 设置错误类型，当名字为空时返回以下字符串</span></div><div class=\"line\">    validate : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(attrs.name == <span class=\"string\">''</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"name不能为空\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">aboutMe</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'name'</span>) + <span class=\"string\">'，今年'</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">'age'</span>) + <span class=\"string\">'岁。'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化man</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">// 设置空 name，必须要加&#123;validate:true&#125;来强制使用错误检测</span></div><div class=\"line\">man.set(&#123;<span class=\"attr\">name</span>:<span class=\"string\">''</span>&#125;,&#123;<span class=\"attr\">validate</span>:<span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"4-backbone的collection实例\"><a href=\"#4-backbone的collection实例\" class=\"headerlink\" title=\"4.backbone的collection实例\"></a>4.backbone的collection实例</h3><p>collection是model对象的一个有序的集合</p>\n<h4 id=\"4-1关于book和bookself的例子\"><a href=\"#4-1关于book和bookself的例子\" class=\"headerlink\" title=\"4.1关于book和bookself的例子\"></a>4.1关于book和bookself的例子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Book = Backbone.Model.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">default</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">title</span> : <span class=\"string\">'default'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">initalize</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// init事件</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">BookShelf = Backbone.Collection.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">model</span> : Book</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> book1 = <span class=\"keyword\">new</span> Book(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'book1'</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> book2 = <span class=\"keyword\">new</span> Book(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'book2'</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> book3 = <span class=\"keyword\">new</span> Book(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'book3'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 添加图书，或者使用bookShelf.add(book1);</span></div><div class=\"line\"><span class=\"keyword\">var</span> bookShelf = <span class=\"keyword\">new</span> BookShelf([book1, book2, book3]);</div><div class=\"line\"></div><div class=\"line\">bookShelf.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(book.get(<span class=\"string\">'title'</span>));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"4-2使用fetch从服务器端获取数据\"><a href=\"#4-2使用fetch从服务器端获取数据\" class=\"headerlink\" title=\"4.2使用fetch从服务器端获取数据\"></a>4.2使用fetch从服务器端获取数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bookShelf.fetch(&#123;</div><div class=\"line\">    <span class=\"attr\">url</span> :<span class=\"string\">'/getbooks/'</span>, </div><div class=\"line\">    <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">collection, res</span>)</span>&#123;</div><div class=\"line\">        collection.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(book.get(<span class=\"string\">'title'</span>));</div><div class=\"line\">        &#125;),</div><div class=\"line\">    <span class=\"attr\">error</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"4-3reset方法\"><a href=\"#4-3reset方法\" class=\"headerlink\" title=\"4.3reset方法\"></a>4.3reset方法</h4><p>这个方法是要喝fetch进行配合使用，collection在fetch到数据后，会调用reset方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bookShelf.bind(<span class=\"string\">'reset'</span>, showAllBooks);</div><div class=\"line\">showAllBooks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    bookShelf.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 操作</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>绑定的步骤要在fetch之前进行</p>\n</blockquote>\n<h3 id=\"5-backbone中的router实例\"><a href=\"#5-backbone中的router实例\" class=\"headerlink\" title=\"5.backbone中的router实例\"></a>5.backbone中的router实例</h3><p>router是路由，Backbone.Router承担了一部分控制器的工作，会把链接中的#标签当作是url路径，将特定的url或者锚点规则绑定到一个指定的方法。</p>\n<h4 id=\"5-1一个简单的例子\"><a href=\"#5-1一个简单的例子\" class=\"headerlink\" title=\"5.1一个简单的例子\"></a>5.1一个简单的例子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> AppRouter = Backbone.Router.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">routes</span> : &#123;</div><div class=\"line\">        <span class=\"string\">\"\"</span> : <span class=\"string\">'main'</span>,</div><div class=\"line\">        <span class=\"string\">\"topic\"</span> : <span class=\"string\">'renderList'</span>,</div><div class=\"line\">        <span class=\"string\">\"topic/:id\"</span> : <span class=\"string\">'renderDetail'</span>,</div><div class=\"line\">        <span class=\"string\">\"*actions\"</span> : <span class=\"string\">\"defaultRoute\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">main</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'应用入口方法'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renderList</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"渲染列表方法\"</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renderDetail</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"渲染详情的方法为：\"</span> + id);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">defaultRoute</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">actions</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(actions);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app_router = <span class=\"keyword\">new</span> AppRouter;</div><div class=\"line\">Backbone.history.start();</div></pre></td></tr></table></figure>\n<p>通过调用Backbone.history.start()来初始化这个Router。<br>传参的方式有两种，一种是用 “:” 来把#后对应位置作为参数，一种是”*”通配符。</p>\n<h3 id=\"6-backbone中的view实例\"><a href=\"#6-backbone中的view实例\" class=\"headerlink\" title=\"6.backbone中的view实例\"></a>6.backbone中的view实例</h3><p>Model和Collection都是用于数据管理和交互，视图（View）将这些数据渲染到页面。</p>\n<p>Backbone中的视图提供了一组处理DOM和渲染模型数据的方法。</p>\n<p>视图类提供的方法就是在Backbone.View的基础上进行扩展。</p>\n<h4 id=\"6-1定义和创建视图\"><a href=\"#6-1定义和创建视图\" class=\"headerlink\" title=\"6.1定义和创建视图\"></a>6.1定义和创建视图</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">title</span>=<span class=\"string\">\"列表\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listview\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> ListView = Backbone.View.extend(&#123;  </div><div class=\"line\">        <span class=\"attr\">el</span> : <span class=\"string\">'#list'</span>  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> listview = <span class=\"keyword\">new</span> ListView();  </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>listView中的el属性为字符串形式的dom选择器，还可以动态生成dom。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> ListView = Backbone.View.extend(&#123;  </div><div class=\"line\">        <span class=\"attr\">tagName</span> : <span class=\"string\">'div'</span>,  </div><div class=\"line\">        <span class=\"attr\">className</span> : <span class=\"string\">'listview'</span>,  </div><div class=\"line\">        <span class=\"attr\">id</span> : <span class=\"string\">'list'</span>,  </div><div class=\"line\">        <span class=\"attr\">attributes</span> : &#123;  </div><div class=\"line\">            <span class=\"attr\">title</span> : <span class=\"string\">'列表'</span>,  </div><div class=\"line\">            <span class=\"attr\">style</span> : <span class=\"string\">'color:red'</span>  </div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">render</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.el.innerHTML = <span class=\"string\">'Hello World!'</span>;  </div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.el);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> listview = <span class=\"keyword\">new</span> ListView(); </div><div class=\"line\">    <span class=\"comment\">//rander()方法将新标签添加到页面，不然只会保存在el中。 </span></div><div class=\"line\">    listview.render();  </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-2处理DOM事件\"><a href=\"#6-2处理DOM事件\" class=\"headerlink\" title=\"6.2处理DOM事件\"></a>6.2处理DOM事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"view\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Create\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"create\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Read\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"read\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Update\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Delete\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> /&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> MyView = Backbone.View.extend(&#123;  </div><div class=\"line\">        <span class=\"attr\">el</span> : <span class=\"string\">'#view'</span>,  </div><div class=\"line\">        <span class=\"attr\">events</span> : &#123;  </div><div class=\"line\">            <span class=\"string\">'click #create'</span> : <span class=\"string\">'createData'</span>,  </div><div class=\"line\">            <span class=\"string\">'click #read'</span> : <span class=\"string\">'readData'</span>,  </div><div class=\"line\">            <span class=\"string\">'click #update'</span> : <span class=\"string\">'updateData'</span>,  </div><div class=\"line\">            <span class=\"string\">'click #delete'</span> : <span class=\"string\">'deleteData'</span>  </div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">createData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">readData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">updateData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;,  </div><div class=\"line\">        <span class=\"attr\">deleteData</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// todo  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> view = <span class=\"keyword\">new</span> MyView();  </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-3View中的模板\"><a href=\"#6-3View中的模板\" class=\"headerlink\" title=\"6.3View中的模板\"></a>6.3View中的模板</h4>"},{"layout":"post","title":"《JavaScript模式》阅读笔记","date":"2016-04-25T16:00:00.000Z","description":"JavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法...","author":"Gemicat","_content":"\n### JavaScript：基本概念\n\n#### 面向对象\n\nJavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法。\n\n对象主要有两种类型：\n\n1.原生的（Native）：在ECMAScript标准中有详细描述——内置对象和用户自定义对象。\n\n2.主机的（Host）：在主机环境中定义的（例如浏览器环境）——windows对象和所有的DOM对象。\n\n### 函数\n\n#### 背景\n\nJavaScript中的函数有两个主要特点使其显得比较特殊。第一个特点在于函数是第一类对象，第二个特点是它们可以提供作用域。\n\n1. 函数可以在运行时动态创建，还可以在程序执行过程中创建。\n2. 函数可以分配给变量，可以将他们的引用复制到其他变量，可以被扩展，此外，除少数特殊情况外，函数可以被删除。\n3. 可以作为参数传递给其他函数，并且还可以由其他函数返回。\n4. 函数可以有自己的属性和方法。\n\n#### 回调模式\n\n函数都是对象，这表示它们可以作为参数传递给其他函数。当将函数introduceBugs()作为参数传递给函数writeCode()时，那么在某一时刻writeCode()可能会执行（或者调用）introduceBugs()。在这种情况下，introduceBugs()就被称之为回调函数。\n\n```javascript\nfunction writeCode(callback) {\n    //执行一些任务\n    callback();\n    //.............\n}\n\nfunction introduceBugs() {\n    //....引入漏洞\n}\n\nwriteCode(introduceBugs);\n```\n\n> 注意writeCode()传递的introduceBugs，是不带括号的。带括号表示传递执行函数，不带括号表示传递引用。\n\n#### 回调与作用域\n\n回调并不是一次性的匿名函数或全局函数，而是对象的方法。如果该回调方法使用this来引用它所属的对象，这可能会导致意想不到的意外发生。\n\n假设回调函数是paint()，它是一个名为myapp的对象的方法:\n\n```javascript\nvar myapp = {};\nmyapp.color = \"green\";\nmyapp.paint = function(node) {\n    node.style.color = this.color;\n}\n```\n    \n函数findNodes()执行以下语句：\n\n```javascript\nvar findNodes = function(callback) {\n    //...\n    if (typeof callback == \"function\") {\n        callback(found);\n    }\n    //...\n}\n```\n\n如果调用findNodes(myapp.paint)，它并不会按照预期那样执行，这是由于this.color没有定义。由于findNodes()是一个全局函数，因此，对象this引用了全局对象。\n\n对于这个问题的解决方案就是传递回调函数的同事传递改回调函数所属的对象：\n```javascript\nfindNodes(myapp.paint, myapp);\n```\n    \n然后，还需要修改findNodes()以绑定所传入的对象：\n\n```javascript\nvar findNodes = function(callback, callback_obj) {\n    //...\n    if (typeof callback == \"function\") {\n        callback.call(callback_obj, found);\n    }\n    //...\n}\n```\n\n#### 异步事件监听器\n\n回调模式有很多用途，比如，当附加一个事件监听器到页面上的一个元素时，实际上提供了一个回调函数指针，该函数将会在事件发生时被调用。\n\n    document.addEventListener(\"click\", console.log, false);\n\nJavaScript特别适合用于事件驱动编程，因为回调模式支持您的程序以异步方式运行，也就是说，可以乱序运行。\n\n#### 自定义函数\n\n如果创建了一个函数并且将其分配给保存了另外函数的同一个变量，那么就以一个新函数覆盖了旧函数。从某种程度上来说，回收了就函数指针以指向一个新函数。\n\n```javascript\nvar scareMe = function () {\n    alert(\"Boo!\")；\n    scareMe = function () {\n        alert(\"Double boo!\");\n    };\n};\n// 使用自定义函数\nscareMe();// 输出Boo!\nscareMe();// 输出Double boo!\n```\n    \n当您的函数有一些初始化准备工作要做，并且仅需要执行一次，这种模式就非常有用。\n\n#### 即时函数\n\n即时函数试试一种可以支持在定义函数后立即执行该函数的语法。\n```javascript\n(function() {\n    alert(\"watch out!\");\n})();\n```\n    \n它为初始化代码提供了一个作用域沙箱，用以将所有代码包装到它的局部作用域中，且不会将任何变量泄露到全局作用域中。\n\n#### 即时对象初始化\n\n保护全局作用域不受污染的另一种方法，类似于前面介绍的即时函数模式，也就是下面介绍的即时函数初始化，该方法在创建对象后会立即执行。init()函数需要负责所有的初始化任务。\n\n```javascript\n({\n    //在这里可以定义设定值\n    maxwidth: 600,\n    maxheight: 400,\n\n    //定义方法\n    gimmeMax: function() {\n        return this.maxwidth + \"x\" + this.maxheight;\n    },\n\n    //初始化\n    init: function() {\n        console.log(this.gimmeMax());\n    }\n}).init();\n```\n\n优点：保护全局命名空间；使整个初始化过程显得更有结构化。\n\n> 注意：这种模式主要适用于一次性的任务，而且在init()完毕后也没有对改对象的访问。如果想在init()完毕后保存对该兑现的一个引用，可以通过在init()尾部添加`\"return this;\"`语句实现该功能。\n\n#### 初始化时分支\n\n初始化时分支（加载时分支）是一种优化模式。当知道某个条件在整个程序的生命周期内都不会发生改变的时候，仅对该条件测试一次是深有意义的。浏览器功能检测就是一个典型的例子：\n\n```javascript\n//优化之前\nvar utils = {\n    addListener: function(el, type, fn) {\n        if (typeof window.addEventListener === \"function\") {\n            el.addEventListener(type, fn, false);\n        } else if (typeof document.attachEvent === \"function\") {\n            el.attachEvent(\"on\" + type, fn);\n        } else {\n            el[\"on\" + type] = fn;\n        }\n    },\n    removeListener: function(el, type, fn) {\n        //几乎一样\n    }\n}\n```\n\n此代码效率比较低下，每次在调用tuils.addListener()时，都将会重复地执行相同的检查，下面是使用初始化分支进行优化：\n\n```javascript\n// 接口\nvar utils = {\n    addListener: null,\n    removeListener: null\n};\n\n//实现\nif (typeof window.addEventListener === \"function\") {\n    utils.addListener = function(el, type, fn) {\n        el.addEventListener(type, fn, false);\n    };\n    utils.removeListener = function(el, type, fn) {\n        el.removeListener(type, fn, false);\n    };\n} else if (typeof document.attachEvent === \"function\") { // 判断为IE浏览器\n    utils.addListener = function(el, type, fn) {\n        el.attachEvent(\"on\" + type, fn);\n    };\n    utils.removeListener = function(el, type, fn) {\n        el.detachEvent(\"on\" + type, fn);\n    };\n} else { // 更早版本的浏览器\n    utils.addListener = function(el, type, fn) {\n        el[\"on\" + type] = fn;\n    };\n    utils.removeListener = function(el, type, fn) {\n        el[\"on\" + type] = null;\n    };\n}\n```\n\n#### 函数属性——备忘模式\n\n函数是对象，因此他们具有属性。事实上，它们确实还有属性和方法。例如，对于每一个函数，无论使用什么样的语法来创建它，它都会自动获得一个length属性，其中包含了该函数期望的参数数量。\n\n```javascript\nfunction func(a, b, c) {}\nconsole.log(func.length); // 3\n```\n\n可以在任何时候讲自定义属性添加到你的函数中。自动以舒心的其中一个用例是缓存函数结果，因此，在下一次调用就不用重做潜在的繁重计算。缓存函数结果也被称为备忘。\n\n```javascript\nvar myFunc = function(param) {\n    if (!myFunc.cache[param]) {\n        var result = {};\n        // ..开销很大的操作\n        myFunc.cache[param] = result;\n    }\n    return myFunc.cache[param];\n};\n//缓存存储\nmyFunc.cache = {};\n```\n\n#### 配置对象\n\n在函数需要传递的参数很多时，可以使用一个对象包含所有参数再作为参数传递到函数中：\n\n```javascript\nvar conf = {\n    username: \"Boo\",\n    age: 45\n}\naddPerson(conf);\n```\n\n优点：\n- 不需要记住众多的参数以及顺序；\n- 可以安全忽略可选参数；\n- 更加易于阅读和维护；\n- 更加易于添加和删除参数。\n\n缺点：\n- 需要记住参数名称；\n- 属性名称无法被压缩。\n\n### 对象创建模式\n\n#### 命名空间模式\n\n命名空间有助于减少程序中所需的全局变量的数量，并且同时还有助于避免命名冲突或过长的名字前缀。\n\n```javascript\n// 全局变量\nvar MYAPP = {};\n// 构造函数\nMYAPP.Parent = function() {};\nMYAPP.Child = function() {};\n// 一个变量\nMYAPP.some_var = 1;\n// 一个对象容器\nMYAPP.modules = {};\n// 嵌套对象\nMYAPP.modules.module1 = {};\nMYAPP.modules.module1.data = { a: 1, b: 2 }\n```\n\n缺点：\n- 需要输入更多的字符串，每个变脸和函数迁都要附加前缀，总体上增加了需要下载的代码量。\n- 仅有一个全局实例意味着任何部分的代码都可以修改全局实例，并且其余的功能能够获得更新后的状态。\n- 长嵌套名字意味着更长的属性解析查询时间。\n\n接下来封装一个命名空间函数的创建方法，这个实现是非破坏性的：\n\n```javascript\nvar MYAPP = MYAPP || {};\nMYAPP.namespace = function(ns_string) {\n    var parts = ns_string.split(\".\"),\n        parent = MYAPP,\n        i;\n    // 剥离最前面的冗余全局变量\n    if (parent[0] === \"MYAPP\") {\n        parts = parts.slice(1);\n    }\n    for (i = 0; i < parts.length; i++) {\n        // 如果存在，就创建一个属性\n        if (typeof parent[parts[i]] === \"undefined\") {\n            parent[parts[i]] = {};\n        }\n        parent = parent[parts[i]];\n    }\n    return parent;\n}\n\n// 将返回值赋给一个全局变量\nvar module2 = MYAPP.namespace(\"MYAPP.modules.module2\");\n```\n\n#### 声明依赖关系\n\n在函数顶部或模块顶部声明代码所以来的模块。\n\n#### 模块模式\n\nJavaScript并没有包（package）的特殊语法，但是模块模式提供了一种创建自包含非耦合代码片段的有力工具，可以将它视为黑盒模式。\n\n```javascript\nMYAPP.namespace(\"MYAPP.utilities.array\");\nMYAPP.utilities.array = (function() {\n    // 依赖\n    var uobj = MYAPP.utilities.object,\n        ulang = MYAPP.utilities.lang,\n        // 私有属性\n        array_string = \"[Object Array]\",\n        ops = Object.prototype.toString;\n    // 私有方法。。。。。\n\n    // 公有API\n    return {\n        inArray: function(needle, haystack) {\n            for (var i = 0, max = haystack.length; i < max; i++) {\n                if (haystack[i] === needle) {\n                    return true;\n                }\n            }\n        },\n        isArray: function(a) {\n            return ops.call(a) === array_string;\n        }\n    }\n})();\n```\n\n#### 沙箱模式\n\n在沙箱模式中，可以使用全局构造函数创建对象并且还可以传递回调函数。\n\n```javascript\nnew Sandbox(function(box) {\n    // 代码写在这里.....\n});\n```\n\n#### 实现构造函数\n\n```javascript\nfunction SandBox() {\n    // 将参数转换成一个数组\n    var args = Array.prototype.slice.call(arguments),\n        // 最后一个参数是回调函数\n        callback = args.pop(),\n        // 模块可以作为一个数组传递，或作为单独的参数传递\n        modules = (args[0] && typeof args[0] === \"string\") ? args : args[0],\n        i;\n    // 确保该函数作为构造函数被调用\n    if (!(this instanceof SandBox)) {\n        return new SandBox(modules, callback);\n    }\n    // 需要向this添加属性\n    this.a = 1;\n    this.b = 2;\n    // 向this对象添加模块\n    if (!modules || modules === '*') {\n        modules = [];\n        for (i in SandBox.modules) {\n            if (SandBox.modules.hasOwnProperty(i)) {\n                modules.push(i);\n            }\n        }\n    }\n    // 初始化所需模块\n    for (i = 0; i < modules.length; i++) {\n        SandBox.modules[modules[i]](this);\n    }\n    // 调用回调函数\n    callback(this);\n    // 所需要的任何原型属性\n    SandBox.prototype = {\n        name: 'My App',\n        version: \"1.0\",\n        getName: function() {\n            return this.name;\n        }\n    }\n}\n```\n\n### 代码复用模式\n\n优先使用对象组合，而不是类继承。\n\n###  设计模式\n\n#### 单例模式\n\n单例模式的思想在于保证一个特定类仅有一个实例。这意味着当第二次使用同一个类创建新对象的时候，应该得到与第一次所创建的对象完全相同的对象。\n\n```javascript\nvar obj = {\n    myprop = 'my value'\n};\nvar obj2 = {\n    myprop = 'my value'\n};\nobj === obj2; // false\nobj == obj2; // false\n```\n\n> 可以认为每次在使用对象字面量创建对象的时候，实际上创建一个单例，并且不设计任何特殊语法。\n\n下面是通过使用闭包来实现单例模式\n\n```javascript\nfunction Universe() {\n    // 缓存实例\n    var instance;\n    // 重写构造函数\n    Universe.instance = function Universe() {\n            return instance();\n        }\n        // 保留原型属性\n    Universe.prototype = this;\n    // 实例\n    instance = new Universe();\n    // 重置构造函数指针\n    instance.contructor = Universe;\n    // 所有功能\n    instance.start_time = 0;\n    instance.bang = 'big';\n    return instance;\n}\n```\n\n#### 工厂模式\n\n设计工厂模式的目的是为了创建对象，它通常在类或者类的静态方法中实现，具有以下目标：\n- 当创建相似对象时执行重复操作；\n- 在编译时不知道具体类型（类）的情况下，为工厂客户提供一种创建对象的接口。\n\n```javascript\n// 父构造函数\nfunction CarMaker() {}\n// 一个父方法\nCarMaker.prototype.drive = function() {\n        return \"Vroom, I have\" + this.doors + +\"doors\";\n    }\n    // 静态工厂方法\nCarMaker.factory = function(type) {\n        var constr = type,\n            newcar;\n        // 如果构造函数不存在，则发生错误\n        if (typeof CarMaker[constr] !== \"function\") {\n            throw {\n                name: \"Error\",\n                message: constr + \" doesn't exist\"\n            }\n        }\n        // 判断是否继承父类\n        if (typeof CarMaker[constr].prototype.drive !== \"function\") {\n            CarMaker[constr]..prototype = new CarMaker();\n        }\n        // 创建一个新的实例\n        newcar = new CarMaker[constr]();\n        // 可选择性的调用一些方法然后返回。。。\n        return newcar;\n    }\n    // 定义特定的汽车制造商\nCarMaker.Compact = function() {\n    this.doors = 4;\n}\nCarMaker.Convertible = function() {\n    this.doors = 2;\n}\nCarMaker.SUV = function() {\n    this.doors = 24;\n}\n// 调用\nvar corolla = Compact.factory('Compact');\n```\n\n> 在JavaScript中，内置的全局Object()构造函数是内置的对象工厂，根据输入类型而创建不同的对象。\n\n#### 迭代器模式\n\n在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能存储在一个复杂的数据结构中，对象的消费者并不需要知道如何组织数据，所有需要做的就是去除单个数据进行工作。\n\n在迭代器模式中，对象需要提供一个next()方法。依次调用next()必须返回下一个连续的元素。\n\n```javascript\nvar agg = (function() {\n    var index = 0,\n        data = [1, 2, 3, 4, 5],\n        length = data.length;\n    return {\n        next: function() {\n            var element;\n            if (!this.hasNext()) {\n                return null;\n            }\n            element = data[index];\n            index = index + 2;\n            return element;\n        },\n        hasNext: function() {\n            return index < length;\n        }\n    }\n}());\n```\n\n#### 装饰者模式\n\n可以在运行时添加附件功能到对象中。\n\n```javascript\nfunction Sale(price) {\n    this.price = (price > 0) || 100;\n    this.decorators_list = {};\n}\nSale.decorators = {};\nSale.decorators.fedtax = {\n    getPrice: function(price) {\n        return price + price * 5 / 100;\n    }\n};\nSale.decorators.quebec = {\n    getPrice: function(price) {\n        return price + price * 7.5 / 100;\n    }\n};\nSale.decorators.money = {\n    getPrice: function(price) {\n        return \"$\" + price.toFixed(2);\n    }\n};\nSale.prototype.decorate = function(decorators) {\n    this.decorators_list.push(decorator);\n};\nSale.prototype.getPrice = function() {\n        var price = this.price,\n            i,\n            max = this.decorators_list.length,\n            name;\n        for (i = 0; i < max; i++) {\n            name = this.decorators_list[i];\n            price = Sale.decorators[name].getPrice(price);\n        }\n        return price;\n    }\n    // 使用\nvar sale = new Sale(100); // 该价格为100美元\nsale.decorate('fedtax'); // 增加联邦税\nsale.decorate('quebec'); // 增加省联邦税\nsale.decorate('money'); // 格式化为美元格式\nsale.getPrice(); // \"$112.88\"\n```\n\n#### 策略模式\n\n策略模式支持您正在运行时选择算法。代码的客户端可以使用同一个接口来进行工作，但是它却根据客户正在试图执行任务的上下文，从多个算法中选择出用于处理特定任务的算法。\n\n使用策略模式的一个例子是解决表单验证的问题。无论表单的对象具体是什么，该方法都会被调用，并且总是返回相同的结果，一个未经验证的书列表以及任意的错误信息。\n\n```javascript\nvar validator = {\n        // 所有可用的检查\n        types: {},\n        // 在当前验证回话中的错误信息\n        messages: [],\n        // 当前验证配置 名称：验证类型\n        conifg: {},\n        //接口方法\n        validate: function(data) {\n            var i, msg, type, checker, result_ok;\n            // 重置所有消息\n            this.messages = [];\n            for (i in data) {\n                if (data.hasOwnProperty(i)) {\n                    type = this.types[type];\n                    checker = this.types[type];\n                    if (!type) {\n                        continue; // 不需要验证\n                    }\n                    if (!checker) {\n                        throw {\n                            name: \"ValidationError\",\n                            message: \"No handler to validate type \" + type;\n                        }\n                    }\n                    result_ok = checker.validate(data[i]);\n                    if (!result_ok) {\n                        msg = \"Invalid value for *\" + i + \"*, \" + checker.instructions;\n                        this.messages.push(msg);\n                    }\n                }\n            }\n            return this.hasErrors();\n        },\n        // 帮助操作\n        hasErrors: function() {\n            return this.messages.length !== 0;\n        }\n    }\n    // 配置\nvalidator.config = {\n        age: 'isNumber'\n    }\n    // 验证方法\nvalidator.types.isNumber = {\n    validate: function(value) {\n        return !isNaN(value);\n    }\n    instructions: \"the value can only be a valid number, e.g. 1, 3.14 or 2010\";\n}\n```\n\n#### 外观模式\n\n外观模式为对象提供了一个可选择的接口，可保持方法的间接性并且不会使它们处理过多的工作。\n\n适用于处理浏览器脚本处理\n\n```javascript\nvar myevent = {\n    // ...\n    stop: function(e) {\n        // 其他\n        if (typeof e.preventDefault === \"function\") {\n            e.preventDefault();\n        }\n        if (typeof e.stopPropagation === \"function\") {\n            e.stopPropagation();\n        }\n        // IE浏览器\n        if (typeof e.returnValue === \"boolean\") {\n            e.returnValue = false;\n        }\n        if (typeof e.cancelBubble === \"boolean\") {\n            e.cancelBubble = true;\n        }\n    }\n}\n```\n\n#### 代理模式\n\n代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。\n\n所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。代理模式的思想是为了提供额外的处理或者不同的操作而在实际对象与调用者之间插入一个代理对象。这些额外的操作通常需要与实际对象进行通信。\n\n#### 中介者模式\n\n中介者模式（Mediator），用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n\n软件开发中，中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。一般，如果系统有很多子模块需要直接沟通，都要创建一个中央控制点让其各模块通过该中央控制点进行交互。中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的。\n\n[设计模式之中介者模式](http://www.cnblogs.com/TomXu/archive/2012/03/13/2374789.html)\n\n#### 观察者模式\n\n观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。\n\n使用观察者模式的好处：\n1. 支持简单的广播通信，自动通知所有已经订阅过的对象。\n2. 页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。\n3. 目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。\n\n\n[设计模式之观察者模式](http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html)","source":"_posts/2016-04-26-JavaScriptPatterns_-javascrip.md","raw":"---\nlayout: post\ntitle: 《JavaScript模式》阅读笔记\ndate: 2016-04-26\ncategories: javascript\ntags: [javascript]\ndescription: JavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法...\nauthor: \"Gemicat\"\n---\n\n### JavaScript：基本概念\n\n#### 面向对象\n\nJavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法。\n\n对象主要有两种类型：\n\n1.原生的（Native）：在ECMAScript标准中有详细描述——内置对象和用户自定义对象。\n\n2.主机的（Host）：在主机环境中定义的（例如浏览器环境）——windows对象和所有的DOM对象。\n\n### 函数\n\n#### 背景\n\nJavaScript中的函数有两个主要特点使其显得比较特殊。第一个特点在于函数是第一类对象，第二个特点是它们可以提供作用域。\n\n1. 函数可以在运行时动态创建，还可以在程序执行过程中创建。\n2. 函数可以分配给变量，可以将他们的引用复制到其他变量，可以被扩展，此外，除少数特殊情况外，函数可以被删除。\n3. 可以作为参数传递给其他函数，并且还可以由其他函数返回。\n4. 函数可以有自己的属性和方法。\n\n#### 回调模式\n\n函数都是对象，这表示它们可以作为参数传递给其他函数。当将函数introduceBugs()作为参数传递给函数writeCode()时，那么在某一时刻writeCode()可能会执行（或者调用）introduceBugs()。在这种情况下，introduceBugs()就被称之为回调函数。\n\n```javascript\nfunction writeCode(callback) {\n    //执行一些任务\n    callback();\n    //.............\n}\n\nfunction introduceBugs() {\n    //....引入漏洞\n}\n\nwriteCode(introduceBugs);\n```\n\n> 注意writeCode()传递的introduceBugs，是不带括号的。带括号表示传递执行函数，不带括号表示传递引用。\n\n#### 回调与作用域\n\n回调并不是一次性的匿名函数或全局函数，而是对象的方法。如果该回调方法使用this来引用它所属的对象，这可能会导致意想不到的意外发生。\n\n假设回调函数是paint()，它是一个名为myapp的对象的方法:\n\n```javascript\nvar myapp = {};\nmyapp.color = \"green\";\nmyapp.paint = function(node) {\n    node.style.color = this.color;\n}\n```\n    \n函数findNodes()执行以下语句：\n\n```javascript\nvar findNodes = function(callback) {\n    //...\n    if (typeof callback == \"function\") {\n        callback(found);\n    }\n    //...\n}\n```\n\n如果调用findNodes(myapp.paint)，它并不会按照预期那样执行，这是由于this.color没有定义。由于findNodes()是一个全局函数，因此，对象this引用了全局对象。\n\n对于这个问题的解决方案就是传递回调函数的同事传递改回调函数所属的对象：\n```javascript\nfindNodes(myapp.paint, myapp);\n```\n    \n然后，还需要修改findNodes()以绑定所传入的对象：\n\n```javascript\nvar findNodes = function(callback, callback_obj) {\n    //...\n    if (typeof callback == \"function\") {\n        callback.call(callback_obj, found);\n    }\n    //...\n}\n```\n\n#### 异步事件监听器\n\n回调模式有很多用途，比如，当附加一个事件监听器到页面上的一个元素时，实际上提供了一个回调函数指针，该函数将会在事件发生时被调用。\n\n    document.addEventListener(\"click\", console.log, false);\n\nJavaScript特别适合用于事件驱动编程，因为回调模式支持您的程序以异步方式运行，也就是说，可以乱序运行。\n\n#### 自定义函数\n\n如果创建了一个函数并且将其分配给保存了另外函数的同一个变量，那么就以一个新函数覆盖了旧函数。从某种程度上来说，回收了就函数指针以指向一个新函数。\n\n```javascript\nvar scareMe = function () {\n    alert(\"Boo!\")；\n    scareMe = function () {\n        alert(\"Double boo!\");\n    };\n};\n// 使用自定义函数\nscareMe();// 输出Boo!\nscareMe();// 输出Double boo!\n```\n    \n当您的函数有一些初始化准备工作要做，并且仅需要执行一次，这种模式就非常有用。\n\n#### 即时函数\n\n即时函数试试一种可以支持在定义函数后立即执行该函数的语法。\n```javascript\n(function() {\n    alert(\"watch out!\");\n})();\n```\n    \n它为初始化代码提供了一个作用域沙箱，用以将所有代码包装到它的局部作用域中，且不会将任何变量泄露到全局作用域中。\n\n#### 即时对象初始化\n\n保护全局作用域不受污染的另一种方法，类似于前面介绍的即时函数模式，也就是下面介绍的即时函数初始化，该方法在创建对象后会立即执行。init()函数需要负责所有的初始化任务。\n\n```javascript\n({\n    //在这里可以定义设定值\n    maxwidth: 600,\n    maxheight: 400,\n\n    //定义方法\n    gimmeMax: function() {\n        return this.maxwidth + \"x\" + this.maxheight;\n    },\n\n    //初始化\n    init: function() {\n        console.log(this.gimmeMax());\n    }\n}).init();\n```\n\n优点：保护全局命名空间；使整个初始化过程显得更有结构化。\n\n> 注意：这种模式主要适用于一次性的任务，而且在init()完毕后也没有对改对象的访问。如果想在init()完毕后保存对该兑现的一个引用，可以通过在init()尾部添加`\"return this;\"`语句实现该功能。\n\n#### 初始化时分支\n\n初始化时分支（加载时分支）是一种优化模式。当知道某个条件在整个程序的生命周期内都不会发生改变的时候，仅对该条件测试一次是深有意义的。浏览器功能检测就是一个典型的例子：\n\n```javascript\n//优化之前\nvar utils = {\n    addListener: function(el, type, fn) {\n        if (typeof window.addEventListener === \"function\") {\n            el.addEventListener(type, fn, false);\n        } else if (typeof document.attachEvent === \"function\") {\n            el.attachEvent(\"on\" + type, fn);\n        } else {\n            el[\"on\" + type] = fn;\n        }\n    },\n    removeListener: function(el, type, fn) {\n        //几乎一样\n    }\n}\n```\n\n此代码效率比较低下，每次在调用tuils.addListener()时，都将会重复地执行相同的检查，下面是使用初始化分支进行优化：\n\n```javascript\n// 接口\nvar utils = {\n    addListener: null,\n    removeListener: null\n};\n\n//实现\nif (typeof window.addEventListener === \"function\") {\n    utils.addListener = function(el, type, fn) {\n        el.addEventListener(type, fn, false);\n    };\n    utils.removeListener = function(el, type, fn) {\n        el.removeListener(type, fn, false);\n    };\n} else if (typeof document.attachEvent === \"function\") { // 判断为IE浏览器\n    utils.addListener = function(el, type, fn) {\n        el.attachEvent(\"on\" + type, fn);\n    };\n    utils.removeListener = function(el, type, fn) {\n        el.detachEvent(\"on\" + type, fn);\n    };\n} else { // 更早版本的浏览器\n    utils.addListener = function(el, type, fn) {\n        el[\"on\" + type] = fn;\n    };\n    utils.removeListener = function(el, type, fn) {\n        el[\"on\" + type] = null;\n    };\n}\n```\n\n#### 函数属性——备忘模式\n\n函数是对象，因此他们具有属性。事实上，它们确实还有属性和方法。例如，对于每一个函数，无论使用什么样的语法来创建它，它都会自动获得一个length属性，其中包含了该函数期望的参数数量。\n\n```javascript\nfunction func(a, b, c) {}\nconsole.log(func.length); // 3\n```\n\n可以在任何时候讲自定义属性添加到你的函数中。自动以舒心的其中一个用例是缓存函数结果，因此，在下一次调用就不用重做潜在的繁重计算。缓存函数结果也被称为备忘。\n\n```javascript\nvar myFunc = function(param) {\n    if (!myFunc.cache[param]) {\n        var result = {};\n        // ..开销很大的操作\n        myFunc.cache[param] = result;\n    }\n    return myFunc.cache[param];\n};\n//缓存存储\nmyFunc.cache = {};\n```\n\n#### 配置对象\n\n在函数需要传递的参数很多时，可以使用一个对象包含所有参数再作为参数传递到函数中：\n\n```javascript\nvar conf = {\n    username: \"Boo\",\n    age: 45\n}\naddPerson(conf);\n```\n\n优点：\n- 不需要记住众多的参数以及顺序；\n- 可以安全忽略可选参数；\n- 更加易于阅读和维护；\n- 更加易于添加和删除参数。\n\n缺点：\n- 需要记住参数名称；\n- 属性名称无法被压缩。\n\n### 对象创建模式\n\n#### 命名空间模式\n\n命名空间有助于减少程序中所需的全局变量的数量，并且同时还有助于避免命名冲突或过长的名字前缀。\n\n```javascript\n// 全局变量\nvar MYAPP = {};\n// 构造函数\nMYAPP.Parent = function() {};\nMYAPP.Child = function() {};\n// 一个变量\nMYAPP.some_var = 1;\n// 一个对象容器\nMYAPP.modules = {};\n// 嵌套对象\nMYAPP.modules.module1 = {};\nMYAPP.modules.module1.data = { a: 1, b: 2 }\n```\n\n缺点：\n- 需要输入更多的字符串，每个变脸和函数迁都要附加前缀，总体上增加了需要下载的代码量。\n- 仅有一个全局实例意味着任何部分的代码都可以修改全局实例，并且其余的功能能够获得更新后的状态。\n- 长嵌套名字意味着更长的属性解析查询时间。\n\n接下来封装一个命名空间函数的创建方法，这个实现是非破坏性的：\n\n```javascript\nvar MYAPP = MYAPP || {};\nMYAPP.namespace = function(ns_string) {\n    var parts = ns_string.split(\".\"),\n        parent = MYAPP,\n        i;\n    // 剥离最前面的冗余全局变量\n    if (parent[0] === \"MYAPP\") {\n        parts = parts.slice(1);\n    }\n    for (i = 0; i < parts.length; i++) {\n        // 如果存在，就创建一个属性\n        if (typeof parent[parts[i]] === \"undefined\") {\n            parent[parts[i]] = {};\n        }\n        parent = parent[parts[i]];\n    }\n    return parent;\n}\n\n// 将返回值赋给一个全局变量\nvar module2 = MYAPP.namespace(\"MYAPP.modules.module2\");\n```\n\n#### 声明依赖关系\n\n在函数顶部或模块顶部声明代码所以来的模块。\n\n#### 模块模式\n\nJavaScript并没有包（package）的特殊语法，但是模块模式提供了一种创建自包含非耦合代码片段的有力工具，可以将它视为黑盒模式。\n\n```javascript\nMYAPP.namespace(\"MYAPP.utilities.array\");\nMYAPP.utilities.array = (function() {\n    // 依赖\n    var uobj = MYAPP.utilities.object,\n        ulang = MYAPP.utilities.lang,\n        // 私有属性\n        array_string = \"[Object Array]\",\n        ops = Object.prototype.toString;\n    // 私有方法。。。。。\n\n    // 公有API\n    return {\n        inArray: function(needle, haystack) {\n            for (var i = 0, max = haystack.length; i < max; i++) {\n                if (haystack[i] === needle) {\n                    return true;\n                }\n            }\n        },\n        isArray: function(a) {\n            return ops.call(a) === array_string;\n        }\n    }\n})();\n```\n\n#### 沙箱模式\n\n在沙箱模式中，可以使用全局构造函数创建对象并且还可以传递回调函数。\n\n```javascript\nnew Sandbox(function(box) {\n    // 代码写在这里.....\n});\n```\n\n#### 实现构造函数\n\n```javascript\nfunction SandBox() {\n    // 将参数转换成一个数组\n    var args = Array.prototype.slice.call(arguments),\n        // 最后一个参数是回调函数\n        callback = args.pop(),\n        // 模块可以作为一个数组传递，或作为单独的参数传递\n        modules = (args[0] && typeof args[0] === \"string\") ? args : args[0],\n        i;\n    // 确保该函数作为构造函数被调用\n    if (!(this instanceof SandBox)) {\n        return new SandBox(modules, callback);\n    }\n    // 需要向this添加属性\n    this.a = 1;\n    this.b = 2;\n    // 向this对象添加模块\n    if (!modules || modules === '*') {\n        modules = [];\n        for (i in SandBox.modules) {\n            if (SandBox.modules.hasOwnProperty(i)) {\n                modules.push(i);\n            }\n        }\n    }\n    // 初始化所需模块\n    for (i = 0; i < modules.length; i++) {\n        SandBox.modules[modules[i]](this);\n    }\n    // 调用回调函数\n    callback(this);\n    // 所需要的任何原型属性\n    SandBox.prototype = {\n        name: 'My App',\n        version: \"1.0\",\n        getName: function() {\n            return this.name;\n        }\n    }\n}\n```\n\n### 代码复用模式\n\n优先使用对象组合，而不是类继承。\n\n###  设计模式\n\n#### 单例模式\n\n单例模式的思想在于保证一个特定类仅有一个实例。这意味着当第二次使用同一个类创建新对象的时候，应该得到与第一次所创建的对象完全相同的对象。\n\n```javascript\nvar obj = {\n    myprop = 'my value'\n};\nvar obj2 = {\n    myprop = 'my value'\n};\nobj === obj2; // false\nobj == obj2; // false\n```\n\n> 可以认为每次在使用对象字面量创建对象的时候，实际上创建一个单例，并且不设计任何特殊语法。\n\n下面是通过使用闭包来实现单例模式\n\n```javascript\nfunction Universe() {\n    // 缓存实例\n    var instance;\n    // 重写构造函数\n    Universe.instance = function Universe() {\n            return instance();\n        }\n        // 保留原型属性\n    Universe.prototype = this;\n    // 实例\n    instance = new Universe();\n    // 重置构造函数指针\n    instance.contructor = Universe;\n    // 所有功能\n    instance.start_time = 0;\n    instance.bang = 'big';\n    return instance;\n}\n```\n\n#### 工厂模式\n\n设计工厂模式的目的是为了创建对象，它通常在类或者类的静态方法中实现，具有以下目标：\n- 当创建相似对象时执行重复操作；\n- 在编译时不知道具体类型（类）的情况下，为工厂客户提供一种创建对象的接口。\n\n```javascript\n// 父构造函数\nfunction CarMaker() {}\n// 一个父方法\nCarMaker.prototype.drive = function() {\n        return \"Vroom, I have\" + this.doors + +\"doors\";\n    }\n    // 静态工厂方法\nCarMaker.factory = function(type) {\n        var constr = type,\n            newcar;\n        // 如果构造函数不存在，则发生错误\n        if (typeof CarMaker[constr] !== \"function\") {\n            throw {\n                name: \"Error\",\n                message: constr + \" doesn't exist\"\n            }\n        }\n        // 判断是否继承父类\n        if (typeof CarMaker[constr].prototype.drive !== \"function\") {\n            CarMaker[constr]..prototype = new CarMaker();\n        }\n        // 创建一个新的实例\n        newcar = new CarMaker[constr]();\n        // 可选择性的调用一些方法然后返回。。。\n        return newcar;\n    }\n    // 定义特定的汽车制造商\nCarMaker.Compact = function() {\n    this.doors = 4;\n}\nCarMaker.Convertible = function() {\n    this.doors = 2;\n}\nCarMaker.SUV = function() {\n    this.doors = 24;\n}\n// 调用\nvar corolla = Compact.factory('Compact');\n```\n\n> 在JavaScript中，内置的全局Object()构造函数是内置的对象工厂，根据输入类型而创建不同的对象。\n\n#### 迭代器模式\n\n在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能存储在一个复杂的数据结构中，对象的消费者并不需要知道如何组织数据，所有需要做的就是去除单个数据进行工作。\n\n在迭代器模式中，对象需要提供一个next()方法。依次调用next()必须返回下一个连续的元素。\n\n```javascript\nvar agg = (function() {\n    var index = 0,\n        data = [1, 2, 3, 4, 5],\n        length = data.length;\n    return {\n        next: function() {\n            var element;\n            if (!this.hasNext()) {\n                return null;\n            }\n            element = data[index];\n            index = index + 2;\n            return element;\n        },\n        hasNext: function() {\n            return index < length;\n        }\n    }\n}());\n```\n\n#### 装饰者模式\n\n可以在运行时添加附件功能到对象中。\n\n```javascript\nfunction Sale(price) {\n    this.price = (price > 0) || 100;\n    this.decorators_list = {};\n}\nSale.decorators = {};\nSale.decorators.fedtax = {\n    getPrice: function(price) {\n        return price + price * 5 / 100;\n    }\n};\nSale.decorators.quebec = {\n    getPrice: function(price) {\n        return price + price * 7.5 / 100;\n    }\n};\nSale.decorators.money = {\n    getPrice: function(price) {\n        return \"$\" + price.toFixed(2);\n    }\n};\nSale.prototype.decorate = function(decorators) {\n    this.decorators_list.push(decorator);\n};\nSale.prototype.getPrice = function() {\n        var price = this.price,\n            i,\n            max = this.decorators_list.length,\n            name;\n        for (i = 0; i < max; i++) {\n            name = this.decorators_list[i];\n            price = Sale.decorators[name].getPrice(price);\n        }\n        return price;\n    }\n    // 使用\nvar sale = new Sale(100); // 该价格为100美元\nsale.decorate('fedtax'); // 增加联邦税\nsale.decorate('quebec'); // 增加省联邦税\nsale.decorate('money'); // 格式化为美元格式\nsale.getPrice(); // \"$112.88\"\n```\n\n#### 策略模式\n\n策略模式支持您正在运行时选择算法。代码的客户端可以使用同一个接口来进行工作，但是它却根据客户正在试图执行任务的上下文，从多个算法中选择出用于处理特定任务的算法。\n\n使用策略模式的一个例子是解决表单验证的问题。无论表单的对象具体是什么，该方法都会被调用，并且总是返回相同的结果，一个未经验证的书列表以及任意的错误信息。\n\n```javascript\nvar validator = {\n        // 所有可用的检查\n        types: {},\n        // 在当前验证回话中的错误信息\n        messages: [],\n        // 当前验证配置 名称：验证类型\n        conifg: {},\n        //接口方法\n        validate: function(data) {\n            var i, msg, type, checker, result_ok;\n            // 重置所有消息\n            this.messages = [];\n            for (i in data) {\n                if (data.hasOwnProperty(i)) {\n                    type = this.types[type];\n                    checker = this.types[type];\n                    if (!type) {\n                        continue; // 不需要验证\n                    }\n                    if (!checker) {\n                        throw {\n                            name: \"ValidationError\",\n                            message: \"No handler to validate type \" + type;\n                        }\n                    }\n                    result_ok = checker.validate(data[i]);\n                    if (!result_ok) {\n                        msg = \"Invalid value for *\" + i + \"*, \" + checker.instructions;\n                        this.messages.push(msg);\n                    }\n                }\n            }\n            return this.hasErrors();\n        },\n        // 帮助操作\n        hasErrors: function() {\n            return this.messages.length !== 0;\n        }\n    }\n    // 配置\nvalidator.config = {\n        age: 'isNumber'\n    }\n    // 验证方法\nvalidator.types.isNumber = {\n    validate: function(value) {\n        return !isNaN(value);\n    }\n    instructions: \"the value can only be a valid number, e.g. 1, 3.14 or 2010\";\n}\n```\n\n#### 外观模式\n\n外观模式为对象提供了一个可选择的接口，可保持方法的间接性并且不会使它们处理过多的工作。\n\n适用于处理浏览器脚本处理\n\n```javascript\nvar myevent = {\n    // ...\n    stop: function(e) {\n        // 其他\n        if (typeof e.preventDefault === \"function\") {\n            e.preventDefault();\n        }\n        if (typeof e.stopPropagation === \"function\") {\n            e.stopPropagation();\n        }\n        // IE浏览器\n        if (typeof e.returnValue === \"boolean\") {\n            e.returnValue = false;\n        }\n        if (typeof e.cancelBubble === \"boolean\") {\n            e.cancelBubble = true;\n        }\n    }\n}\n```\n\n#### 代理模式\n\n代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。\n\n所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。代理模式的思想是为了提供额外的处理或者不同的操作而在实际对象与调用者之间插入一个代理对象。这些额外的操作通常需要与实际对象进行通信。\n\n#### 中介者模式\n\n中介者模式（Mediator），用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n\n软件开发中，中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。一般，如果系统有很多子模块需要直接沟通，都要创建一个中央控制点让其各模块通过该中央控制点进行交互。中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的。\n\n[设计模式之中介者模式](http://www.cnblogs.com/TomXu/archive/2012/03/13/2374789.html)\n\n#### 观察者模式\n\n观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。\n\n使用观察者模式的好处：\n1. 支持简单的广播通信，自动通知所有已经订阅过的对象。\n2. 页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。\n3. 目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。\n\n\n[设计模式之观察者模式](http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html)","slug":"2016-04-26-JavaScriptPatterns_-javascrip","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdo0018mo11erenzd8y","content":"<h3 id=\"JavaScript：基本概念\"><a href=\"#JavaScript：基本概念\" class=\"headerlink\" title=\"JavaScript：基本概念\"></a>JavaScript：基本概念</h3><h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>JavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法。</p>\n<p>对象主要有两种类型：</p>\n<p>1.原生的（Native）：在ECMAScript标准中有详细描述——内置对象和用户自定义对象。</p>\n<p>2.主机的（Host）：在主机环境中定义的（例如浏览器环境）——windows对象和所有的DOM对象。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>JavaScript中的函数有两个主要特点使其显得比较特殊。第一个特点在于函数是第一类对象，第二个特点是它们可以提供作用域。</p>\n<ol>\n<li>函数可以在运行时动态创建，还可以在程序执行过程中创建。</li>\n<li>函数可以分配给变量，可以将他们的引用复制到其他变量，可以被扩展，此外，除少数特殊情况外，函数可以被删除。</li>\n<li>可以作为参数传递给其他函数，并且还可以由其他函数返回。</li>\n<li>函数可以有自己的属性和方法。</li>\n</ol>\n<h4 id=\"回调模式\"><a href=\"#回调模式\" class=\"headerlink\" title=\"回调模式\"></a>回调模式</h4><p>函数都是对象，这表示它们可以作为参数传递给其他函数。当将函数introduceBugs()作为参数传递给函数writeCode()时，那么在某一时刻writeCode()可能会执行（或者调用）introduceBugs()。在这种情况下，introduceBugs()就被称之为回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeCode</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//执行一些任务</span></div><div class=\"line\">    callback();</div><div class=\"line\">    <span class=\"comment\">//.............</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduceBugs</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//....引入漏洞</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">writeCode(introduceBugs);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意writeCode()传递的introduceBugs，是不带括号的。带括号表示传递执行函数，不带括号表示传递引用。</p>\n</blockquote>\n<h4 id=\"回调与作用域\"><a href=\"#回调与作用域\" class=\"headerlink\" title=\"回调与作用域\"></a>回调与作用域</h4><p>回调并不是一次性的匿名函数或全局函数，而是对象的方法。如果该回调方法使用this来引用它所属的对象，这可能会导致意想不到的意外发生。</p>\n<p>假设回调函数是paint()，它是一个名为myapp的对象的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myapp = &#123;&#125;;</div><div class=\"line\">myapp.color = <span class=\"string\">\"green\"</span>;</div><div class=\"line\">myapp.paint = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</div><div class=\"line\">    node.style.color = <span class=\"keyword\">this</span>.color;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数findNodes()执行以下语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> findNodes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback == <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">        callback(found);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果调用findNodes(myapp.paint)，它并不会按照预期那样执行，这是由于this.color没有定义。由于findNodes()是一个全局函数，因此，对象this引用了全局对象。</p>\n<p>对于这个问题的解决方案就是传递回调函数的同事传递改回调函数所属的对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">findNodes(myapp.paint, myapp);</div></pre></td></tr></table></figure></p>\n<p>然后，还需要修改findNodes()以绑定所传入的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> findNodes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, callback_obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback == <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">        callback.call(callback_obj, found);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"异步事件监听器\"><a href=\"#异步事件监听器\" class=\"headerlink\" title=\"异步事件监听器\"></a>异步事件监听器</h4><p>回调模式有很多用途，比如，当附加一个事件监听器到页面上的一个元素时，实际上提供了一个回调函数指针，该函数将会在事件发生时被调用。</p>\n<pre><code>document.addEventListener(&quot;click&quot;, console.log, false);\n</code></pre><p>JavaScript特别适合用于事件驱动编程，因为回调模式支持您的程序以异步方式运行，也就是说，可以乱序运行。</p>\n<h4 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h4><p>如果创建了一个函数并且将其分配给保存了另外函数的同一个变量，那么就以一个新函数覆盖了旧函数。从某种程度上来说，回收了就函数指针以指向一个新函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scareMe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Boo!\"</span>)；</div><div class=\"line\">    scareMe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Double boo!\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用自定义函数</span></div><div class=\"line\">scareMe();<span class=\"comment\">// 输出Boo!</span></div><div class=\"line\">scareMe();<span class=\"comment\">// 输出Double boo!</span></div></pre></td></tr></table></figure>\n<p>当您的函数有一些初始化准备工作要做，并且仅需要执行一次，这种模式就非常有用。</p>\n<h4 id=\"即时函数\"><a href=\"#即时函数\" class=\"headerlink\" title=\"即时函数\"></a>即时函数</h4><p>即时函数试试一种可以支持在定义函数后立即执行该函数的语法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"watch out!\"</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>它为初始化代码提供了一个作用域沙箱，用以将所有代码包装到它的局部作用域中，且不会将任何变量泄露到全局作用域中。</p>\n<h4 id=\"即时对象初始化\"><a href=\"#即时对象初始化\" class=\"headerlink\" title=\"即时对象初始化\"></a>即时对象初始化</h4><p>保护全局作用域不受污染的另一种方法，类似于前面介绍的即时函数模式，也就是下面介绍的即时函数初始化，该方法在创建对象后会立即执行。init()函数需要负责所有的初始化任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&#123;</div><div class=\"line\">    <span class=\"comment\">//在这里可以定义设定值</span></div><div class=\"line\">    maxwidth: <span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">maxheight</span>: <span class=\"number\">400</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义方法</span></div><div class=\"line\">    gimmeMax: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.maxwidth + <span class=\"string\">\"x\"</span> + <span class=\"keyword\">this</span>.maxheight;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//初始化</span></div><div class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.gimmeMax());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).init();</div></pre></td></tr></table></figure>\n<p>优点：保护全局命名空间；使整个初始化过程显得更有结构化。</p>\n<blockquote>\n<p>注意：这种模式主要适用于一次性的任务，而且在init()完毕后也没有对改对象的访问。如果想在init()完毕后保存对该兑现的一个引用，可以通过在init()尾部添加<code>&quot;return this;&quot;</code>语句实现该功能。</p>\n</blockquote>\n<h4 id=\"初始化时分支\"><a href=\"#初始化时分支\" class=\"headerlink\" title=\"初始化时分支\"></a>初始化时分支</h4><p>初始化时分支（加载时分支）是一种优化模式。当知道某个条件在整个程序的生命周期内都不会发生改变的时候，仅对该条件测试一次是深有意义的。浏览器功能检测就是一个典型的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//优化之前</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = &#123;</div><div class=\"line\">    <span class=\"attr\">addListener</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.addEventListener === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            el.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span>.attachEvent === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            el.attachEvent(<span class=\"string\">\"on\"</span> + type, fn);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            el[<span class=\"string\">\"on\"</span> + type] = fn;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">removeListener</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//几乎一样</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此代码效率比较低下，每次在调用tuils.addListener()时，都将会重复地执行相同的检查，下面是使用初始化分支进行优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 接口</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = &#123;</div><div class=\"line\">    <span class=\"attr\">addListener</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"attr\">removeListener</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.addEventListener === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">    utils.addListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    utils.removeListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.removeListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span>.attachEvent === <span class=\"string\">\"function\"</span>) &#123; <span class=\"comment\">// 判断为IE浏览器</span></div><div class=\"line\">    utils.addListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.attachEvent(<span class=\"string\">\"on\"</span> + type, fn);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    utils.removeListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.detachEvent(<span class=\"string\">\"on\"</span> + type, fn);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 更早版本的浏览器</span></div><div class=\"line\">    utils.addListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el[<span class=\"string\">\"on\"</span> + type] = fn;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    utils.removeListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"函数属性——备忘模式\"><a href=\"#函数属性——备忘模式\" class=\"headerlink\" title=\"函数属性——备忘模式\"></a>函数属性——备忘模式</h4><p>函数是对象，因此他们具有属性。事实上，它们确实还有属性和方法。例如，对于每一个函数，无论使用什么样的语法来创建它，它都会自动获得一个length属性，其中包含了该函数期望的参数数量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">a, b, c</span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(func.length); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>可以在任何时候讲自定义属性添加到你的函数中。自动以舒心的其中一个用例是缓存函数结果，因此，在下一次调用就不用重做潜在的繁重计算。缓存函数结果也被称为备忘。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!myFunc.cache[param]) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">        <span class=\"comment\">// ..开销很大的操作</span></div><div class=\"line\">        myFunc.cache[param] = result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc.cache[param];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//缓存存储</span></div><div class=\"line\">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"配置对象\"><a href=\"#配置对象\" class=\"headerlink\" title=\"配置对象\"></a>配置对象</h4><p>在函数需要传递的参数很多时，可以使用一个对象包含所有参数再作为参数传递到函数中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> conf = &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">\"Boo\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">45</span></div><div class=\"line\">&#125;</div><div class=\"line\">addPerson(conf);</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>不需要记住众多的参数以及顺序；</li>\n<li>可以安全忽略可选参数；</li>\n<li>更加易于阅读和维护；</li>\n<li>更加易于添加和删除参数。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要记住参数名称；</li>\n<li>属性名称无法被压缩。</li>\n</ul>\n<h3 id=\"对象创建模式\"><a href=\"#对象创建模式\" class=\"headerlink\" title=\"对象创建模式\"></a>对象创建模式</h3><h4 id=\"命名空间模式\"><a href=\"#命名空间模式\" class=\"headerlink\" title=\"命名空间模式\"></a>命名空间模式</h4><p>命名空间有助于减少程序中所需的全局变量的数量，并且同时还有助于避免命名冲突或过长的名字前缀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 构造函数</span></div><div class=\"line\">MYAPP.Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">MYAPP.Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 一个变量</span></div><div class=\"line\">MYAPP.some_var = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">// 一个对象容器</span></div><div class=\"line\">MYAPP.modules = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 嵌套对象</span></div><div class=\"line\">MYAPP.modules.module1 = &#123;&#125;;</div><div class=\"line\">MYAPP.modules.module1.data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</div></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ul>\n<li>需要输入更多的字符串，每个变脸和函数迁都要附加前缀，总体上增加了需要下载的代码量。</li>\n<li>仅有一个全局实例意味着任何部分的代码都可以修改全局实例，并且其余的功能能够获得更新后的状态。</li>\n<li>长嵌套名字意味着更长的属性解析查询时间。</li>\n</ul>\n<p>接下来封装一个命名空间函数的创建方法，这个实现是非破坏性的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = MYAPP || &#123;&#125;;</div><div class=\"line\">MYAPP.namespace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ns_string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> parts = ns_string.split(<span class=\"string\">\".\"</span>),</div><div class=\"line\">        parent = MYAPP,</div><div class=\"line\">        i;</div><div class=\"line\">    <span class=\"comment\">// 剥离最前面的冗余全局变量</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (parent[<span class=\"number\">0</span>] === <span class=\"string\">\"MYAPP\"</span>) &#123;</div><div class=\"line\">        parts = parts.slice(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; parts.length; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果存在，就创建一个属性</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> parent[parts[i]] === <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">            parent[parts[i]] = &#123;&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        parent = parent[parts[i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> parent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将返回值赋给一个全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> module2 = MYAPP.namespace(<span class=\"string\">\"MYAPP.modules.module2\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"声明依赖关系\"><a href=\"#声明依赖关系\" class=\"headerlink\" title=\"声明依赖关系\"></a>声明依赖关系</h4><p>在函数顶部或模块顶部声明代码所以来的模块。</p>\n<h4 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h4><p>JavaScript并没有包（package）的特殊语法，但是模块模式提供了一种创建自包含非耦合代码片段的有力工具，可以将它视为黑盒模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">MYAPP.namespace(<span class=\"string\">\"MYAPP.utilities.array\"</span>);</div><div class=\"line\">MYAPP.utilities.array = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 依赖</span></div><div class=\"line\">    <span class=\"keyword\">var</span> uobj = MYAPP.utilities.object,</div><div class=\"line\">        ulang = MYAPP.utilities.lang,</div><div class=\"line\">        <span class=\"comment\">// 私有属性</span></div><div class=\"line\">        array_string = <span class=\"string\">\"[Object Array]\"</span>,</div><div class=\"line\">        ops = <span class=\"built_in\">Object</span>.prototype.toString;</div><div class=\"line\">    <span class=\"comment\">// 私有方法。。。。。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 公有API</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">inArray</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">needle, haystack</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, max = haystack.length; i &lt; max; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (haystack[i] === needle) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">isArray</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ops.call(a) === array_string;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h4 id=\"沙箱模式\"><a href=\"#沙箱模式\" class=\"headerlink\" title=\"沙箱模式\"></a>沙箱模式</h4><p>在沙箱模式中，可以使用全局构造函数创建对象并且还可以传递回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Sandbox(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">box</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 代码写在这里.....</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"实现构造函数\"><a href=\"#实现构造函数\" class=\"headerlink\" title=\"实现构造函数\"></a>实现构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SandBox</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 将参数转换成一个数组</span></div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>),</div><div class=\"line\">        <span class=\"comment\">// 最后一个参数是回调函数</span></div><div class=\"line\">        callback = args.pop(),</div><div class=\"line\">        <span class=\"comment\">// 模块可以作为一个数组传递，或作为单独的参数传递</span></div><div class=\"line\">        modules = (args[<span class=\"number\">0</span>] &amp;&amp; <span class=\"keyword\">typeof</span> args[<span class=\"number\">0</span>] === <span class=\"string\">\"string\"</span>) ? args : args[<span class=\"number\">0</span>],</div><div class=\"line\">        i;</div><div class=\"line\">    <span class=\"comment\">// 确保该函数作为构造函数被调用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> SandBox)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SandBox(modules, callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 需要向this添加属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"comment\">// 向this对象添加模块</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!modules || modules === <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">        modules = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> SandBox.modules) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (SandBox.modules.hasOwnProperty(i)) &#123;</div><div class=\"line\">                modules.push(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 初始化所需模块</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; modules.length; i++) &#123;</div><div class=\"line\">        SandBox.modules[modules[i]](<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 调用回调函数</span></div><div class=\"line\">    callback(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// 所需要的任何原型属性</span></div><div class=\"line\">    SandBox.prototype = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'My App'</span>,</div><div class=\"line\">        <span class=\"attr\">version</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码复用模式\"><a href=\"#代码复用模式\" class=\"headerlink\" title=\"代码复用模式\"></a>代码复用模式</h3><p>优先使用对象组合，而不是类继承。</p>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><p>单例模式的思想在于保证一个特定类仅有一个实例。这意味着当第二次使用同一个类创建新对象的时候，应该得到与第一次所创建的对象完全相同的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    myprop = <span class=\"string\">'my value'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">    myprop = <span class=\"string\">'my value'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">obj === obj2; <span class=\"comment\">// false</span></div><div class=\"line\">obj == obj2; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以认为每次在使用对象字面量创建对象的时候，实际上创建一个单例，并且不设计任何特殊语法。</p>\n</blockquote>\n<p>下面是通过使用闭包来实现单例模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Universe</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 缓存实例</span></div><div class=\"line\">    <span class=\"keyword\">var</span> instance;</div><div class=\"line\">    <span class=\"comment\">// 重写构造函数</span></div><div class=\"line\">    Universe.instance = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Universe</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 保留原型属性</span></div><div class=\"line\">    Universe.prototype = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// 实例</span></div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Universe();</div><div class=\"line\">    <span class=\"comment\">// 重置构造函数指针</span></div><div class=\"line\">    instance.contructor = Universe;</div><div class=\"line\">    <span class=\"comment\">// 所有功能</span></div><div class=\"line\">    instance.start_time = <span class=\"number\">0</span>;</div><div class=\"line\">    instance.bang = <span class=\"string\">'big'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p>设计工厂模式的目的是为了创建对象，它通常在类或者类的静态方法中实现，具有以下目标：</p>\n<ul>\n<li>当创建相似对象时执行重复操作；</li>\n<li>在编译时不知道具体类型（类）的情况下，为工厂客户提供一种创建对象的接口。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 父构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CarMaker</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 一个父方法</span></div><div class=\"line\">CarMaker.prototype.drive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Vroom, I have\"</span> + <span class=\"keyword\">this</span>.doors + +<span class=\"string\">\"doors\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></div><div class=\"line\">CarMaker.factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> constr = type,</div><div class=\"line\">            newcar;</div><div class=\"line\">        <span class=\"comment\">// 如果构造函数不存在，则发生错误</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> CarMaker[constr] !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">\"Error\"</span>,</div><div class=\"line\">                <span class=\"attr\">message</span>: constr + <span class=\"string\">\" doesn't exist\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 判断是否继承父类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> CarMaker[constr].prototype.drive !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            CarMaker[constr]..prototype = <span class=\"keyword\">new</span> CarMaker();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 创建一个新的实例</span></div><div class=\"line\">        newcar = <span class=\"keyword\">new</span> CarMaker[constr]();</div><div class=\"line\">        <span class=\"comment\">// 可选择性的调用一些方法然后返回。。。</span></div><div class=\"line\">        <span class=\"keyword\">return</span> newcar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 定义特定的汽车制造商</span></div><div class=\"line\">CarMaker.Compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doors = <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">CarMaker.Convertible = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doors = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">CarMaker.SUV = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doors = <span class=\"number\">24</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> corolla = Compact.factory(<span class=\"string\">'Compact'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在JavaScript中，内置的全局Object()构造函数是内置的对象工厂，根据输入类型而创建不同的对象。</p>\n</blockquote>\n<h4 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h4><p>在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能存储在一个复杂的数据结构中，对象的消费者并不需要知道如何组织数据，所有需要做的就是去除单个数据进行工作。</p>\n<p>在迭代器模式中，对象需要提供一个next()方法。依次调用next()必须返回下一个连续的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> agg = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>,</div><div class=\"line\">        data = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</div><div class=\"line\">        length = data.length;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">next</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> element;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasNext()) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            element = data[index];</div><div class=\"line\">            index = index + <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> element;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hasNext</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> index &lt; length;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h4 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h4><p>可以在运行时添加附件功能到对象中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sale</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.price = (price &gt; <span class=\"number\">0</span>) || <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.decorators_list = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Sale.decorators = &#123;&#125;;</div><div class=\"line\">Sale.decorators.fedtax = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price + price * <span class=\"number\">5</span> / <span class=\"number\">100</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.decorators.quebec = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price + price * <span class=\"number\">7.5</span> / <span class=\"number\">100</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.decorators.money = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"$\"</span> + price.toFixed(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.prototype.decorate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">decorators</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.decorators_list.push(decorator);</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.prototype.getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> price = <span class=\"keyword\">this</span>.price,</div><div class=\"line\">            i,</div><div class=\"line\">            max = <span class=\"keyword\">this</span>.decorators_list.length,</div><div class=\"line\">            name;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</div><div class=\"line\">            name = <span class=\"keyword\">this</span>.decorators_list[i];</div><div class=\"line\">            price = Sale.decorators[name].getPrice(price);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> price;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"keyword\">var</span> sale = <span class=\"keyword\">new</span> Sale(<span class=\"number\">100</span>); <span class=\"comment\">// 该价格为100美元</span></div><div class=\"line\">sale.decorate(<span class=\"string\">'fedtax'</span>); <span class=\"comment\">// 增加联邦税</span></div><div class=\"line\">sale.decorate(<span class=\"string\">'quebec'</span>); <span class=\"comment\">// 增加省联邦税</span></div><div class=\"line\">sale.decorate(<span class=\"string\">'money'</span>); <span class=\"comment\">// 格式化为美元格式</span></div><div class=\"line\">sale.getPrice(); <span class=\"comment\">// \"$112.88\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>策略模式支持您正在运行时选择算法。代码的客户端可以使用同一个接口来进行工作，但是它却根据客户正在试图执行任务的上下文，从多个算法中选择出用于处理特定任务的算法。</p>\n<p>使用策略模式的一个例子是解决表单验证的问题。无论表单的对象具体是什么，该方法都会被调用，并且总是返回相同的结果，一个未经验证的书列表以及任意的错误信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validator = &#123;</div><div class=\"line\">        <span class=\"comment\">// 所有可用的检查</span></div><div class=\"line\">        types: &#123;&#125;,</div><div class=\"line\">        <span class=\"comment\">// 在当前验证回话中的错误信息</span></div><div class=\"line\">        messages: [],</div><div class=\"line\">        <span class=\"comment\">// 当前验证配置 名称：验证类型</span></div><div class=\"line\">        conifg: &#123;&#125;,</div><div class=\"line\">        <span class=\"comment\">//接口方法</span></div><div class=\"line\">        validate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i, msg, type, checker, result_ok;</div><div class=\"line\">            <span class=\"comment\">// 重置所有消息</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.messages = [];</div><div class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (data.hasOwnProperty(i)) &#123;</div><div class=\"line\">                    type = <span class=\"keyword\">this</span>.types[type];</div><div class=\"line\">                    checker = <span class=\"keyword\">this</span>.types[type];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!type) &#123;</div><div class=\"line\">                        <span class=\"keyword\">continue</span>; <span class=\"comment\">// 不需要验证</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!checker) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                            <span class=\"attr\">name</span>: <span class=\"string\">\"ValidationError\"</span>,</div><div class=\"line\">                            <span class=\"attr\">message</span>: <span class=\"string\">\"No handler to validate type \"</span> + type;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    result_ok = checker.validate(data[i]);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!result_ok) &#123;</div><div class=\"line\">                        msg = <span class=\"string\">\"Invalid value for *\"</span> + i + <span class=\"string\">\"*, \"</span> + checker.instructions;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.messages.push(msg);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hasErrors();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">// 帮助操作</span></div><div class=\"line\">        hasErrors: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.messages.length !== <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 配置</span></div><div class=\"line\">validator.config = &#123;</div><div class=\"line\">        <span class=\"attr\">age</span>: <span class=\"string\">'isNumber'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 验证方法</span></div><div class=\"line\">validator.types.isNumber = &#123;</div><div class=\"line\">    <span class=\"attr\">validate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    instructions: <span class=\"string\">\"the value can only be a valid number, e.g. 1, 3.14 or 2010\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h4><p>外观模式为对象提供了一个可选择的接口，可保持方法的间接性并且不会使它们处理过多的工作。</p>\n<p>适用于处理浏览器脚本处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myevent = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    stop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 其他</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.preventDefault === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.stopPropagation === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            e.stopPropagation();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// IE浏览器</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.returnValue === <span class=\"string\">\"boolean\"</span>) &#123;</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.cancelBubble === <span class=\"string\">\"boolean\"</span>) &#123;</div><div class=\"line\">            e.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p>\n<p>所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。代理模式的思想是为了提供额外的处理或者不同的操作而在实际对象与调用者之间插入一个代理对象。这些额外的操作通常需要与实际对象进行通信。</p>\n<h4 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h4><p>中介者模式（Mediator），用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<p>软件开发中，中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。一般，如果系统有很多子模块需要直接沟通，都要创建一个中央控制点让其各模块通过该中央控制点进行交互。中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的。</p>\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/03/13/2374789.html\" target=\"_blank\" rel=\"external\">设计模式之中介者模式</a></p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>\n<p>使用观察者模式的好处：</p>\n<ol>\n<li>支持简单的广播通信，自动通知所有已经订阅过的对象。</li>\n<li>页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。</li>\n<li>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。</li>\n</ol>\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html\" target=\"_blank\" rel=\"external\">设计模式之观察者模式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JavaScript：基本概念\"><a href=\"#JavaScript：基本概念\" class=\"headerlink\" title=\"JavaScript：基本概念\"></a>JavaScript：基本概念</h3><h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>JavaScript是一门面向对象的语言。函数实际上也是对象，函数有属性和方法。</p>\n<p>对象主要有两种类型：</p>\n<p>1.原生的（Native）：在ECMAScript标准中有详细描述——内置对象和用户自定义对象。</p>\n<p>2.主机的（Host）：在主机环境中定义的（例如浏览器环境）——windows对象和所有的DOM对象。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>JavaScript中的函数有两个主要特点使其显得比较特殊。第一个特点在于函数是第一类对象，第二个特点是它们可以提供作用域。</p>\n<ol>\n<li>函数可以在运行时动态创建，还可以在程序执行过程中创建。</li>\n<li>函数可以分配给变量，可以将他们的引用复制到其他变量，可以被扩展，此外，除少数特殊情况外，函数可以被删除。</li>\n<li>可以作为参数传递给其他函数，并且还可以由其他函数返回。</li>\n<li>函数可以有自己的属性和方法。</li>\n</ol>\n<h4 id=\"回调模式\"><a href=\"#回调模式\" class=\"headerlink\" title=\"回调模式\"></a>回调模式</h4><p>函数都是对象，这表示它们可以作为参数传递给其他函数。当将函数introduceBugs()作为参数传递给函数writeCode()时，那么在某一时刻writeCode()可能会执行（或者调用）introduceBugs()。在这种情况下，introduceBugs()就被称之为回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeCode</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//执行一些任务</span></div><div class=\"line\">    callback();</div><div class=\"line\">    <span class=\"comment\">//.............</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduceBugs</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//....引入漏洞</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">writeCode(introduceBugs);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意writeCode()传递的introduceBugs，是不带括号的。带括号表示传递执行函数，不带括号表示传递引用。</p>\n</blockquote>\n<h4 id=\"回调与作用域\"><a href=\"#回调与作用域\" class=\"headerlink\" title=\"回调与作用域\"></a>回调与作用域</h4><p>回调并不是一次性的匿名函数或全局函数，而是对象的方法。如果该回调方法使用this来引用它所属的对象，这可能会导致意想不到的意外发生。</p>\n<p>假设回调函数是paint()，它是一个名为myapp的对象的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myapp = &#123;&#125;;</div><div class=\"line\">myapp.color = <span class=\"string\">\"green\"</span>;</div><div class=\"line\">myapp.paint = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</div><div class=\"line\">    node.style.color = <span class=\"keyword\">this</span>.color;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数findNodes()执行以下语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> findNodes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback == <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">        callback(found);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果调用findNodes(myapp.paint)，它并不会按照预期那样执行，这是由于this.color没有定义。由于findNodes()是一个全局函数，因此，对象this引用了全局对象。</p>\n<p>对于这个问题的解决方案就是传递回调函数的同事传递改回调函数所属的对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">findNodes(myapp.paint, myapp);</div></pre></td></tr></table></figure></p>\n<p>然后，还需要修改findNodes()以绑定所传入的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> findNodes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, callback_obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback == <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">        callback.call(callback_obj, found);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"异步事件监听器\"><a href=\"#异步事件监听器\" class=\"headerlink\" title=\"异步事件监听器\"></a>异步事件监听器</h4><p>回调模式有很多用途，比如，当附加一个事件监听器到页面上的一个元素时，实际上提供了一个回调函数指针，该函数将会在事件发生时被调用。</p>\n<pre><code>document.addEventListener(&quot;click&quot;, console.log, false);\n</code></pre><p>JavaScript特别适合用于事件驱动编程，因为回调模式支持您的程序以异步方式运行，也就是说，可以乱序运行。</p>\n<h4 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h4><p>如果创建了一个函数并且将其分配给保存了另外函数的同一个变量，那么就以一个新函数覆盖了旧函数。从某种程度上来说，回收了就函数指针以指向一个新函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scareMe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Boo!\"</span>)；</div><div class=\"line\">    scareMe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Double boo!\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用自定义函数</span></div><div class=\"line\">scareMe();<span class=\"comment\">// 输出Boo!</span></div><div class=\"line\">scareMe();<span class=\"comment\">// 输出Double boo!</span></div></pre></td></tr></table></figure>\n<p>当您的函数有一些初始化准备工作要做，并且仅需要执行一次，这种模式就非常有用。</p>\n<h4 id=\"即时函数\"><a href=\"#即时函数\" class=\"headerlink\" title=\"即时函数\"></a>即时函数</h4><p>即时函数试试一种可以支持在定义函数后立即执行该函数的语法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"watch out!\"</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>它为初始化代码提供了一个作用域沙箱，用以将所有代码包装到它的局部作用域中，且不会将任何变量泄露到全局作用域中。</p>\n<h4 id=\"即时对象初始化\"><a href=\"#即时对象初始化\" class=\"headerlink\" title=\"即时对象初始化\"></a>即时对象初始化</h4><p>保护全局作用域不受污染的另一种方法，类似于前面介绍的即时函数模式，也就是下面介绍的即时函数初始化，该方法在创建对象后会立即执行。init()函数需要负责所有的初始化任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&#123;</div><div class=\"line\">    <span class=\"comment\">//在这里可以定义设定值</span></div><div class=\"line\">    maxwidth: <span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">maxheight</span>: <span class=\"number\">400</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义方法</span></div><div class=\"line\">    gimmeMax: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.maxwidth + <span class=\"string\">\"x\"</span> + <span class=\"keyword\">this</span>.maxheight;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//初始化</span></div><div class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.gimmeMax());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).init();</div></pre></td></tr></table></figure>\n<p>优点：保护全局命名空间；使整个初始化过程显得更有结构化。</p>\n<blockquote>\n<p>注意：这种模式主要适用于一次性的任务，而且在init()完毕后也没有对改对象的访问。如果想在init()完毕后保存对该兑现的一个引用，可以通过在init()尾部添加<code>&quot;return this;&quot;</code>语句实现该功能。</p>\n</blockquote>\n<h4 id=\"初始化时分支\"><a href=\"#初始化时分支\" class=\"headerlink\" title=\"初始化时分支\"></a>初始化时分支</h4><p>初始化时分支（加载时分支）是一种优化模式。当知道某个条件在整个程序的生命周期内都不会发生改变的时候，仅对该条件测试一次是深有意义的。浏览器功能检测就是一个典型的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//优化之前</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = &#123;</div><div class=\"line\">    <span class=\"attr\">addListener</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.addEventListener === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            el.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span>.attachEvent === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            el.attachEvent(<span class=\"string\">\"on\"</span> + type, fn);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            el[<span class=\"string\">\"on\"</span> + type] = fn;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">removeListener</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//几乎一样</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此代码效率比较低下，每次在调用tuils.addListener()时，都将会重复地执行相同的检查，下面是使用初始化分支进行优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 接口</span></div><div class=\"line\"><span class=\"keyword\">var</span> utils = &#123;</div><div class=\"line\">    <span class=\"attr\">addListener</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"attr\">removeListener</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.addEventListener === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">    utils.addListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    utils.removeListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.removeListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">document</span>.attachEvent === <span class=\"string\">\"function\"</span>) &#123; <span class=\"comment\">// 判断为IE浏览器</span></div><div class=\"line\">    utils.addListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.attachEvent(<span class=\"string\">\"on\"</span> + type, fn);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    utils.removeListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el.detachEvent(<span class=\"string\">\"on\"</span> + type, fn);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 更早版本的浏览器</span></div><div class=\"line\">    utils.addListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el[<span class=\"string\">\"on\"</span> + type] = fn;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    utils.removeListener = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">        el[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"函数属性——备忘模式\"><a href=\"#函数属性——备忘模式\" class=\"headerlink\" title=\"函数属性——备忘模式\"></a>函数属性——备忘模式</h4><p>函数是对象，因此他们具有属性。事实上，它们确实还有属性和方法。例如，对于每一个函数，无论使用什么样的语法来创建它，它都会自动获得一个length属性，其中包含了该函数期望的参数数量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">a, b, c</span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(func.length); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>可以在任何时候讲自定义属性添加到你的函数中。自动以舒心的其中一个用例是缓存函数结果，因此，在下一次调用就不用重做潜在的繁重计算。缓存函数结果也被称为备忘。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!myFunc.cache[param]) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">        <span class=\"comment\">// ..开销很大的操作</span></div><div class=\"line\">        myFunc.cache[param] = result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc.cache[param];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//缓存存储</span></div><div class=\"line\">myFunc.cache = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"配置对象\"><a href=\"#配置对象\" class=\"headerlink\" title=\"配置对象\"></a>配置对象</h4><p>在函数需要传递的参数很多时，可以使用一个对象包含所有参数再作为参数传递到函数中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> conf = &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">\"Boo\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">45</span></div><div class=\"line\">&#125;</div><div class=\"line\">addPerson(conf);</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>不需要记住众多的参数以及顺序；</li>\n<li>可以安全忽略可选参数；</li>\n<li>更加易于阅读和维护；</li>\n<li>更加易于添加和删除参数。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要记住参数名称；</li>\n<li>属性名称无法被压缩。</li>\n</ul>\n<h3 id=\"对象创建模式\"><a href=\"#对象创建模式\" class=\"headerlink\" title=\"对象创建模式\"></a>对象创建模式</h3><h4 id=\"命名空间模式\"><a href=\"#命名空间模式\" class=\"headerlink\" title=\"命名空间模式\"></a>命名空间模式</h4><p>命名空间有助于减少程序中所需的全局变量的数量，并且同时还有助于避免命名冲突或过长的名字前缀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 构造函数</span></div><div class=\"line\">MYAPP.Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">MYAPP.Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 一个变量</span></div><div class=\"line\">MYAPP.some_var = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">// 一个对象容器</span></div><div class=\"line\">MYAPP.modules = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 嵌套对象</span></div><div class=\"line\">MYAPP.modules.module1 = &#123;&#125;;</div><div class=\"line\">MYAPP.modules.module1.data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;</div></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ul>\n<li>需要输入更多的字符串，每个变脸和函数迁都要附加前缀，总体上增加了需要下载的代码量。</li>\n<li>仅有一个全局实例意味着任何部分的代码都可以修改全局实例，并且其余的功能能够获得更新后的状态。</li>\n<li>长嵌套名字意味着更长的属性解析查询时间。</li>\n</ul>\n<p>接下来封装一个命名空间函数的创建方法，这个实现是非破坏性的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = MYAPP || &#123;&#125;;</div><div class=\"line\">MYAPP.namespace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ns_string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> parts = ns_string.split(<span class=\"string\">\".\"</span>),</div><div class=\"line\">        parent = MYAPP,</div><div class=\"line\">        i;</div><div class=\"line\">    <span class=\"comment\">// 剥离最前面的冗余全局变量</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (parent[<span class=\"number\">0</span>] === <span class=\"string\">\"MYAPP\"</span>) &#123;</div><div class=\"line\">        parts = parts.slice(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; parts.length; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果存在，就创建一个属性</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> parent[parts[i]] === <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">            parent[parts[i]] = &#123;&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        parent = parent[parts[i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> parent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将返回值赋给一个全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> module2 = MYAPP.namespace(<span class=\"string\">\"MYAPP.modules.module2\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"声明依赖关系\"><a href=\"#声明依赖关系\" class=\"headerlink\" title=\"声明依赖关系\"></a>声明依赖关系</h4><p>在函数顶部或模块顶部声明代码所以来的模块。</p>\n<h4 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h4><p>JavaScript并没有包（package）的特殊语法，但是模块模式提供了一种创建自包含非耦合代码片段的有力工具，可以将它视为黑盒模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">MYAPP.namespace(<span class=\"string\">\"MYAPP.utilities.array\"</span>);</div><div class=\"line\">MYAPP.utilities.array = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 依赖</span></div><div class=\"line\">    <span class=\"keyword\">var</span> uobj = MYAPP.utilities.object,</div><div class=\"line\">        ulang = MYAPP.utilities.lang,</div><div class=\"line\">        <span class=\"comment\">// 私有属性</span></div><div class=\"line\">        array_string = <span class=\"string\">\"[Object Array]\"</span>,</div><div class=\"line\">        ops = <span class=\"built_in\">Object</span>.prototype.toString;</div><div class=\"line\">    <span class=\"comment\">// 私有方法。。。。。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 公有API</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">inArray</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">needle, haystack</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, max = haystack.length; i &lt; max; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (haystack[i] === needle) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">isArray</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ops.call(a) === array_string;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h4 id=\"沙箱模式\"><a href=\"#沙箱模式\" class=\"headerlink\" title=\"沙箱模式\"></a>沙箱模式</h4><p>在沙箱模式中，可以使用全局构造函数创建对象并且还可以传递回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Sandbox(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">box</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 代码写在这里.....</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"实现构造函数\"><a href=\"#实现构造函数\" class=\"headerlink\" title=\"实现构造函数\"></a>实现构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SandBox</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 将参数转换成一个数组</span></div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>),</div><div class=\"line\">        <span class=\"comment\">// 最后一个参数是回调函数</span></div><div class=\"line\">        callback = args.pop(),</div><div class=\"line\">        <span class=\"comment\">// 模块可以作为一个数组传递，或作为单独的参数传递</span></div><div class=\"line\">        modules = (args[<span class=\"number\">0</span>] &amp;&amp; <span class=\"keyword\">typeof</span> args[<span class=\"number\">0</span>] === <span class=\"string\">\"string\"</span>) ? args : args[<span class=\"number\">0</span>],</div><div class=\"line\">        i;</div><div class=\"line\">    <span class=\"comment\">// 确保该函数作为构造函数被调用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> SandBox)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SandBox(modules, callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 需要向this添加属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"comment\">// 向this对象添加模块</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!modules || modules === <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">        modules = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> SandBox.modules) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (SandBox.modules.hasOwnProperty(i)) &#123;</div><div class=\"line\">                modules.push(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 初始化所需模块</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; modules.length; i++) &#123;</div><div class=\"line\">        SandBox.modules[modules[i]](<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 调用回调函数</span></div><div class=\"line\">    callback(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// 所需要的任何原型属性</span></div><div class=\"line\">    SandBox.prototype = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'My App'</span>,</div><div class=\"line\">        <span class=\"attr\">version</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码复用模式\"><a href=\"#代码复用模式\" class=\"headerlink\" title=\"代码复用模式\"></a>代码复用模式</h3><p>优先使用对象组合，而不是类继承。</p>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><p>单例模式的思想在于保证一个特定类仅有一个实例。这意味着当第二次使用同一个类创建新对象的时候，应该得到与第一次所创建的对象完全相同的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    myprop = <span class=\"string\">'my value'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">    myprop = <span class=\"string\">'my value'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">obj === obj2; <span class=\"comment\">// false</span></div><div class=\"line\">obj == obj2; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以认为每次在使用对象字面量创建对象的时候，实际上创建一个单例，并且不设计任何特殊语法。</p>\n</blockquote>\n<p>下面是通过使用闭包来实现单例模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Universe</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 缓存实例</span></div><div class=\"line\">    <span class=\"keyword\">var</span> instance;</div><div class=\"line\">    <span class=\"comment\">// 重写构造函数</span></div><div class=\"line\">    Universe.instance = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Universe</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 保留原型属性</span></div><div class=\"line\">    Universe.prototype = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"comment\">// 实例</span></div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Universe();</div><div class=\"line\">    <span class=\"comment\">// 重置构造函数指针</span></div><div class=\"line\">    instance.contructor = Universe;</div><div class=\"line\">    <span class=\"comment\">// 所有功能</span></div><div class=\"line\">    instance.start_time = <span class=\"number\">0</span>;</div><div class=\"line\">    instance.bang = <span class=\"string\">'big'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p>设计工厂模式的目的是为了创建对象，它通常在类或者类的静态方法中实现，具有以下目标：</p>\n<ul>\n<li>当创建相似对象时执行重复操作；</li>\n<li>在编译时不知道具体类型（类）的情况下，为工厂客户提供一种创建对象的接口。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 父构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CarMaker</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 一个父方法</span></div><div class=\"line\">CarMaker.prototype.drive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Vroom, I have\"</span> + <span class=\"keyword\">this</span>.doors + +<span class=\"string\">\"doors\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 静态工厂方法</span></div><div class=\"line\">CarMaker.factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> constr = type,</div><div class=\"line\">            newcar;</div><div class=\"line\">        <span class=\"comment\">// 如果构造函数不存在，则发生错误</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> CarMaker[constr] !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">\"Error\"</span>,</div><div class=\"line\">                <span class=\"attr\">message</span>: constr + <span class=\"string\">\" doesn't exist\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 判断是否继承父类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> CarMaker[constr].prototype.drive !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            CarMaker[constr]..prototype = <span class=\"keyword\">new</span> CarMaker();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 创建一个新的实例</span></div><div class=\"line\">        newcar = <span class=\"keyword\">new</span> CarMaker[constr]();</div><div class=\"line\">        <span class=\"comment\">// 可选择性的调用一些方法然后返回。。。</span></div><div class=\"line\">        <span class=\"keyword\">return</span> newcar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 定义特定的汽车制造商</span></div><div class=\"line\">CarMaker.Compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doors = <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">CarMaker.Convertible = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doors = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">CarMaker.SUV = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doors = <span class=\"number\">24</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> corolla = Compact.factory(<span class=\"string\">'Compact'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在JavaScript中，内置的全局Object()构造函数是内置的对象工厂，根据输入类型而创建不同的对象。</p>\n</blockquote>\n<h4 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h4><p>在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能存储在一个复杂的数据结构中，对象的消费者并不需要知道如何组织数据，所有需要做的就是去除单个数据进行工作。</p>\n<p>在迭代器模式中，对象需要提供一个next()方法。依次调用next()必须返回下一个连续的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> agg = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>,</div><div class=\"line\">        data = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</div><div class=\"line\">        length = data.length;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">next</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> element;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasNext()) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            element = data[index];</div><div class=\"line\">            index = index + <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> element;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hasNext</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> index &lt; length;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h4 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h4><p>可以在运行时添加附件功能到对象中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sale</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.price = (price &gt; <span class=\"number\">0</span>) || <span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.decorators_list = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Sale.decorators = &#123;&#125;;</div><div class=\"line\">Sale.decorators.fedtax = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price + price * <span class=\"number\">5</span> / <span class=\"number\">100</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.decorators.quebec = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> price + price * <span class=\"number\">7.5</span> / <span class=\"number\">100</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.decorators.money = &#123;</div><div class=\"line\">    <span class=\"attr\">getPrice</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"$\"</span> + price.toFixed(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.prototype.decorate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">decorators</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.decorators_list.push(decorator);</div><div class=\"line\">&#125;;</div><div class=\"line\">Sale.prototype.getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> price = <span class=\"keyword\">this</span>.price,</div><div class=\"line\">            i,</div><div class=\"line\">            max = <span class=\"keyword\">this</span>.decorators_list.length,</div><div class=\"line\">            name;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</div><div class=\"line\">            name = <span class=\"keyword\">this</span>.decorators_list[i];</div><div class=\"line\">            price = Sale.decorators[name].getPrice(price);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> price;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"keyword\">var</span> sale = <span class=\"keyword\">new</span> Sale(<span class=\"number\">100</span>); <span class=\"comment\">// 该价格为100美元</span></div><div class=\"line\">sale.decorate(<span class=\"string\">'fedtax'</span>); <span class=\"comment\">// 增加联邦税</span></div><div class=\"line\">sale.decorate(<span class=\"string\">'quebec'</span>); <span class=\"comment\">// 增加省联邦税</span></div><div class=\"line\">sale.decorate(<span class=\"string\">'money'</span>); <span class=\"comment\">// 格式化为美元格式</span></div><div class=\"line\">sale.getPrice(); <span class=\"comment\">// \"$112.88\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>策略模式支持您正在运行时选择算法。代码的客户端可以使用同一个接口来进行工作，但是它却根据客户正在试图执行任务的上下文，从多个算法中选择出用于处理特定任务的算法。</p>\n<p>使用策略模式的一个例子是解决表单验证的问题。无论表单的对象具体是什么，该方法都会被调用，并且总是返回相同的结果，一个未经验证的书列表以及任意的错误信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validator = &#123;</div><div class=\"line\">        <span class=\"comment\">// 所有可用的检查</span></div><div class=\"line\">        types: &#123;&#125;,</div><div class=\"line\">        <span class=\"comment\">// 在当前验证回话中的错误信息</span></div><div class=\"line\">        messages: [],</div><div class=\"line\">        <span class=\"comment\">// 当前验证配置 名称：验证类型</span></div><div class=\"line\">        conifg: &#123;&#125;,</div><div class=\"line\">        <span class=\"comment\">//接口方法</span></div><div class=\"line\">        validate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i, msg, type, checker, result_ok;</div><div class=\"line\">            <span class=\"comment\">// 重置所有消息</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.messages = [];</div><div class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (data.hasOwnProperty(i)) &#123;</div><div class=\"line\">                    type = <span class=\"keyword\">this</span>.types[type];</div><div class=\"line\">                    checker = <span class=\"keyword\">this</span>.types[type];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!type) &#123;</div><div class=\"line\">                        <span class=\"keyword\">continue</span>; <span class=\"comment\">// 不需要验证</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!checker) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                            <span class=\"attr\">name</span>: <span class=\"string\">\"ValidationError\"</span>,</div><div class=\"line\">                            <span class=\"attr\">message</span>: <span class=\"string\">\"No handler to validate type \"</span> + type;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    result_ok = checker.validate(data[i]);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!result_ok) &#123;</div><div class=\"line\">                        msg = <span class=\"string\">\"Invalid value for *\"</span> + i + <span class=\"string\">\"*, \"</span> + checker.instructions;</div><div class=\"line\">                        <span class=\"keyword\">this</span>.messages.push(msg);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hasErrors();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">// 帮助操作</span></div><div class=\"line\">        hasErrors: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.messages.length !== <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 配置</span></div><div class=\"line\">validator.config = &#123;</div><div class=\"line\">        <span class=\"attr\">age</span>: <span class=\"string\">'isNumber'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 验证方法</span></div><div class=\"line\">validator.types.isNumber = &#123;</div><div class=\"line\">    <span class=\"attr\">validate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    instructions: <span class=\"string\">\"the value can only be a valid number, e.g. 1, 3.14 or 2010\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h4><p>外观模式为对象提供了一个可选择的接口，可保持方法的间接性并且不会使它们处理过多的工作。</p>\n<p>适用于处理浏览器脚本处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myevent = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    stop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 其他</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.preventDefault === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.stopPropagation === <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">            e.stopPropagation();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// IE浏览器</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.returnValue === <span class=\"string\">\"boolean\"</span>) &#123;</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e.cancelBubble === <span class=\"string\">\"boolean\"</span>) &#123;</div><div class=\"line\">            e.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p>\n<p>所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。代理模式的思想是为了提供额外的处理或者不同的操作而在实际对象与调用者之间插入一个代理对象。这些额外的操作通常需要与实际对象进行通信。</p>\n<h4 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h4><p>中介者模式（Mediator），用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<p>软件开发中，中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。一般，如果系统有很多子模块需要直接沟通，都要创建一个中央控制点让其各模块通过该中央控制点进行交互。中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的。</p>\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/03/13/2374789.html\">设计模式之中介者模式</a></p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>\n<p>使用观察者模式的好处：</p>\n<ol>\n<li>支持简单的广播通信，自动通知所有已经订阅过的对象。</li>\n<li>页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。</li>\n<li>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。</li>\n</ol>\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html\">设计模式之观察者模式</a></p>\n"},{"layout":"post","title":"高性能javascript","date":"2016-03-07T16:00:00.000Z","description":"当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的...","author":"Gemicat","_content":"\n### 1.加载和运行\n\n#### 1.1脚本位置\n\n当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的。\n\n如果把脚本的加载放到 head 标签中，那么浏览器会优先加载 script 脚本，第一个js文件下载并运行完成后才开始第二个js文件的加载。现在的浏览器都允许并行加载js文件，但并没有解决根本性的问题，因此，最好的解决方法就是：\n\n> 将javscript脚本放在底部\n\n#### 1.2成组脚本\n\n减少js脚本数量，减少http请求，最好将js压缩合并。\n\n#### 1.3非阻塞脚本\n\n意思就是等页面加载完成之后在加载js代码。\n\n1.延期脚本\n\n使用 script 的扩展属性 defer，作用是告知浏览器当前 js 脚本没有操作dom，因此代码可以稍后执行，但是缺点是只支持ie和ff。\n\n2.动态脚本元素\n\n使用 script 操作dom来动态加载js，这样，无论在何处下载，都不会阻塞页面的其他进程。\n\n```javascript\nfunction loadScript(url, callback){\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    if(script.readyState){  //IE下\n        script.onreadystatechange = function(){\n            if(script.readyState == 'loaded' || script.readyState == 'complete'){\n                script.onreadystatechange = null;\n                callback();\n            }\n        }\n    }else{ //其他浏览器\n        script.onload = function(){\n            callback();\n        }\n    }\n\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n```\n\n3.XHR脚本注入\n\n使用XMLHttpRequest()对象来请求所需要加载的脚本，请求成功后动态添加到页面。最主要的限制是不能跨域，只能在同一个域中。正因为这个原因，大型网站通常不用XHR脚本注入技术。\n\n### 2.数据访问\n\n数据存储在哪里，关系到代码运行期间数据被检索到的速度，在javascript中有四种基本的数据访问位置。\n\n1.直接量:直接量仅代表自己，包括：字符串，数字，布尔值，对象，数组，函数，正则表达式，null，undefined。\n\n2.变量:使用var创建用于存储数据值。\n\n3.数组项:具有数字索引，存储一个js数组对象。\n\n4.对象成员:具有字符索引，存储一个js对象。\n\n#### 2.1管理作用域\n\n对所有浏览器来说，一个标识符所在的位置越深，读写他的速度就越慢，在没有优化的js引擎中，最好尽可能使用局部变量，或用局部变量存储全局变量从而减少访问全局变量的次数。\n\n> 尽可能不使用with()，小心使用try-catch\n\n### 3.DOM编程\n\ndom操作的代价非常昂贵，通常是一个网页的性能瓶颈。\n\n1.在页面大量添加或修改DOM节点时，最好将所有的节点保存起来，最后再添加到页面上。\n\n>innerHTML和DOM操作的性能差别不大，区别是innerHTML在旧版本浏览器效率高，而DOM操作在新版浏览器效率高。具体选择哪一个要根据你所在团队的编码风格和你的编码习惯来看。\n\n2.如果同一个DOM属性或方法被访问一次以上，最好使用一个局部变量来缓存次DOM成员。\n\n3.在获取元素节点时，nextSibling和childNode在不同浏览器上运行时间基本相等，但是，在老的IE中，nextSibling要快的多。\n\n4.在新版本浏览器中，使用querySelectorAll()和firstElementChild()的效率更加高。\n\n```javascript\n// 将class为warning和notice的div选择出来\ndocument.querySelectorAll('div.warning,div.notice');\n```\n\n5.在IE中，大量使用:hover这个伪选择器会降低反应速度。\n\n6.使用时间委托（事件逐层冒泡总能被父元素捕获）。\n\n### 4.算法和流程控制\n\n代码整体结构是执行速度的决定因素之一。代码量少不一定运行速度快，代码量多也不一定运行速度慢。性能损失与代码组织方式和具体问题解决办法直接相关。\n\n#### 4.1循环\n\nfor,while,do-while的性能特性相似，但是for-in的效率较慢。\n\n1.要尽可能减少迭代的次数，使用达夫循环。\n\n```javascript\n// 每次循环中最多8次调用process()函数，循环次数为元素综合/8.\n// startAt存放余数,指出第一次循环的次数。\nvar interations = Math.floor(items.length / 8);\nvar startAt = items.length % 8;\nvar i = 0;\ndo {\n    switch (startAt) {\n        case 0:\n            process(items[i++]);\n        case 7:\n            process(items[i++]);\n        case 6:\n            process(items[i++]);\n        case 5:\n            process(items[i++]);\n        case 4:\n            process(items[i++]);\n        case 3:\n            process(items[i++]);\n        case 2:\n            process(items[i++]);\n        case 1:\n            process(items[i++]);\n    }\n    startAt = 0;\n} while (--interations);\n```\n\n下面是优化版本，将余数处理和主循环分开：\n\n```javascript\nvar i = items.length % 8;\nwhile (i) {\n    process(items[i--]);\n}\ni = Math.floor(items.length / 8);\nwhile (i) {\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n}\n```\n\n2.基于函数的迭代——forEach()，虽然比较便利，但是比起基于循环的迭代还是要慢一些。\n\n#### 4.2递归\n\n1.浏览器的调用栈尺寸限制了递归算法在JavaScript中的应用：栈溢出错误导致其他代码也不能执行。\n\n2.运行的代码总量越大，使用这些策略带来的提升就越明显。\n\n### 5.字符串和正则表达式\n\n#### 5.1字符串连接\n\n1.在拼接字符串时，使用str = str + 'one' + 'two'，如果在一个循环中，基本字符串位于最左端，就可以避免多次复制一个越来越大的基本字符串。\n\n2.使用数组辅助生成字符串：\n\n```javascript\nwhile (appends--) {\n    strs[strs.length] = str;\n}\nnewStr = strs.join('');\n```\n\n3.大多情况下，concat比 +和+= 要慢。\n\n#### 5.2正则表达式优化\n\n1.正则表达式的工作原理\n\n第一步：编译\n\n当创建一个正则表达式对象之后，浏览器检查模板有没有错误，然后将它转换成一个本机代码用于匹配工作。\n\n第二步：设置起始位置\n\n确定目标字符串中开始搜索的位置，但当匹配失败时，此位置将位于最后一次尝试起始位置退后的一个字符的位置上。\n\n第三步：匹配每个正则表达式的子元\n\n正则表达式一旦找好起始位置，将一个一个地扫描目标文本和正则表达式模板。当一个特定子元匹配失败时，正则表达式将试图回溯到扫描之前的位置上，然后进入正则表达式其他可能的路径上。\n\n第四步：匹配成功或失败\n\n2.理解回溯\n\n[理解回溯(来自博客园)](http://www.cnblogs.com/aaronjs/archive/2012/06/30/2570805.html)\n\n回溯即时正则表达式匹配功能基本的组成部分，又是正则表达式影响效率的常见原因。\n\n回溯失控发生在正则表达式本应该很快发现匹配的地方，因为某些特殊的匹配夫妇串动作，导致运行缓慢甚至浏览器崩溃。避免此问题的技术包括：使相邻子元互斥，避免嵌套量词对一个字符串的相同部分多次匹配，通过重复利用前瞻操作的院子特性去除不必要的回溯。\n\n### 6.响应接口\n\n总的来说，大多数浏览器有一个单独的处理进程，它由两个任务所共享：JavaScript任务和用户界面更新任务。每个时刻只有其中的一个操作得以执行，也就是说当JavaScript代码运行时用户界面不能对输入产生反应，反之亦然。或者说，当JavaScript运行时，用户界面就被‘锁定’了。\n\n1.JavaScript运行时间不应该超过100毫秒，过长的运行时间导致UI更新出现可察觉的延迟，从而对整体用户体验产生负面影响。\n\n2.定时器可用于安排代码推迟执行，它使得你可以将长运行脚本分解成一系列较小的任务。\n\n```javascript\n/**\n    - 封装的使用定时器运行程序\n    - @param  {items}  事件数组\n    - @param  {process}  事件\n    - @param  {callback}   回调方法\n    */\nfunction processArray(items, process, callback) {\n    var todo = items.concat();\n    setTimeout(function() {\n        process(todo.shift());\n        if (todo.length > 0) {\n            setTimeout(arguments.callee, 25);\n        } else {\n            callback(items);\n        }\n    }, 25);\n}\n\n//调用\nvar items = [123, 789, 323, 232, 778, 654, 543];\nfunction outputVal(val) {\n    console.log(val);\n}\nprocessArray(items, outputVal, function() {\n    console.log('Done!');\n});\n```\n\n3.网页应用越来越复杂，积极主动地管理UI现成就越显得重要。没有什么JavaScript代码可以重要到允许影响到用户体验的程度。\n\n### 7.Ajax异步JavaScript和XML\n\nAjax是高性能JavaScript的基石，它可以通过延迟下载大量资源使页面加载更快。\n\n>在选在ajax传输的数据格式时，最好选用较轻便的json。\n\n\n\n\n\n","source":"_posts/2016-03-08-high_js-javascrip.md","raw":"---\nlayout: post\ntitle: 高性能javascript\ndate: 2016-03-08\ncategories: javascript\ntags: [javascript]\ndescription: 当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的...\nauthor: \"Gemicat\"\n---\n\n### 1.加载和运行\n\n#### 1.1脚本位置\n\n当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的。\n\n如果把脚本的加载放到 head 标签中，那么浏览器会优先加载 script 脚本，第一个js文件下载并运行完成后才开始第二个js文件的加载。现在的浏览器都允许并行加载js文件，但并没有解决根本性的问题，因此，最好的解决方法就是：\n\n> 将javscript脚本放在底部\n\n#### 1.2成组脚本\n\n减少js脚本数量，减少http请求，最好将js压缩合并。\n\n#### 1.3非阻塞脚本\n\n意思就是等页面加载完成之后在加载js代码。\n\n1.延期脚本\n\n使用 script 的扩展属性 defer，作用是告知浏览器当前 js 脚本没有操作dom，因此代码可以稍后执行，但是缺点是只支持ie和ff。\n\n2.动态脚本元素\n\n使用 script 操作dom来动态加载js，这样，无论在何处下载，都不会阻塞页面的其他进程。\n\n```javascript\nfunction loadScript(url, callback){\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    if(script.readyState){  //IE下\n        script.onreadystatechange = function(){\n            if(script.readyState == 'loaded' || script.readyState == 'complete'){\n                script.onreadystatechange = null;\n                callback();\n            }\n        }\n    }else{ //其他浏览器\n        script.onload = function(){\n            callback();\n        }\n    }\n\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n```\n\n3.XHR脚本注入\n\n使用XMLHttpRequest()对象来请求所需要加载的脚本，请求成功后动态添加到页面。最主要的限制是不能跨域，只能在同一个域中。正因为这个原因，大型网站通常不用XHR脚本注入技术。\n\n### 2.数据访问\n\n数据存储在哪里，关系到代码运行期间数据被检索到的速度，在javascript中有四种基本的数据访问位置。\n\n1.直接量:直接量仅代表自己，包括：字符串，数字，布尔值，对象，数组，函数，正则表达式，null，undefined。\n\n2.变量:使用var创建用于存储数据值。\n\n3.数组项:具有数字索引，存储一个js数组对象。\n\n4.对象成员:具有字符索引，存储一个js对象。\n\n#### 2.1管理作用域\n\n对所有浏览器来说，一个标识符所在的位置越深，读写他的速度就越慢，在没有优化的js引擎中，最好尽可能使用局部变量，或用局部变量存储全局变量从而减少访问全局变量的次数。\n\n> 尽可能不使用with()，小心使用try-catch\n\n### 3.DOM编程\n\ndom操作的代价非常昂贵，通常是一个网页的性能瓶颈。\n\n1.在页面大量添加或修改DOM节点时，最好将所有的节点保存起来，最后再添加到页面上。\n\n>innerHTML和DOM操作的性能差别不大，区别是innerHTML在旧版本浏览器效率高，而DOM操作在新版浏览器效率高。具体选择哪一个要根据你所在团队的编码风格和你的编码习惯来看。\n\n2.如果同一个DOM属性或方法被访问一次以上，最好使用一个局部变量来缓存次DOM成员。\n\n3.在获取元素节点时，nextSibling和childNode在不同浏览器上运行时间基本相等，但是，在老的IE中，nextSibling要快的多。\n\n4.在新版本浏览器中，使用querySelectorAll()和firstElementChild()的效率更加高。\n\n```javascript\n// 将class为warning和notice的div选择出来\ndocument.querySelectorAll('div.warning,div.notice');\n```\n\n5.在IE中，大量使用:hover这个伪选择器会降低反应速度。\n\n6.使用时间委托（事件逐层冒泡总能被父元素捕获）。\n\n### 4.算法和流程控制\n\n代码整体结构是执行速度的决定因素之一。代码量少不一定运行速度快，代码量多也不一定运行速度慢。性能损失与代码组织方式和具体问题解决办法直接相关。\n\n#### 4.1循环\n\nfor,while,do-while的性能特性相似，但是for-in的效率较慢。\n\n1.要尽可能减少迭代的次数，使用达夫循环。\n\n```javascript\n// 每次循环中最多8次调用process()函数，循环次数为元素综合/8.\n// startAt存放余数,指出第一次循环的次数。\nvar interations = Math.floor(items.length / 8);\nvar startAt = items.length % 8;\nvar i = 0;\ndo {\n    switch (startAt) {\n        case 0:\n            process(items[i++]);\n        case 7:\n            process(items[i++]);\n        case 6:\n            process(items[i++]);\n        case 5:\n            process(items[i++]);\n        case 4:\n            process(items[i++]);\n        case 3:\n            process(items[i++]);\n        case 2:\n            process(items[i++]);\n        case 1:\n            process(items[i++]);\n    }\n    startAt = 0;\n} while (--interations);\n```\n\n下面是优化版本，将余数处理和主循环分开：\n\n```javascript\nvar i = items.length % 8;\nwhile (i) {\n    process(items[i--]);\n}\ni = Math.floor(items.length / 8);\nwhile (i) {\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n    process(items[i--]);\n}\n```\n\n2.基于函数的迭代——forEach()，虽然比较便利，但是比起基于循环的迭代还是要慢一些。\n\n#### 4.2递归\n\n1.浏览器的调用栈尺寸限制了递归算法在JavaScript中的应用：栈溢出错误导致其他代码也不能执行。\n\n2.运行的代码总量越大，使用这些策略带来的提升就越明显。\n\n### 5.字符串和正则表达式\n\n#### 5.1字符串连接\n\n1.在拼接字符串时，使用str = str + 'one' + 'two'，如果在一个循环中，基本字符串位于最左端，就可以避免多次复制一个越来越大的基本字符串。\n\n2.使用数组辅助生成字符串：\n\n```javascript\nwhile (appends--) {\n    strs[strs.length] = str;\n}\nnewStr = strs.join('');\n```\n\n3.大多情况下，concat比 +和+= 要慢。\n\n#### 5.2正则表达式优化\n\n1.正则表达式的工作原理\n\n第一步：编译\n\n当创建一个正则表达式对象之后，浏览器检查模板有没有错误，然后将它转换成一个本机代码用于匹配工作。\n\n第二步：设置起始位置\n\n确定目标字符串中开始搜索的位置，但当匹配失败时，此位置将位于最后一次尝试起始位置退后的一个字符的位置上。\n\n第三步：匹配每个正则表达式的子元\n\n正则表达式一旦找好起始位置，将一个一个地扫描目标文本和正则表达式模板。当一个特定子元匹配失败时，正则表达式将试图回溯到扫描之前的位置上，然后进入正则表达式其他可能的路径上。\n\n第四步：匹配成功或失败\n\n2.理解回溯\n\n[理解回溯(来自博客园)](http://www.cnblogs.com/aaronjs/archive/2012/06/30/2570805.html)\n\n回溯即时正则表达式匹配功能基本的组成部分，又是正则表达式影响效率的常见原因。\n\n回溯失控发生在正则表达式本应该很快发现匹配的地方，因为某些特殊的匹配夫妇串动作，导致运行缓慢甚至浏览器崩溃。避免此问题的技术包括：使相邻子元互斥，避免嵌套量词对一个字符串的相同部分多次匹配，通过重复利用前瞻操作的院子特性去除不必要的回溯。\n\n### 6.响应接口\n\n总的来说，大多数浏览器有一个单独的处理进程，它由两个任务所共享：JavaScript任务和用户界面更新任务。每个时刻只有其中的一个操作得以执行，也就是说当JavaScript代码运行时用户界面不能对输入产生反应，反之亦然。或者说，当JavaScript运行时，用户界面就被‘锁定’了。\n\n1.JavaScript运行时间不应该超过100毫秒，过长的运行时间导致UI更新出现可察觉的延迟，从而对整体用户体验产生负面影响。\n\n2.定时器可用于安排代码推迟执行，它使得你可以将长运行脚本分解成一系列较小的任务。\n\n```javascript\n/**\n    - 封装的使用定时器运行程序\n    - @param  {items}  事件数组\n    - @param  {process}  事件\n    - @param  {callback}   回调方法\n    */\nfunction processArray(items, process, callback) {\n    var todo = items.concat();\n    setTimeout(function() {\n        process(todo.shift());\n        if (todo.length > 0) {\n            setTimeout(arguments.callee, 25);\n        } else {\n            callback(items);\n        }\n    }, 25);\n}\n\n//调用\nvar items = [123, 789, 323, 232, 778, 654, 543];\nfunction outputVal(val) {\n    console.log(val);\n}\nprocessArray(items, outputVal, function() {\n    console.log('Done!');\n});\n```\n\n3.网页应用越来越复杂，积极主动地管理UI现成就越显得重要。没有什么JavaScript代码可以重要到允许影响到用户体验的程度。\n\n### 7.Ajax异步JavaScript和XML\n\nAjax是高性能JavaScript的基石，它可以通过延迟下载大量资源使页面加载更快。\n\n>在选在ajax传输的数据格式时，最好选用较轻便的json。\n\n\n\n\n\n","slug":"2016-03-08-high_js-javascrip","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdy001dmo1183xd3z1r","content":"<h3 id=\"1-加载和运行\"><a href=\"#1-加载和运行\" class=\"headerlink\" title=\"1.加载和运行\"></a>1.加载和运行</h3><h4 id=\"1-1脚本位置\"><a href=\"#1-1脚本位置\" class=\"headerlink\" title=\"1.1脚本位置\"></a>1.1脚本位置</h4><p>当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的。</p>\n<p>如果把脚本的加载放到 head 标签中，那么浏览器会优先加载 script 脚本，第一个js文件下载并运行完成后才开始第二个js文件的加载。现在的浏览器都允许并行加载js文件，但并没有解决根本性的问题，因此，最好的解决方法就是：</p>\n<blockquote>\n<p>将javscript脚本放在底部</p>\n</blockquote>\n<h4 id=\"1-2成组脚本\"><a href=\"#1-2成组脚本\" class=\"headerlink\" title=\"1.2成组脚本\"></a>1.2成组脚本</h4><p>减少js脚本数量，减少http请求，最好将js压缩合并。</p>\n<h4 id=\"1-3非阻塞脚本\"><a href=\"#1-3非阻塞脚本\" class=\"headerlink\" title=\"1.3非阻塞脚本\"></a>1.3非阻塞脚本</h4><p>意思就是等页面加载完成之后在加载js代码。</p>\n<p>1.延期脚本</p>\n<p>使用 script 的扩展属性 defer，作用是告知浏览器当前 js 脚本没有操作dom，因此代码可以稍后执行，但是缺点是只支持ie和ff。</p>\n<p>2.动态脚本元素</p>\n<p>使用 script 操作dom来动态加载js，这样，无论在何处下载，都不会阻塞页面的其他进程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url, callback</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;  <span class=\"comment\">//IE下</span></div><div class=\"line\">        script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">'loaded'</span> || script.readyState == <span class=\"string\">'complete'</span>)&#123;</div><div class=\"line\">                script.onreadystatechange = <span class=\"literal\">null</span>;</div><div class=\"line\">                callback();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//其他浏览器</span></div><div class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    script.src = url;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.XHR脚本注入</p>\n<p>使用XMLHttpRequest()对象来请求所需要加载的脚本，请求成功后动态添加到页面。最主要的限制是不能跨域，只能在同一个域中。正因为这个原因，大型网站通常不用XHR脚本注入技术。</p>\n<h3 id=\"2-数据访问\"><a href=\"#2-数据访问\" class=\"headerlink\" title=\"2.数据访问\"></a>2.数据访问</h3><p>数据存储在哪里，关系到代码运行期间数据被检索到的速度，在javascript中有四种基本的数据访问位置。</p>\n<p>1.直接量:直接量仅代表自己，包括：字符串，数字，布尔值，对象，数组，函数，正则表达式，null，undefined。</p>\n<p>2.变量:使用var创建用于存储数据值。</p>\n<p>3.数组项:具有数字索引，存储一个js数组对象。</p>\n<p>4.对象成员:具有字符索引，存储一个js对象。</p>\n<h4 id=\"2-1管理作用域\"><a href=\"#2-1管理作用域\" class=\"headerlink\" title=\"2.1管理作用域\"></a>2.1管理作用域</h4><p>对所有浏览器来说，一个标识符所在的位置越深，读写他的速度就越慢，在没有优化的js引擎中，最好尽可能使用局部变量，或用局部变量存储全局变量从而减少访问全局变量的次数。</p>\n<blockquote>\n<p>尽可能不使用with()，小心使用try-catch</p>\n</blockquote>\n<h3 id=\"3-DOM编程\"><a href=\"#3-DOM编程\" class=\"headerlink\" title=\"3.DOM编程\"></a>3.DOM编程</h3><p>dom操作的代价非常昂贵，通常是一个网页的性能瓶颈。</p>\n<p>1.在页面大量添加或修改DOM节点时，最好将所有的节点保存起来，最后再添加到页面上。</p>\n<blockquote>\n<p>innerHTML和DOM操作的性能差别不大，区别是innerHTML在旧版本浏览器效率高，而DOM操作在新版浏览器效率高。具体选择哪一个要根据你所在团队的编码风格和你的编码习惯来看。</p>\n</blockquote>\n<p>2.如果同一个DOM属性或方法被访问一次以上，最好使用一个局部变量来缓存次DOM成员。</p>\n<p>3.在获取元素节点时，nextSibling和childNode在不同浏览器上运行时间基本相等，但是，在老的IE中，nextSibling要快的多。</p>\n<p>4.在新版本浏览器中，使用querySelectorAll()和firstElementChild()的效率更加高。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将class为warning和notice的div选择出来</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div.warning,div.notice'</span>);</div></pre></td></tr></table></figure>\n<p>5.在IE中，大量使用:hover这个伪选择器会降低反应速度。</p>\n<p>6.使用时间委托（事件逐层冒泡总能被父元素捕获）。</p>\n<h3 id=\"4-算法和流程控制\"><a href=\"#4-算法和流程控制\" class=\"headerlink\" title=\"4.算法和流程控制\"></a>4.算法和流程控制</h3><p>代码整体结构是执行速度的决定因素之一。代码量少不一定运行速度快，代码量多也不一定运行速度慢。性能损失与代码组织方式和具体问题解决办法直接相关。</p>\n<h4 id=\"4-1循环\"><a href=\"#4-1循环\" class=\"headerlink\" title=\"4.1循环\"></a>4.1循环</h4><p>for,while,do-while的性能特性相似，但是for-in的效率较慢。</p>\n<p>1.要尽可能减少迭代的次数，使用达夫循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 每次循环中最多8次调用process()函数，循环次数为元素综合/8.</span></div><div class=\"line\"><span class=\"comment\">// startAt存放余数,指出第一次循环的次数。</span></div><div class=\"line\"><span class=\"keyword\">var</span> interations = <span class=\"built_in\">Math</span>.floor(items.length / <span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> startAt = items.length % <span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (startAt) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    startAt = <span class=\"number\">0</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (--interations);</div></pre></td></tr></table></figure>\n<p>下面是优化版本，将余数处理和主循环分开：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = items.length % <span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (i) &#123;</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">&#125;</div><div class=\"line\">i = <span class=\"built_in\">Math</span>.floor(items.length / <span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"keyword\">while</span> (i) &#123;</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.基于函数的迭代——forEach()，虽然比较便利，但是比起基于循环的迭代还是要慢一些。</p>\n<h4 id=\"4-2递归\"><a href=\"#4-2递归\" class=\"headerlink\" title=\"4.2递归\"></a>4.2递归</h4><p>1.浏览器的调用栈尺寸限制了递归算法在JavaScript中的应用：栈溢出错误导致其他代码也不能执行。</p>\n<p>2.运行的代码总量越大，使用这些策略带来的提升就越明显。</p>\n<h3 id=\"5-字符串和正则表达式\"><a href=\"#5-字符串和正则表达式\" class=\"headerlink\" title=\"5.字符串和正则表达式\"></a>5.字符串和正则表达式</h3><h4 id=\"5-1字符串连接\"><a href=\"#5-1字符串连接\" class=\"headerlink\" title=\"5.1字符串连接\"></a>5.1字符串连接</h4><p>1.在拼接字符串时，使用str = str + ‘one’ + ‘two’，如果在一个循环中，基本字符串位于最左端，就可以避免多次复制一个越来越大的基本字符串。</p>\n<p>2.使用数组辅助生成字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (appends--) &#123;</div><div class=\"line\">    strs[strs.length] = str;</div><div class=\"line\">&#125;</div><div class=\"line\">newStr = strs.join(<span class=\"string\">''</span>);</div></pre></td></tr></table></figure>\n<p>3.大多情况下，concat比 +和+= 要慢。</p>\n<h4 id=\"5-2正则表达式优化\"><a href=\"#5-2正则表达式优化\" class=\"headerlink\" title=\"5.2正则表达式优化\"></a>5.2正则表达式优化</h4><p>1.正则表达式的工作原理</p>\n<p>第一步：编译</p>\n<p>当创建一个正则表达式对象之后，浏览器检查模板有没有错误，然后将它转换成一个本机代码用于匹配工作。</p>\n<p>第二步：设置起始位置</p>\n<p>确定目标字符串中开始搜索的位置，但当匹配失败时，此位置将位于最后一次尝试起始位置退后的一个字符的位置上。</p>\n<p>第三步：匹配每个正则表达式的子元</p>\n<p>正则表达式一旦找好起始位置，将一个一个地扫描目标文本和正则表达式模板。当一个特定子元匹配失败时，正则表达式将试图回溯到扫描之前的位置上，然后进入正则表达式其他可能的路径上。</p>\n<p>第四步：匹配成功或失败</p>\n<p>2.理解回溯</p>\n<p><a href=\"http://www.cnblogs.com/aaronjs/archive/2012/06/30/2570805.html\" target=\"_blank\" rel=\"external\">理解回溯(来自博客园)</a></p>\n<p>回溯即时正则表达式匹配功能基本的组成部分，又是正则表达式影响效率的常见原因。</p>\n<p>回溯失控发生在正则表达式本应该很快发现匹配的地方，因为某些特殊的匹配夫妇串动作，导致运行缓慢甚至浏览器崩溃。避免此问题的技术包括：使相邻子元互斥，避免嵌套量词对一个字符串的相同部分多次匹配，通过重复利用前瞻操作的院子特性去除不必要的回溯。</p>\n<h3 id=\"6-响应接口\"><a href=\"#6-响应接口\" class=\"headerlink\" title=\"6.响应接口\"></a>6.响应接口</h3><p>总的来说，大多数浏览器有一个单独的处理进程，它由两个任务所共享：JavaScript任务和用户界面更新任务。每个时刻只有其中的一个操作得以执行，也就是说当JavaScript代码运行时用户界面不能对输入产生反应，反之亦然。或者说，当JavaScript运行时，用户界面就被‘锁定’了。</p>\n<p>1.JavaScript运行时间不应该超过100毫秒，过长的运行时间导致UI更新出现可察觉的延迟，从而对整体用户体验产生负面影响。</p>\n<p>2.定时器可用于安排代码推迟执行，它使得你可以将长运行脚本分解成一系列较小的任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    - 封装的使用定时器运行程序</div><div class=\"line\">    - @param  &#123;items&#125;  事件数组</div><div class=\"line\">    - @param  &#123;process&#125;  事件</div><div class=\"line\">    - @param  &#123;callback&#125;   回调方法</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processArray</span>(<span class=\"params\">items, process, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> todo = items.concat();</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        process(todo.shift());</div><div class=\"line\">        <span class=\"keyword\">if</span> (todo.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            setTimeout(<span class=\"built_in\">arguments</span>.callee, <span class=\"number\">25</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            callback(items);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, <span class=\"number\">25</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"number\">123</span>, <span class=\"number\">789</span>, <span class=\"number\">323</span>, <span class=\"number\">232</span>, <span class=\"number\">778</span>, <span class=\"number\">654</span>, <span class=\"number\">543</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputVal</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val);</div><div class=\"line\">&#125;</div><div class=\"line\">processArray(items, outputVal, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3.网页应用越来越复杂，积极主动地管理UI现成就越显得重要。没有什么JavaScript代码可以重要到允许影响到用户体验的程度。</p>\n<h3 id=\"7-Ajax异步JavaScript和XML\"><a href=\"#7-Ajax异步JavaScript和XML\" class=\"headerlink\" title=\"7.Ajax异步JavaScript和XML\"></a>7.Ajax异步JavaScript和XML</h3><p>Ajax是高性能JavaScript的基石，它可以通过延迟下载大量资源使页面加载更快。</p>\n<blockquote>\n<p>在选在ajax传输的数据格式时，最好选用较轻便的json。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-加载和运行\"><a href=\"#1-加载和运行\" class=\"headerlink\" title=\"1.加载和运行\"></a>1.加载和运行</h3><h4 id=\"1-1脚本位置\"><a href=\"#1-1脚本位置\" class=\"headerlink\" title=\"1.1脚本位置\"></a>1.1脚本位置</h4><p>当浏览器遇到 script 标签时，无法预知javascript是否在页面中新添加内容，因此，浏览器停下来运行javascript代码，然后再加载例如css，图片等资源，然后继续解析或翻译页面。在整个过程中，浏览器必须先下载外部脚本文件，并解析完成后才能继续后面的步骤。在这个过程中，页面的解析和用户交互是完全被阻塞的。</p>\n<p>如果把脚本的加载放到 head 标签中，那么浏览器会优先加载 script 脚本，第一个js文件下载并运行完成后才开始第二个js文件的加载。现在的浏览器都允许并行加载js文件，但并没有解决根本性的问题，因此，最好的解决方法就是：</p>\n<blockquote>\n<p>将javscript脚本放在底部</p>\n</blockquote>\n<h4 id=\"1-2成组脚本\"><a href=\"#1-2成组脚本\" class=\"headerlink\" title=\"1.2成组脚本\"></a>1.2成组脚本</h4><p>减少js脚本数量，减少http请求，最好将js压缩合并。</p>\n<h4 id=\"1-3非阻塞脚本\"><a href=\"#1-3非阻塞脚本\" class=\"headerlink\" title=\"1.3非阻塞脚本\"></a>1.3非阻塞脚本</h4><p>意思就是等页面加载完成之后在加载js代码。</p>\n<p>1.延期脚本</p>\n<p>使用 script 的扩展属性 defer，作用是告知浏览器当前 js 脚本没有操作dom，因此代码可以稍后执行，但是缺点是只支持ie和ff。</p>\n<p>2.动态脚本元素</p>\n<p>使用 script 操作dom来动态加载js，这样，无论在何处下载，都不会阻塞页面的其他进程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url, callback</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;  <span class=\"comment\">//IE下</span></div><div class=\"line\">        script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">'loaded'</span> || script.readyState == <span class=\"string\">'complete'</span>)&#123;</div><div class=\"line\">                script.onreadystatechange = <span class=\"literal\">null</span>;</div><div class=\"line\">                callback();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//其他浏览器</span></div><div class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    script.src = url;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.XHR脚本注入</p>\n<p>使用XMLHttpRequest()对象来请求所需要加载的脚本，请求成功后动态添加到页面。最主要的限制是不能跨域，只能在同一个域中。正因为这个原因，大型网站通常不用XHR脚本注入技术。</p>\n<h3 id=\"2-数据访问\"><a href=\"#2-数据访问\" class=\"headerlink\" title=\"2.数据访问\"></a>2.数据访问</h3><p>数据存储在哪里，关系到代码运行期间数据被检索到的速度，在javascript中有四种基本的数据访问位置。</p>\n<p>1.直接量:直接量仅代表自己，包括：字符串，数字，布尔值，对象，数组，函数，正则表达式，null，undefined。</p>\n<p>2.变量:使用var创建用于存储数据值。</p>\n<p>3.数组项:具有数字索引，存储一个js数组对象。</p>\n<p>4.对象成员:具有字符索引，存储一个js对象。</p>\n<h4 id=\"2-1管理作用域\"><a href=\"#2-1管理作用域\" class=\"headerlink\" title=\"2.1管理作用域\"></a>2.1管理作用域</h4><p>对所有浏览器来说，一个标识符所在的位置越深，读写他的速度就越慢，在没有优化的js引擎中，最好尽可能使用局部变量，或用局部变量存储全局变量从而减少访问全局变量的次数。</p>\n<blockquote>\n<p>尽可能不使用with()，小心使用try-catch</p>\n</blockquote>\n<h3 id=\"3-DOM编程\"><a href=\"#3-DOM编程\" class=\"headerlink\" title=\"3.DOM编程\"></a>3.DOM编程</h3><p>dom操作的代价非常昂贵，通常是一个网页的性能瓶颈。</p>\n<p>1.在页面大量添加或修改DOM节点时，最好将所有的节点保存起来，最后再添加到页面上。</p>\n<blockquote>\n<p>innerHTML和DOM操作的性能差别不大，区别是innerHTML在旧版本浏览器效率高，而DOM操作在新版浏览器效率高。具体选择哪一个要根据你所在团队的编码风格和你的编码习惯来看。</p>\n</blockquote>\n<p>2.如果同一个DOM属性或方法被访问一次以上，最好使用一个局部变量来缓存次DOM成员。</p>\n<p>3.在获取元素节点时，nextSibling和childNode在不同浏览器上运行时间基本相等，但是，在老的IE中，nextSibling要快的多。</p>\n<p>4.在新版本浏览器中，使用querySelectorAll()和firstElementChild()的效率更加高。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将class为warning和notice的div选择出来</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div.warning,div.notice'</span>);</div></pre></td></tr></table></figure>\n<p>5.在IE中，大量使用:hover这个伪选择器会降低反应速度。</p>\n<p>6.使用时间委托（事件逐层冒泡总能被父元素捕获）。</p>\n<h3 id=\"4-算法和流程控制\"><a href=\"#4-算法和流程控制\" class=\"headerlink\" title=\"4.算法和流程控制\"></a>4.算法和流程控制</h3><p>代码整体结构是执行速度的决定因素之一。代码量少不一定运行速度快，代码量多也不一定运行速度慢。性能损失与代码组织方式和具体问题解决办法直接相关。</p>\n<h4 id=\"4-1循环\"><a href=\"#4-1循环\" class=\"headerlink\" title=\"4.1循环\"></a>4.1循环</h4><p>for,while,do-while的性能特性相似，但是for-in的效率较慢。</p>\n<p>1.要尽可能减少迭代的次数，使用达夫循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 每次循环中最多8次调用process()函数，循环次数为元素综合/8.</span></div><div class=\"line\"><span class=\"comment\">// startAt存放余数,指出第一次循环的次数。</span></div><div class=\"line\"><span class=\"keyword\">var</span> interations = <span class=\"built_in\">Math</span>.floor(items.length / <span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> startAt = items.length % <span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (startAt) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            process(items[i++]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    startAt = <span class=\"number\">0</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (--interations);</div></pre></td></tr></table></figure>\n<p>下面是优化版本，将余数处理和主循环分开：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = items.length % <span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (i) &#123;</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">&#125;</div><div class=\"line\">i = <span class=\"built_in\">Math</span>.floor(items.length / <span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"keyword\">while</span> (i) &#123;</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">    process(items[i--]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.基于函数的迭代——forEach()，虽然比较便利，但是比起基于循环的迭代还是要慢一些。</p>\n<h4 id=\"4-2递归\"><a href=\"#4-2递归\" class=\"headerlink\" title=\"4.2递归\"></a>4.2递归</h4><p>1.浏览器的调用栈尺寸限制了递归算法在JavaScript中的应用：栈溢出错误导致其他代码也不能执行。</p>\n<p>2.运行的代码总量越大，使用这些策略带来的提升就越明显。</p>\n<h3 id=\"5-字符串和正则表达式\"><a href=\"#5-字符串和正则表达式\" class=\"headerlink\" title=\"5.字符串和正则表达式\"></a>5.字符串和正则表达式</h3><h4 id=\"5-1字符串连接\"><a href=\"#5-1字符串连接\" class=\"headerlink\" title=\"5.1字符串连接\"></a>5.1字符串连接</h4><p>1.在拼接字符串时，使用str = str + ‘one’ + ‘two’，如果在一个循环中，基本字符串位于最左端，就可以避免多次复制一个越来越大的基本字符串。</p>\n<p>2.使用数组辅助生成字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (appends--) &#123;</div><div class=\"line\">    strs[strs.length] = str;</div><div class=\"line\">&#125;</div><div class=\"line\">newStr = strs.join(<span class=\"string\">''</span>);</div></pre></td></tr></table></figure>\n<p>3.大多情况下，concat比 +和+= 要慢。</p>\n<h4 id=\"5-2正则表达式优化\"><a href=\"#5-2正则表达式优化\" class=\"headerlink\" title=\"5.2正则表达式优化\"></a>5.2正则表达式优化</h4><p>1.正则表达式的工作原理</p>\n<p>第一步：编译</p>\n<p>当创建一个正则表达式对象之后，浏览器检查模板有没有错误，然后将它转换成一个本机代码用于匹配工作。</p>\n<p>第二步：设置起始位置</p>\n<p>确定目标字符串中开始搜索的位置，但当匹配失败时，此位置将位于最后一次尝试起始位置退后的一个字符的位置上。</p>\n<p>第三步：匹配每个正则表达式的子元</p>\n<p>正则表达式一旦找好起始位置，将一个一个地扫描目标文本和正则表达式模板。当一个特定子元匹配失败时，正则表达式将试图回溯到扫描之前的位置上，然后进入正则表达式其他可能的路径上。</p>\n<p>第四步：匹配成功或失败</p>\n<p>2.理解回溯</p>\n<p><a href=\"http://www.cnblogs.com/aaronjs/archive/2012/06/30/2570805.html\">理解回溯(来自博客园)</a></p>\n<p>回溯即时正则表达式匹配功能基本的组成部分，又是正则表达式影响效率的常见原因。</p>\n<p>回溯失控发生在正则表达式本应该很快发现匹配的地方，因为某些特殊的匹配夫妇串动作，导致运行缓慢甚至浏览器崩溃。避免此问题的技术包括：使相邻子元互斥，避免嵌套量词对一个字符串的相同部分多次匹配，通过重复利用前瞻操作的院子特性去除不必要的回溯。</p>\n<h3 id=\"6-响应接口\"><a href=\"#6-响应接口\" class=\"headerlink\" title=\"6.响应接口\"></a>6.响应接口</h3><p>总的来说，大多数浏览器有一个单独的处理进程，它由两个任务所共享：JavaScript任务和用户界面更新任务。每个时刻只有其中的一个操作得以执行，也就是说当JavaScript代码运行时用户界面不能对输入产生反应，反之亦然。或者说，当JavaScript运行时，用户界面就被‘锁定’了。</p>\n<p>1.JavaScript运行时间不应该超过100毫秒，过长的运行时间导致UI更新出现可察觉的延迟，从而对整体用户体验产生负面影响。</p>\n<p>2.定时器可用于安排代码推迟执行，它使得你可以将长运行脚本分解成一系列较小的任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    - 封装的使用定时器运行程序</div><div class=\"line\">    - @param  &#123;items&#125;  事件数组</div><div class=\"line\">    - @param  &#123;process&#125;  事件</div><div class=\"line\">    - @param  &#123;callback&#125;   回调方法</div><div class=\"line\">    */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processArray</span>(<span class=\"params\">items, process, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> todo = items.concat();</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        process(todo.shift());</div><div class=\"line\">        <span class=\"keyword\">if</span> (todo.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            setTimeout(<span class=\"built_in\">arguments</span>.callee, <span class=\"number\">25</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            callback(items);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, <span class=\"number\">25</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"number\">123</span>, <span class=\"number\">789</span>, <span class=\"number\">323</span>, <span class=\"number\">232</span>, <span class=\"number\">778</span>, <span class=\"number\">654</span>, <span class=\"number\">543</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputVal</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val);</div><div class=\"line\">&#125;</div><div class=\"line\">processArray(items, outputVal, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3.网页应用越来越复杂，积极主动地管理UI现成就越显得重要。没有什么JavaScript代码可以重要到允许影响到用户体验的程度。</p>\n<h3 id=\"7-Ajax异步JavaScript和XML\"><a href=\"#7-Ajax异步JavaScript和XML\" class=\"headerlink\" title=\"7.Ajax异步JavaScript和XML\"></a>7.Ajax异步JavaScript和XML</h3><p>Ajax是高性能JavaScript的基石，它可以通过延迟下载大量资源使页面加载更快。</p>\n<blockquote>\n<p>在选在ajax传输的数据格式时，最好选用较轻便的json。</p>\n</blockquote>\n"},{"layout":"post","title":"redux学习笔记","date":"2016-09-11T16:00:00.000Z","description":"redux学习笔记","author":"Gemicat","_content":"\n### 基础\n\n#### Action\n\nAction 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。\n\n在 Redux 中的 action 创建函数只是简单的返回一个 action:\n\n```javascript\nfunction addTodo(text) {\n    return {\n    type: ADD_TODO,\n    text\n    }\n}\n```\n\nRedux 中只需把 action 创建函数的结果传给 dispatch() 方法即可发起一次 dispatch 过程。\n\n```javascript\ndispatch(addTodo(text))\ndispatch(completeTodo(index))\n```\n\nstore 里能直接通过 store.dispatch() 调用 dispatch() 方法，但是多数情况下你会使用 react-redux 提供的 connect() 帮助器来调用。bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。\n\n#### Reducer\n\nreducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。\n\n    (previousState, action) => newState\n\n>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。\n\ncombineReducers 接收一个对象，可以把所有顶级的 reducer 放到一个独立的文件中，通过 export 暴露出每个 reducer 函数，然后使用 import * as reducers 得到一个以它们名字作为 key 的 object：\n\n```javascript\nimport { combineReducers } from 'redux'\nimport * as reducers from './reducers'\nconst todoApp = combineReducers(reducers)\n```\n\n#### Store\n\nStore 就是把它们联系到一起的对象。Store 有以下职责：\n\n* 维持应用的 state；\n* 提供 getState() 方法获取 state；\n* 提供 dispatch(action) 方法更新 state；\n* 通过 subscribe(listener) 注册监听器;\n* 通过 subscribe(listener) 返回的函数注销监听器。\n\n根据已有的 reducer 来创建 store 是非常容易的。我们使用 combineReducers() 将多个 reducer 合并成为一个。现在我们将其导入，并传递 createStore()。\n\n```javascript\nimport { createStore } from 'redux'\nimport todoApp from './reducers'\nlet store = createStore(todoApp)\n```\n\ncreateStore() 的第二个参数是可选的, 用于设置 state 初始状态。这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。\n\n```javascript\nlet store = createStore(todoApp, window.STATE_FROM_SERVER)\n```\n\n#### 数据流\n\n严格的单向数据流是 Redux 架构的设计核心。\n\nRedux 应用中数据的生命周期遵循下面 4 个步骤：\n\n1. 调用 store.dispatch(action)。\n\nAction 就是一个描述“发生了什么”的普通对象。比如：\n\n```javascript\n{ type: 'LIKE_ARTICLE', articleId: 42 };\n{ type: 'FETCH_USER_SUCCESS', response: { id: 3, name: 'Mary' } };\n{ type: 'ADD_TODO', text: 'Read the Redux docs.'};\n```\n\n2. Redux store 调用传入的 reducer 函数。\n3. 根 reducer 应该把多个子 reducer 输出合并成一个单一的 state 树。\n4. Redux store 保存了根 reducer 返回的完整 state 树。","source":"_posts/2016-09-12-reducxDoc-javascript.md","raw":"---\nlayout: post\ntitle: redux学习笔记\ndate: 2016-09-12\ncategories: javascript\ntags: [javascript]\ndescription: redux学习笔记\nauthor: \"Gemicat\"\n---\n\n### 基础\n\n#### Action\n\nAction 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。\n\n在 Redux 中的 action 创建函数只是简单的返回一个 action:\n\n```javascript\nfunction addTodo(text) {\n    return {\n    type: ADD_TODO,\n    text\n    }\n}\n```\n\nRedux 中只需把 action 创建函数的结果传给 dispatch() 方法即可发起一次 dispatch 过程。\n\n```javascript\ndispatch(addTodo(text))\ndispatch(completeTodo(index))\n```\n\nstore 里能直接通过 store.dispatch() 调用 dispatch() 方法，但是多数情况下你会使用 react-redux 提供的 connect() 帮助器来调用。bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。\n\n#### Reducer\n\nreducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。\n\n    (previousState, action) => newState\n\n>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。\n\ncombineReducers 接收一个对象，可以把所有顶级的 reducer 放到一个独立的文件中，通过 export 暴露出每个 reducer 函数，然后使用 import * as reducers 得到一个以它们名字作为 key 的 object：\n\n```javascript\nimport { combineReducers } from 'redux'\nimport * as reducers from './reducers'\nconst todoApp = combineReducers(reducers)\n```\n\n#### Store\n\nStore 就是把它们联系到一起的对象。Store 有以下职责：\n\n* 维持应用的 state；\n* 提供 getState() 方法获取 state；\n* 提供 dispatch(action) 方法更新 state；\n* 通过 subscribe(listener) 注册监听器;\n* 通过 subscribe(listener) 返回的函数注销监听器。\n\n根据已有的 reducer 来创建 store 是非常容易的。我们使用 combineReducers() 将多个 reducer 合并成为一个。现在我们将其导入，并传递 createStore()。\n\n```javascript\nimport { createStore } from 'redux'\nimport todoApp from './reducers'\nlet store = createStore(todoApp)\n```\n\ncreateStore() 的第二个参数是可选的, 用于设置 state 初始状态。这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。\n\n```javascript\nlet store = createStore(todoApp, window.STATE_FROM_SERVER)\n```\n\n#### 数据流\n\n严格的单向数据流是 Redux 架构的设计核心。\n\nRedux 应用中数据的生命周期遵循下面 4 个步骤：\n\n1. 调用 store.dispatch(action)。\n\nAction 就是一个描述“发生了什么”的普通对象。比如：\n\n```javascript\n{ type: 'LIKE_ARTICLE', articleId: 42 };\n{ type: 'FETCH_USER_SUCCESS', response: { id: 3, name: 'Mary' } };\n{ type: 'ADD_TODO', text: 'Read the Redux docs.'};\n```\n\n2. Redux store 调用传入的 reducer 函数。\n3. 根 reducer 应该把多个子 reducer 输出合并成一个单一的 state 树。\n4. Redux store 保存了根 reducer 返回的完整 state 树。","slug":"2016-09-12-reducxDoc-javascript","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649bdz001gmo11d36olml9","content":"<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>Action 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。</p>\n<p>在 Redux 中的 action 创建函数只是简单的返回一个 action:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: ADD_TODO,</div><div class=\"line\">    text</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Redux 中只需把 action 创建函数的结果传给 dispatch() 方法即可发起一次 dispatch 过程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch(addTodo(text))</div><div class=\"line\">dispatch(completeTodo(index))</div></pre></td></tr></table></figure>\n<p>store 里能直接通过 store.dispatch() 调用 dispatch() 方法，但是多数情况下你会使用 react-redux 提供的 connect() 帮助器来调用。bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。</p>\n<h4 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h4><p>reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。</p>\n<pre><code>(previousState, action) =&gt; newState\n</code></pre><blockquote>\n<p>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。</p>\n</blockquote>\n<p>combineReducers 接收一个对象，可以把所有顶级的 reducer 放到一个独立的文件中，通过 export 暴露出每个 reducer 函数，然后使用 import * as reducers 得到一个以它们名字作为 key 的 object：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></div><div class=\"line\"><span class=\"keyword\">const</span> todoApp = combineReducers(reducers)</div></pre></td></tr></table></figure>\n<h4 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h4><p>Store 就是把它们联系到一起的对象。Store 有以下职责：</p>\n<ul>\n<li>维持应用的 state；</li>\n<li>提供 getState() 方法获取 state；</li>\n<li>提供 dispatch(action) 方法更新 state；</li>\n<li>通过 subscribe(listener) 注册监听器;</li>\n<li>通过 subscribe(listener) 返回的函数注销监听器。</li>\n</ul>\n<p>根据已有的 reducer 来创建 store 是非常容易的。我们使用 combineReducers() 将多个 reducer 合并成为一个。现在我们将其导入，并传递 createStore()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> todoApp <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(todoApp)</div></pre></td></tr></table></figure>\n<p>createStore() 的第二个参数是可选的, 用于设置 state 初始状态。这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(todoApp, <span class=\"built_in\">window</span>.STATE_FROM_SERVER)</div></pre></td></tr></table></figure>\n<h4 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h4><p>严格的单向数据流是 Redux 架构的设计核心。</p>\n<p>Redux 应用中数据的生命周期遵循下面 4 个步骤：</p>\n<ol>\n<li>调用 store.dispatch(action)。</li>\n</ol>\n<p>Action 就是一个描述“发生了什么”的普通对象。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'LIKE_ARTICLE'</span>, <span class=\"attr\">articleId</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_USER_SUCCESS'</span>, <span class=\"attr\">response</span>: &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Mary'</span> &#125; &#125;;</div><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'ADD_TODO'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'Read the Redux docs.'</span>&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>Redux store 调用传入的 reducer 函数。</li>\n<li>根 reducer 应该把多个子 reducer 输出合并成一个单一的 state 树。</li>\n<li>Redux store 保存了根 reducer 返回的完整 state 树。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>Action 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。</p>\n<p>在 Redux 中的 action 创建函数只是简单的返回一个 action:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: ADD_TODO,</div><div class=\"line\">    text</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Redux 中只需把 action 创建函数的结果传给 dispatch() 方法即可发起一次 dispatch 过程。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch(addTodo(text))</div><div class=\"line\">dispatch(completeTodo(index))</div></pre></td></tr></table></figure>\n<p>store 里能直接通过 store.dispatch() 调用 dispatch() 方法，但是多数情况下你会使用 react-redux 提供的 connect() 帮助器来调用。bindActionCreators() 可以自动把多个 action 创建函数 绑定到 dispatch() 方法上。</p>\n<h4 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h4><p>reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。</p>\n<pre><code>(previousState, action) =&gt; newState\n</code></pre><blockquote>\n<p>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。</p>\n</blockquote>\n<p>combineReducers 接收一个对象，可以把所有顶级的 reducer 放到一个独立的文件中，通过 export 暴露出每个 reducer 函数，然后使用 import * as reducers 得到一个以它们名字作为 key 的 object：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></div><div class=\"line\"><span class=\"keyword\">const</span> todoApp = combineReducers(reducers)</div></pre></td></tr></table></figure>\n<h4 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h4><p>Store 就是把它们联系到一起的对象。Store 有以下职责：</p>\n<ul>\n<li>维持应用的 state；</li>\n<li>提供 getState() 方法获取 state；</li>\n<li>提供 dispatch(action) 方法更新 state；</li>\n<li>通过 subscribe(listener) 注册监听器;</li>\n<li>通过 subscribe(listener) 返回的函数注销监听器。</li>\n</ul>\n<p>根据已有的 reducer 来创建 store 是非常容易的。我们使用 combineReducers() 将多个 reducer 合并成为一个。现在我们将其导入，并传递 createStore()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\"><span class=\"keyword\">import</span> todoApp <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(todoApp)</div></pre></td></tr></table></figure>\n<p>createStore() 的第二个参数是可选的, 用于设置 state 初始状态。这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(todoApp, <span class=\"built_in\">window</span>.STATE_FROM_SERVER)</div></pre></td></tr></table></figure>\n<h4 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h4><p>严格的单向数据流是 Redux 架构的设计核心。</p>\n<p>Redux 应用中数据的生命周期遵循下面 4 个步骤：</p>\n<ol>\n<li>调用 store.dispatch(action)。</li>\n</ol>\n<p>Action 就是一个描述“发生了什么”的普通对象。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'LIKE_ARTICLE'</span>, <span class=\"attr\">articleId</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_USER_SUCCESS'</span>, <span class=\"attr\">response</span>: &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Mary'</span> &#125; &#125;;</div><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'ADD_TODO'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'Read the Redux docs.'</span>&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>Redux store 调用传入的 reducer 函数。</li>\n<li>根 reducer 应该把多个子 reducer 输出合并成一个单一的 state 树。</li>\n<li>Redux store 保存了根 reducer 返回的完整 state 树。</li>\n</ol>\n"},{"layout":"post","title":"用字体在网页中画ICON图标","date":"2016-08-20T16:00:00.000Z","description":"适当的图标，可以达到一图胜千言的效果...","author":"Gemicat","_content":"\n> 适当的图标，可以达到一图胜千言的效果。\n\n### CSS Sprite\n\n实现技术：background-position , background-images;\n\n使用原理：\n\n    1、使用backgrou-position定位，background-images导入图片；\n    2、以整张图片的左上角为坐标原点，向右，向下区负值，即位于坐标的第四象限;\n\n特点：\n\n    1、相对于单个小图标节省文件体积和减少服务器请求次数；\n    2、一般情况下，保存为PNG-24位文件格式；\n    3、可以设计出丰富多彩的icon；\n\n难点：\n\n    1、需要预先确定每个图标的大小；\n    2、注意小图标和小图标之间的距离；\n    3、细心+耐心；\n\n### 字体图标\n\n优点：\n\n    1、灵活性：轻松地改变图标的颜色或其他CSS效果;\n    2、可扩展:改变图标的大小，就像改变字体大小一样容易;\n    3、矢量性：图标是矢量的，与像素无关。缩放图标不会影响清晰度;\n    4、兼容性：字体图标支持所有现代浏览器（包括IE6）;\n    5、本地使用：通过添加定制字体到您的本地系统，你可以在各种不同的设计和编辑应用程序中使用它们;\n\n图标推荐网站：[https://icomoon.io](https://icomoon.io)\n\n图标变成字体简介网站: [http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html](http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html)\n\n字体文件格式：\n\n    1、EOT：微软开发，ie专用字体；\n    2、WOFF：W3C推荐；\n    3、TTF：操作系统常用字体；\n    4、SVG：W3C定制的开放标准的图形格式；\n\n代码示例：\n\n```css\n@font-face{\n    font-family: \"imooc-icon\";\n    src: url(\"../fonts/icomoon.eot\"); /* IE9 兼容模式 */\n    src: url(\"../fonts/icomoon.eot?#iefix\") format(\"embedded-opentype\")\n    ,url(\"../fonts/icomoon.woff\") format(\"woff\")\n    ,url(\"../fonts/icomoon.ttf\") format(\"truetype\")\n    ,url(\"../fonts/icomoon.svg\") format(\"svg\");\n    font-weight: normal;\n    font-style: normal;\n}\n// 抗锯齿显示优化\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n```\n","source":"_posts/2016-08-21-Font-css.md","raw":"---\nlayout: post\ntitle: 用字体在网页中画ICON图标\ndate: 2016-08-21\ncategories: [css]\ntags: [css]\ndescription: 适当的图标，可以达到一图胜千言的效果...\nauthor: \"Gemicat\"\n---\n\n> 适当的图标，可以达到一图胜千言的效果。\n\n### CSS Sprite\n\n实现技术：background-position , background-images;\n\n使用原理：\n\n    1、使用backgrou-position定位，background-images导入图片；\n    2、以整张图片的左上角为坐标原点，向右，向下区负值，即位于坐标的第四象限;\n\n特点：\n\n    1、相对于单个小图标节省文件体积和减少服务器请求次数；\n    2、一般情况下，保存为PNG-24位文件格式；\n    3、可以设计出丰富多彩的icon；\n\n难点：\n\n    1、需要预先确定每个图标的大小；\n    2、注意小图标和小图标之间的距离；\n    3、细心+耐心；\n\n### 字体图标\n\n优点：\n\n    1、灵活性：轻松地改变图标的颜色或其他CSS效果;\n    2、可扩展:改变图标的大小，就像改变字体大小一样容易;\n    3、矢量性：图标是矢量的，与像素无关。缩放图标不会影响清晰度;\n    4、兼容性：字体图标支持所有现代浏览器（包括IE6）;\n    5、本地使用：通过添加定制字体到您的本地系统，你可以在各种不同的设计和编辑应用程序中使用它们;\n\n图标推荐网站：[https://icomoon.io](https://icomoon.io)\n\n图标变成字体简介网站: [http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html](http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html)\n\n字体文件格式：\n\n    1、EOT：微软开发，ie专用字体；\n    2、WOFF：W3C推荐；\n    3、TTF：操作系统常用字体；\n    4、SVG：W3C定制的开放标准的图形格式；\n\n代码示例：\n\n```css\n@font-face{\n    font-family: \"imooc-icon\";\n    src: url(\"../fonts/icomoon.eot\"); /* IE9 兼容模式 */\n    src: url(\"../fonts/icomoon.eot?#iefix\") format(\"embedded-opentype\")\n    ,url(\"../fonts/icomoon.woff\") format(\"woff\")\n    ,url(\"../fonts/icomoon.ttf\") format(\"truetype\")\n    ,url(\"../fonts/icomoon.svg\") format(\"svg\");\n    font-weight: normal;\n    font-style: normal;\n}\n// 抗锯齿显示优化\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n```\n","slug":"2016-08-21-Font-css","published":1,"updated":"2017-04-06T07:53:24.000Z","comments":1,"photos":[],"link":"","_id":"cj1649be1001lmo114gd01n73","content":"<blockquote>\n<p>适当的图标，可以达到一图胜千言的效果。</p>\n</blockquote>\n<h3 id=\"CSS-Sprite\"><a href=\"#CSS-Sprite\" class=\"headerlink\" title=\"CSS Sprite\"></a>CSS Sprite</h3><p>实现技术：background-position , background-images;</p>\n<p>使用原理：</p>\n<pre><code>1、使用backgrou-position定位，background-images导入图片；\n2、以整张图片的左上角为坐标原点，向右，向下区负值，即位于坐标的第四象限;\n</code></pre><p>特点：</p>\n<pre><code>1、相对于单个小图标节省文件体积和减少服务器请求次数；\n2、一般情况下，保存为PNG-24位文件格式；\n3、可以设计出丰富多彩的icon；\n</code></pre><p>难点：</p>\n<pre><code>1、需要预先确定每个图标的大小；\n2、注意小图标和小图标之间的距离；\n3、细心+耐心；\n</code></pre><h3 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h3><p>优点：</p>\n<pre><code>1、灵活性：轻松地改变图标的颜色或其他CSS效果;\n2、可扩展:改变图标的大小，就像改变字体大小一样容易;\n3、矢量性：图标是矢量的，与像素无关。缩放图标不会影响清晰度;\n4、兼容性：字体图标支持所有现代浏览器（包括IE6）;\n5、本地使用：通过添加定制字体到您的本地系统，你可以在各种不同的设计和编辑应用程序中使用它们;\n</code></pre><p>图标推荐网站：<a href=\"https://icomoon.io\" target=\"_blank\" rel=\"external\">https://icomoon.io</a></p>\n<p>图标变成字体简介网站: <a href=\"http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html\" target=\"_blank\" rel=\"external\">http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html</a></p>\n<p>字体文件格式：</p>\n<pre><code>1、EOT：微软开发，ie专用字体；\n2、WOFF：W3C推荐；\n3、TTF：操作系统常用字体；\n4、SVG：W3C定制的开放标准的图形格式；\n</code></pre><p>代码示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@font-face&#123;</div><div class=\"line\">    font-family: \"imooc-icon\";</div><div class=\"line\">    src: url(\"../fonts/icomoon.eot\"); /* IE9 兼容模式 */</div><div class=\"line\">    src: url(\"../fonts/icomoon.eot?#iefix\") format(\"embedded-opentype\")</div><div class=\"line\">    ,url(\"../fonts/icomoon.woff\") format(\"woff\")</div><div class=\"line\">    ,url(\"../fonts/icomoon.ttf\") format(\"truetype\")</div><div class=\"line\">    ,url(\"../fonts/icomoon.svg\") format(\"svg\");</div><div class=\"line\">    font-weight: normal;</div><div class=\"line\">    font-style: normal;</div><div class=\"line\">&#125;</div><div class=\"line\">// 抗锯齿显示优化</div><div class=\"line\">-webkit-font-smoothing: antialiased;</div><div class=\"line\">-moz-osx-font-smoothing: grayscale;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>适当的图标，可以达到一图胜千言的效果。</p>\n</blockquote>\n<h3 id=\"CSS-Sprite\"><a href=\"#CSS-Sprite\" class=\"headerlink\" title=\"CSS Sprite\"></a>CSS Sprite</h3><p>实现技术：background-position , background-images;</p>\n<p>使用原理：</p>\n<pre><code>1、使用backgrou-position定位，background-images导入图片；\n2、以整张图片的左上角为坐标原点，向右，向下区负值，即位于坐标的第四象限;\n</code></pre><p>特点：</p>\n<pre><code>1、相对于单个小图标节省文件体积和减少服务器请求次数；\n2、一般情况下，保存为PNG-24位文件格式；\n3、可以设计出丰富多彩的icon；\n</code></pre><p>难点：</p>\n<pre><code>1、需要预先确定每个图标的大小；\n2、注意小图标和小图标之间的距离；\n3、细心+耐心；\n</code></pre><h3 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h3><p>优点：</p>\n<pre><code>1、灵活性：轻松地改变图标的颜色或其他CSS效果;\n2、可扩展:改变图标的大小，就像改变字体大小一样容易;\n3、矢量性：图标是矢量的，与像素无关。缩放图标不会影响清晰度;\n4、兼容性：字体图标支持所有现代浏览器（包括IE6）;\n5、本地使用：通过添加定制字体到您的本地系统，你可以在各种不同的设计和编辑应用程序中使用它们;\n</code></pre><p>图标推荐网站：<a href=\"https://icomoon.io\">https://icomoon.io</a></p>\n<p>图标变成字体简介网站: <a href=\"http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html\">http://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html</a></p>\n<p>字体文件格式：</p>\n<pre><code>1、EOT：微软开发，ie专用字体；\n2、WOFF：W3C推荐；\n3、TTF：操作系统常用字体；\n4、SVG：W3C定制的开放标准的图形格式；\n</code></pre><p>代码示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@font-face&#123;</div><div class=\"line\">    font-family: \"imooc-icon\";</div><div class=\"line\">    src: url(\"../fonts/icomoon.eot\"); /* IE9 兼容模式 */</div><div class=\"line\">    src: url(\"../fonts/icomoon.eot?#iefix\") format(\"embedded-opentype\")</div><div class=\"line\">    ,url(\"../fonts/icomoon.woff\") format(\"woff\")</div><div class=\"line\">    ,url(\"../fonts/icomoon.ttf\") format(\"truetype\")</div><div class=\"line\">    ,url(\"../fonts/icomoon.svg\") format(\"svg\");</div><div class=\"line\">    font-weight: normal;</div><div class=\"line\">    font-style: normal;</div><div class=\"line\">&#125;</div><div class=\"line\">// 抗锯齿显示优化</div><div class=\"line\">-webkit-font-smoothing: antialiased;</div><div class=\"line\">-moz-osx-font-smoothing: grayscale;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"浏览器加载、解析、渲染","date":"2017-04-05T16:00:00.000Z","author":"Gemicat","comments":0,"_content":"\n### 我们为什么要了解这些过程？\n\n只有了解了浏览器的加载、解析、渲染过程，才会知道为什么 js 脚本要写在页面的最下面，才会知道如何构建 dom 结构才能在最短的时间解析完成。\n\n### 浏览器的主要功能\n\n浏览器的主要功能是将用户选择的web资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是HTML，也包括PDF、image及其他格式。用户用URI（Uniform Resource Identifier统一资源标识符）来指定所请求资源的位置。\n\n这些年来，浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为web开发者带来了严重的兼容性问题。\n\n### 浏览器的构成\n\n用户界面、浏览器引擎、渲染引擎、网络、UI后端、JS解释器、数据存储\n\n> 要注意的是，不同于大部分浏览器，Chrome为每个Tab分配了各自的渲染引擎实例，每个Tab就是一个独立的进程。\n\n### 浏览器加载\n\n当我们在浏览器的输入框输入一个网址，会发生什么呢？\n\n1. 输入网址\n2. 浏览器查找域名的 IP 地址\n3. 浏览器给 web 服务器发送一个 HTTP 请求\n4. 网站服务的永久重定向响应\n5. 浏览器跟踪重定向地址并发送另一个获取请求\n6. 服务器接收到获取请求，然后处理并返回一个响应\n7. 服务器发回一个HTML响应\n8. 浏览器开始加载解析HTML\n\n当然，我们现在的网页都包含大量的图片、css、js等资源文件，使页面的显示更优雅。\n\n#### js 脚本\n\nweb 的模式是同步的，开发者希望解析到一个script标签时立即解析执行脚本，并阻塞文档的解析直到脚本执行完。如果脚本是外引的，则网络必须先请求到这个资源——这个过程也是同步的，会阻塞文档的解析直到资源被请求到。这个模式保持了很多年，并且在html4及html5中都特别指定了。开发者可以将脚本标识为defer，以使其不阻塞文档解析，并在文档解析结束后执行。\n\n#### css 样式表\n\n样式表采用另一种不同的模式。理论上，既然样式表不改变Dom树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，js 脚本可能会获取 dom 的样式，如果样式还没有加载解析完成，那么脚本可能会获取到错误的信息，展示的内容可能会和预想的结果有很大的偏差。这看起来是个边缘情况，但确实很常见。Firefox在存在样式表还在加载和解析时阻塞所有的脚本，而Chrome只在当脚本试图访问某些可能被未加载的样式表所影响的特定的样式属性时才阻塞这些脚本。\n\n> 当然，现在的浏览器支持页面资源预加载（prefetch），会预先下载页面所需要的js、css等文件。不过，真正的执行过程还是在其原来的位置。\n\n因此，可以使用预加载来提前加载资源文件\n\n```javascript\n<link rel=\"prefetch\" href=\"http://css.css\" />\n```\n\n使用 defer 属性异步加载js\n\n```javascript\n<script defer=\"true\" src=\"JavaScript.js\" type=\"text/javascript\"/>\n```\n\n使用 script 操作dom来动态加载js\n\n\n```javascript\nfunction loadScript(url, callback){\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    if(script.readyState){  //IE下\n        script.onreadystatechange = function(){\n            if(script.readyState == 'loaded' || script.readyState == 'complete'){\n                script.onreadystatechange = null;\n                callback();\n            }\n        }\n    }else{ //其他浏览器\n        script.onload = function(){\n            callback();\n        }\n    }\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n```\n\n### 浏览器渲染\n\n\n渲染引擎的目的就是呈现出浏览器请求到的数据，每个浏览器都有自己的渲染引擎。目前，Firefox 使用的是 Gecko，Safari 和 Chrome 浏览器使用的都是 WebKit，IE不想用。\n\n下面是渲染引擎的基本流程：\n\n![过程](/images/2017-04-06/process.png)\n\n浏览器解析 html 文档，并将里面的各个tag转化成 dom 树上的节点，同时解析 css 样式形成 render 树。\n\nrender 树上面会包含有一些样式属性的节点，排序顺序就是它们在屏幕上展示的顺序。\n\n当两棵树构建完成，进入布局阶段，浏览器会为每个节点分配它在浏览器上的确切坐标。\n\n下一个阶段是绘制阶段，浏览器的渲染引擎会遍历 render 树，并将每个节点绘制出来。\n\n![render tree](/images/2017-04-06/render_tree.png)\n\n> 需要注意的是，为了更好的用户体验，渲染引擎会尽早将内容显示在屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。\n\n### 浏览器解析\n\n解析是渲染过程中非常重要的一环。\n\n#### html 解析\n\nHTML的解析分为两个过程，词法解析和语法解析。词法分析就是将输入分解为符号，符号是语言的词汇表。语法分析指对语言应用语法规则。\n\n```html\n<html>\n    <body>\n    <p>Hello World</p>\n    <div>\n        <img src=\"example.png\"/>\n    </div>\n    </body>\n</html>\n```\n\n可翻译成如下的 DOM 树：\n\n![dom tree](/images/2017-04-06/dom_tree.png)\n\n我们在浏览html网页时从来不会遇到 「语法错误」 的情况，因为浏览器具有一定的容错机制，会纠正无效的内容。但是，在书写 html 代码时最好不要有错误的写法。\n\n#### css 解析\n\nCSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，[CSS 规范定义了 CSS 的词法和语法](http://www.w3.org/TR/CSS2/grammar.html)。\n\n```css\np, div {\n    margin-top: 3px;\n}\nerror {\n    color: red;\n}\n```\n\n上面这段 css 代码将会解析成如下规则：\n\n![css tree](/images/2017-04-06/css_tree.png)\n\ncss 的匹配是从左到右的匹配，如果换成从右到左，那么就要找到最顶层的元素，依次向下寻找，如果都不匹配要回到最顶层元素，换另一条路继续匹配，这样需要回溯若干次才能确定是否匹配成功。如果采用从左到右匹配规则，在匹配的第一时间就可以排除一大部分元素。\n\n根据匹配规则，在书写 css 时要尽量做到高效匹配：\n\n1、不要在ID选择器前使用标签名\n\n> div#divBox\n\n因为 id 选择器是唯一的，加上前面的标签名反而增加了不必要的匹配。\n\n2、尽量不要在 class 选择器前使用标签名\n\n3、尽量少使用层级关系\n\n> #div #span.red{color:red;}\n\n4、id 和 class 之间的效率差距并不大。不过 css 的语义化可以参考下面的文章。\n\n[Web语义化标准解读](https://github.com/kuitos/kuitos.github.io/issues/33)\n\n***\n\n本文参考文章:\n\n[浏览器的工作原理：新式网络浏览器幕后揭秘](https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/)","source":"_posts/2017-04-06-browserWorking-browser.md","raw":"---\nlayout: post\ntitle: 浏览器加载、解析、渲染\ndate: 2017-04-06\ncategories: broswer\ntags: [broswer]\nauthor: \"Gemicat\"\ncomments: false\n---\n\n### 我们为什么要了解这些过程？\n\n只有了解了浏览器的加载、解析、渲染过程，才会知道为什么 js 脚本要写在页面的最下面，才会知道如何构建 dom 结构才能在最短的时间解析完成。\n\n### 浏览器的主要功能\n\n浏览器的主要功能是将用户选择的web资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是HTML，也包括PDF、image及其他格式。用户用URI（Uniform Resource Identifier统一资源标识符）来指定所请求资源的位置。\n\n这些年来，浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为web开发者带来了严重的兼容性问题。\n\n### 浏览器的构成\n\n用户界面、浏览器引擎、渲染引擎、网络、UI后端、JS解释器、数据存储\n\n> 要注意的是，不同于大部分浏览器，Chrome为每个Tab分配了各自的渲染引擎实例，每个Tab就是一个独立的进程。\n\n### 浏览器加载\n\n当我们在浏览器的输入框输入一个网址，会发生什么呢？\n\n1. 输入网址\n2. 浏览器查找域名的 IP 地址\n3. 浏览器给 web 服务器发送一个 HTTP 请求\n4. 网站服务的永久重定向响应\n5. 浏览器跟踪重定向地址并发送另一个获取请求\n6. 服务器接收到获取请求，然后处理并返回一个响应\n7. 服务器发回一个HTML响应\n8. 浏览器开始加载解析HTML\n\n当然，我们现在的网页都包含大量的图片、css、js等资源文件，使页面的显示更优雅。\n\n#### js 脚本\n\nweb 的模式是同步的，开发者希望解析到一个script标签时立即解析执行脚本，并阻塞文档的解析直到脚本执行完。如果脚本是外引的，则网络必须先请求到这个资源——这个过程也是同步的，会阻塞文档的解析直到资源被请求到。这个模式保持了很多年，并且在html4及html5中都特别指定了。开发者可以将脚本标识为defer，以使其不阻塞文档解析，并在文档解析结束后执行。\n\n#### css 样式表\n\n样式表采用另一种不同的模式。理论上，既然样式表不改变Dom树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，js 脚本可能会获取 dom 的样式，如果样式还没有加载解析完成，那么脚本可能会获取到错误的信息，展示的内容可能会和预想的结果有很大的偏差。这看起来是个边缘情况，但确实很常见。Firefox在存在样式表还在加载和解析时阻塞所有的脚本，而Chrome只在当脚本试图访问某些可能被未加载的样式表所影响的特定的样式属性时才阻塞这些脚本。\n\n> 当然，现在的浏览器支持页面资源预加载（prefetch），会预先下载页面所需要的js、css等文件。不过，真正的执行过程还是在其原来的位置。\n\n因此，可以使用预加载来提前加载资源文件\n\n```javascript\n<link rel=\"prefetch\" href=\"http://css.css\" />\n```\n\n使用 defer 属性异步加载js\n\n```javascript\n<script defer=\"true\" src=\"JavaScript.js\" type=\"text/javascript\"/>\n```\n\n使用 script 操作dom来动态加载js\n\n\n```javascript\nfunction loadScript(url, callback){\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    if(script.readyState){  //IE下\n        script.onreadystatechange = function(){\n            if(script.readyState == 'loaded' || script.readyState == 'complete'){\n                script.onreadystatechange = null;\n                callback();\n            }\n        }\n    }else{ //其他浏览器\n        script.onload = function(){\n            callback();\n        }\n    }\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n```\n\n### 浏览器渲染\n\n\n渲染引擎的目的就是呈现出浏览器请求到的数据，每个浏览器都有自己的渲染引擎。目前，Firefox 使用的是 Gecko，Safari 和 Chrome 浏览器使用的都是 WebKit，IE不想用。\n\n下面是渲染引擎的基本流程：\n\n![过程](/images/2017-04-06/process.png)\n\n浏览器解析 html 文档，并将里面的各个tag转化成 dom 树上的节点，同时解析 css 样式形成 render 树。\n\nrender 树上面会包含有一些样式属性的节点，排序顺序就是它们在屏幕上展示的顺序。\n\n当两棵树构建完成，进入布局阶段，浏览器会为每个节点分配它在浏览器上的确切坐标。\n\n下一个阶段是绘制阶段，浏览器的渲染引擎会遍历 render 树，并将每个节点绘制出来。\n\n![render tree](/images/2017-04-06/render_tree.png)\n\n> 需要注意的是，为了更好的用户体验，渲染引擎会尽早将内容显示在屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。\n\n### 浏览器解析\n\n解析是渲染过程中非常重要的一环。\n\n#### html 解析\n\nHTML的解析分为两个过程，词法解析和语法解析。词法分析就是将输入分解为符号，符号是语言的词汇表。语法分析指对语言应用语法规则。\n\n```html\n<html>\n    <body>\n    <p>Hello World</p>\n    <div>\n        <img src=\"example.png\"/>\n    </div>\n    </body>\n</html>\n```\n\n可翻译成如下的 DOM 树：\n\n![dom tree](/images/2017-04-06/dom_tree.png)\n\n我们在浏览html网页时从来不会遇到 「语法错误」 的情况，因为浏览器具有一定的容错机制，会纠正无效的内容。但是，在书写 html 代码时最好不要有错误的写法。\n\n#### css 解析\n\nCSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，[CSS 规范定义了 CSS 的词法和语法](http://www.w3.org/TR/CSS2/grammar.html)。\n\n```css\np, div {\n    margin-top: 3px;\n}\nerror {\n    color: red;\n}\n```\n\n上面这段 css 代码将会解析成如下规则：\n\n![css tree](/images/2017-04-06/css_tree.png)\n\ncss 的匹配是从左到右的匹配，如果换成从右到左，那么就要找到最顶层的元素，依次向下寻找，如果都不匹配要回到最顶层元素，换另一条路继续匹配，这样需要回溯若干次才能确定是否匹配成功。如果采用从左到右匹配规则，在匹配的第一时间就可以排除一大部分元素。\n\n根据匹配规则，在书写 css 时要尽量做到高效匹配：\n\n1、不要在ID选择器前使用标签名\n\n> div#divBox\n\n因为 id 选择器是唯一的，加上前面的标签名反而增加了不必要的匹配。\n\n2、尽量不要在 class 选择器前使用标签名\n\n3、尽量少使用层级关系\n\n> #div #span.red{color:red;}\n\n4、id 和 class 之间的效率差距并不大。不过 css 的语义化可以参考下面的文章。\n\n[Web语义化标准解读](https://github.com/kuitos/kuitos.github.io/issues/33)\n\n***\n\n本文参考文章:\n\n[浏览器的工作原理：新式网络浏览器幕后揭秘](https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/)","slug":"2017-04-06-browserWorking-browser","published":1,"updated":"2017-04-06T08:18:49.000Z","_id":"cj1649be4001omo11rstxyy6w","photos":[],"link":"","content":"<h3 id=\"我们为什么要了解这些过程？\"><a href=\"#我们为什么要了解这些过程？\" class=\"headerlink\" title=\"我们为什么要了解这些过程？\"></a>我们为什么要了解这些过程？</h3><p>只有了解了浏览器的加载、解析、渲染过程，才会知道为什么 js 脚本要写在页面的最下面，才会知道如何构建 dom 结构才能在最短的时间解析完成。</p>\n<h3 id=\"浏览器的主要功能\"><a href=\"#浏览器的主要功能\" class=\"headerlink\" title=\"浏览器的主要功能\"></a>浏览器的主要功能</h3><p>浏览器的主要功能是将用户选择的web资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是HTML，也包括PDF、image及其他格式。用户用URI（Uniform Resource Identifier统一资源标识符）来指定所请求资源的位置。</p>\n<p>这些年来，浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为web开发者带来了严重的兼容性问题。</p>\n<h3 id=\"浏览器的构成\"><a href=\"#浏览器的构成\" class=\"headerlink\" title=\"浏览器的构成\"></a>浏览器的构成</h3><p>用户界面、浏览器引擎、渲染引擎、网络、UI后端、JS解释器、数据存储</p>\n<blockquote>\n<p>要注意的是，不同于大部分浏览器，Chrome为每个Tab分配了各自的渲染引擎实例，每个Tab就是一个独立的进程。</p>\n</blockquote>\n<h3 id=\"浏览器加载\"><a href=\"#浏览器加载\" class=\"headerlink\" title=\"浏览器加载\"></a>浏览器加载</h3><p>当我们在浏览器的输入框输入一个网址，会发生什么呢？</p>\n<ol>\n<li>输入网址</li>\n<li>浏览器查找域名的 IP 地址</li>\n<li>浏览器给 web 服务器发送一个 HTTP 请求</li>\n<li>网站服务的永久重定向响应</li>\n<li>浏览器跟踪重定向地址并发送另一个获取请求</li>\n<li>服务器接收到获取请求，然后处理并返回一个响应</li>\n<li>服务器发回一个HTML响应</li>\n<li>浏览器开始加载解析HTML</li>\n</ol>\n<p>当然，我们现在的网页都包含大量的图片、css、js等资源文件，使页面的显示更优雅。</p>\n<h4 id=\"js-脚本\"><a href=\"#js-脚本\" class=\"headerlink\" title=\"js 脚本\"></a>js 脚本</h4><p>web 的模式是同步的，开发者希望解析到一个script标签时立即解析执行脚本，并阻塞文档的解析直到脚本执行完。如果脚本是外引的，则网络必须先请求到这个资源——这个过程也是同步的，会阻塞文档的解析直到资源被请求到。这个模式保持了很多年，并且在html4及html5中都特别指定了。开发者可以将脚本标识为defer，以使其不阻塞文档解析，并在文档解析结束后执行。</p>\n<h4 id=\"css-样式表\"><a href=\"#css-样式表\" class=\"headerlink\" title=\"css 样式表\"></a>css 样式表</h4><p>样式表采用另一种不同的模式。理论上，既然样式表不改变Dom树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，js 脚本可能会获取 dom 的样式，如果样式还没有加载解析完成，那么脚本可能会获取到错误的信息，展示的内容可能会和预想的结果有很大的偏差。这看起来是个边缘情况，但确实很常见。Firefox在存在样式表还在加载和解析时阻塞所有的脚本，而Chrome只在当脚本试图访问某些可能被未加载的样式表所影响的特定的样式属性时才阻塞这些脚本。</p>\n<blockquote>\n<p>当然，现在的浏览器支持页面资源预加载（prefetch），会预先下载页面所需要的js、css等文件。不过，真正的执行过程还是在其原来的位置。</p>\n</blockquote>\n<p>因此，可以使用预加载来提前加载资源文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"prefetch\"</span> href=<span class=\"string\">\"http://css.css\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>使用 defer 属性异步加载js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script defer=<span class=\"string\">\"true\"</span> src=<span class=\"string\">\"JavaScript.js\"</span> type=<span class=\"string\">\"text/javascript\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>使用 script 操作dom来动态加载js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url, callback</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;  <span class=\"comment\">//IE下</span></div><div class=\"line\">        script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">'loaded'</span> || script.readyState == <span class=\"string\">'complete'</span>)&#123;</div><div class=\"line\">                script.onreadystatechange = <span class=\"literal\">null</span>;</div><div class=\"line\">                callback();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//其他浏览器</span></div><div class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    script.src = url;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h3><p>渲染引擎的目的就是呈现出浏览器请求到的数据，每个浏览器都有自己的渲染引擎。目前，Firefox 使用的是 Gecko，Safari 和 Chrome 浏览器使用的都是 WebKit，IE不想用。</p>\n<p>下面是渲染引擎的基本流程：</p>\n<p><img src=\"/images/2017-04-06/process.png\" alt=\"过程\"></p>\n<p>浏览器解析 html 文档，并将里面的各个tag转化成 dom 树上的节点，同时解析 css 样式形成 render 树。</p>\n<p>render 树上面会包含有一些样式属性的节点，排序顺序就是它们在屏幕上展示的顺序。</p>\n<p>当两棵树构建完成，进入布局阶段，浏览器会为每个节点分配它在浏览器上的确切坐标。</p>\n<p>下一个阶段是绘制阶段，浏览器的渲染引擎会遍历 render 树，并将每个节点绘制出来。</p>\n<p><img src=\"/images/2017-04-06/render_tree.png\" alt=\"render tree\"></p>\n<blockquote>\n<p>需要注意的是，为了更好的用户体验，渲染引擎会尽早将内容显示在屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>\n</blockquote>\n<h3 id=\"浏览器解析\"><a href=\"#浏览器解析\" class=\"headerlink\" title=\"浏览器解析\"></a>浏览器解析</h3><p>解析是渲染过程中非常重要的一环。</p>\n<h4 id=\"html-解析\"><a href=\"#html-解析\" class=\"headerlink\" title=\"html 解析\"></a>html 解析</h4><p>HTML的解析分为两个过程，词法解析和语法解析。词法分析就是将输入分解为符号，符号是语言的词汇表。语法分析指对语言应用语法规则。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"example.png\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可翻译成如下的 DOM 树：</p>\n<p><img src=\"/images/2017-04-06/dom_tree.png\" alt=\"dom tree\"></p>\n<p>我们在浏览html网页时从来不会遇到 「语法错误」 的情况，因为浏览器具有一定的容错机制，会纠正无效的内容。但是，在书写 html 代码时最好不要有错误的写法。</p>\n<h4 id=\"css-解析\"><a href=\"#css-解析\" class=\"headerlink\" title=\"css 解析\"></a>css 解析</h4><p>CSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，<a href=\"http://www.w3.org/TR/CSS2/grammar.html\" target=\"_blank\" rel=\"external\">CSS 规范定义了 CSS 的词法和语法</a>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">3px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">error</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这段 css 代码将会解析成如下规则：</p>\n<p><img src=\"/images/2017-04-06/css_tree.png\" alt=\"css tree\"></p>\n<p>css 的匹配是从左到右的匹配，如果换成从右到左，那么就要找到最顶层的元素，依次向下寻找，如果都不匹配要回到最顶层元素，换另一条路继续匹配，这样需要回溯若干次才能确定是否匹配成功。如果采用从左到右匹配规则，在匹配的第一时间就可以排除一大部分元素。</p>\n<p>根据匹配规则，在书写 css 时要尽量做到高效匹配：</p>\n<p>1、不要在ID选择器前使用标签名</p>\n<blockquote>\n<p>div#divBox</p>\n</blockquote>\n<p>因为 id 选择器是唯一的，加上前面的标签名反而增加了不必要的匹配。</p>\n<p>2、尽量不要在 class 选择器前使用标签名</p>\n<p>3、尽量少使用层级关系</p>\n<blockquote>\n<p>#div #span.red{color:red;}</p>\n</blockquote>\n<p>4、id 和 class 之间的效率差距并不大。不过 css 的语义化可以参考下面的文章。</p>\n<p><a href=\"https://github.com/kuitos/kuitos.github.io/issues/33\" target=\"_blank\" rel=\"external\">Web语义化标准解读</a></p>\n<hr>\n<p>本文参考文章:</p>\n<p><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\" target=\"_blank\" rel=\"external\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"我们为什么要了解这些过程？\"><a href=\"#我们为什么要了解这些过程？\" class=\"headerlink\" title=\"我们为什么要了解这些过程？\"></a>我们为什么要了解这些过程？</h3><p>只有了解了浏览器的加载、解析、渲染过程，才会知道为什么 js 脚本要写在页面的最下面，才会知道如何构建 dom 结构才能在最短的时间解析完成。</p>\n<h3 id=\"浏览器的主要功能\"><a href=\"#浏览器的主要功能\" class=\"headerlink\" title=\"浏览器的主要功能\"></a>浏览器的主要功能</h3><p>浏览器的主要功能是将用户选择的web资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是HTML，也包括PDF、image及其他格式。用户用URI（Uniform Resource Identifier统一资源标识符）来指定所请求资源的位置。</p>\n<p>这些年来，浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为web开发者带来了严重的兼容性问题。</p>\n<h3 id=\"浏览器的构成\"><a href=\"#浏览器的构成\" class=\"headerlink\" title=\"浏览器的构成\"></a>浏览器的构成</h3><p>用户界面、浏览器引擎、渲染引擎、网络、UI后端、JS解释器、数据存储</p>\n<blockquote>\n<p>要注意的是，不同于大部分浏览器，Chrome为每个Tab分配了各自的渲染引擎实例，每个Tab就是一个独立的进程。</p>\n</blockquote>\n<h3 id=\"浏览器加载\"><a href=\"#浏览器加载\" class=\"headerlink\" title=\"浏览器加载\"></a>浏览器加载</h3><p>当我们在浏览器的输入框输入一个网址，会发生什么呢？</p>\n<ol>\n<li>输入网址</li>\n<li>浏览器查找域名的 IP 地址</li>\n<li>浏览器给 web 服务器发送一个 HTTP 请求</li>\n<li>网站服务的永久重定向响应</li>\n<li>浏览器跟踪重定向地址并发送另一个获取请求</li>\n<li>服务器接收到获取请求，然后处理并返回一个响应</li>\n<li>服务器发回一个HTML响应</li>\n<li>浏览器开始加载解析HTML</li>\n</ol>\n<p>当然，我们现在的网页都包含大量的图片、css、js等资源文件，使页面的显示更优雅。</p>\n<h4 id=\"js-脚本\"><a href=\"#js-脚本\" class=\"headerlink\" title=\"js 脚本\"></a>js 脚本</h4><p>web 的模式是同步的，开发者希望解析到一个script标签时立即解析执行脚本，并阻塞文档的解析直到脚本执行完。如果脚本是外引的，则网络必须先请求到这个资源——这个过程也是同步的，会阻塞文档的解析直到资源被请求到。这个模式保持了很多年，并且在html4及html5中都特别指定了。开发者可以将脚本标识为defer，以使其不阻塞文档解析，并在文档解析结束后执行。</p>\n<h4 id=\"css-样式表\"><a href=\"#css-样式表\" class=\"headerlink\" title=\"css 样式表\"></a>css 样式表</h4><p>样式表采用另一种不同的模式。理论上，既然样式表不改变Dom树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，js 脚本可能会获取 dom 的样式，如果样式还没有加载解析完成，那么脚本可能会获取到错误的信息，展示的内容可能会和预想的结果有很大的偏差。这看起来是个边缘情况，但确实很常见。Firefox在存在样式表还在加载和解析时阻塞所有的脚本，而Chrome只在当脚本试图访问某些可能被未加载的样式表所影响的特定的样式属性时才阻塞这些脚本。</p>\n<blockquote>\n<p>当然，现在的浏览器支持页面资源预加载（prefetch），会预先下载页面所需要的js、css等文件。不过，真正的执行过程还是在其原来的位置。</p>\n</blockquote>\n<p>因此，可以使用预加载来提前加载资源文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"prefetch\"</span> href=<span class=\"string\">\"http://css.css\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>使用 defer 属性异步加载js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script defer=<span class=\"string\">\"true\"</span> src=<span class=\"string\">\"JavaScript.js\"</span> type=<span class=\"string\">\"text/javascript\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>使用 script 操作dom来动态加载js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url, callback</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;  <span class=\"comment\">//IE下</span></div><div class=\"line\">        script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">'loaded'</span> || script.readyState == <span class=\"string\">'complete'</span>)&#123;</div><div class=\"line\">                script.onreadystatechange = <span class=\"literal\">null</span>;</div><div class=\"line\">                callback();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//其他浏览器</span></div><div class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    script.src = url;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h3><p>渲染引擎的目的就是呈现出浏览器请求到的数据，每个浏览器都有自己的渲染引擎。目前，Firefox 使用的是 Gecko，Safari 和 Chrome 浏览器使用的都是 WebKit，IE不想用。</p>\n<p>下面是渲染引擎的基本流程：</p>\n<p><img src=\"/images/2017-04-06/process.png\" alt=\"过程\"></p>\n<p>浏览器解析 html 文档，并将里面的各个tag转化成 dom 树上的节点，同时解析 css 样式形成 render 树。</p>\n<p>render 树上面会包含有一些样式属性的节点，排序顺序就是它们在屏幕上展示的顺序。</p>\n<p>当两棵树构建完成，进入布局阶段，浏览器会为每个节点分配它在浏览器上的确切坐标。</p>\n<p>下一个阶段是绘制阶段，浏览器的渲染引擎会遍历 render 树，并将每个节点绘制出来。</p>\n<p><img src=\"/images/2017-04-06/render_tree.png\" alt=\"render tree\"></p>\n<blockquote>\n<p>需要注意的是，为了更好的用户体验，渲染引擎会尽早将内容显示在屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>\n</blockquote>\n<h3 id=\"浏览器解析\"><a href=\"#浏览器解析\" class=\"headerlink\" title=\"浏览器解析\"></a>浏览器解析</h3><p>解析是渲染过程中非常重要的一环。</p>\n<h4 id=\"html-解析\"><a href=\"#html-解析\" class=\"headerlink\" title=\"html 解析\"></a>html 解析</h4><p>HTML的解析分为两个过程，词法解析和语法解析。词法分析就是将输入分解为符号，符号是语言的词汇表。语法分析指对语言应用语法规则。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"example.png\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可翻译成如下的 DOM 树：</p>\n<p><img src=\"/images/2017-04-06/dom_tree.png\" alt=\"dom tree\"></p>\n<p>我们在浏览html网页时从来不会遇到 「语法错误」 的情况，因为浏览器具有一定的容错机制，会纠正无效的内容。但是，在书写 html 代码时最好不要有错误的写法。</p>\n<h4 id=\"css-解析\"><a href=\"#css-解析\" class=\"headerlink\" title=\"css 解析\"></a>css 解析</h4><p>CSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，<a href=\"http://www.w3.org/TR/CSS2/grammar.html\">CSS 规范定义了 CSS 的词法和语法</a>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">3px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">error</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这段 css 代码将会解析成如下规则：</p>\n<p><img src=\"/images/2017-04-06/css_tree.png\" alt=\"css tree\"></p>\n<p>css 的匹配是从左到右的匹配，如果换成从右到左，那么就要找到最顶层的元素，依次向下寻找，如果都不匹配要回到最顶层元素，换另一条路继续匹配，这样需要回溯若干次才能确定是否匹配成功。如果采用从左到右匹配规则，在匹配的第一时间就可以排除一大部分元素。</p>\n<p>根据匹配规则，在书写 css 时要尽量做到高效匹配：</p>\n<p>1、不要在ID选择器前使用标签名</p>\n<blockquote>\n<p>div#divBox</p>\n</blockquote>\n<p>因为 id 选择器是唯一的，加上前面的标签名反而增加了不必要的匹配。</p>\n<p>2、尽量不要在 class 选择器前使用标签名</p>\n<p>3、尽量少使用层级关系</p>\n<blockquote>\n<p>#div #span.red{color:red;}</p>\n</blockquote>\n<p>4、id 和 class 之间的效率差距并不大。不过 css 的语义化可以参考下面的文章。</p>\n<p><a href=\"https://github.com/kuitos/kuitos.github.io/issues/33\">Web语义化标准解读</a></p>\n<hr>\n<p>本文参考文章:</p>\n<p><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1649bcv0006mo11vp7ytolh","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649bd2000cmo112r5hi44o"},{"post_id":"cj1649bcc0000mo11g6frlc8j","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649bd7000hmo11nv3elk0w"},{"post_id":"cj1649bcx000bmo11u8ndwkkf","category_id":"cj1649bcw0008mo11dtzm2qyy","_id":"cj1649bd9000kmo111gycdgbp"},{"post_id":"cj1649bcj0002mo11r5bmzjxf","category_id":"cj1649bcw0008mo11dtzm2qyy","_id":"cj1649bdb000pmo11l8g4whzc"},{"post_id":"cj1649bcs0005mo11j1pi14hk","category_id":"cj1649bcw0008mo11dtzm2qyy","_id":"cj1649bde000tmo11o4tacp5v"},{"post_id":"cj1649bd9000mmo11ruq49kbi","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649bdg000ymo11nm8xxpiy"},{"post_id":"cj1649bdb000qmo116c3s52rx","category_id":"cj1649bcw0008mo11dtzm2qyy","_id":"cj1649bdi0011mo118adxwlm2"},{"post_id":"cj1649bcv0007mo11uq979iy6","category_id":"cj1649bda000nmo11r0uji9ws","_id":"cj1649bdm0016mo11op58vvo9"},{"post_id":"cj1649bdd000smo11o5ak0jx6","category_id":"cj1649bcw0008mo11dtzm2qyy","_id":"cj1649bdt0019mo11w2tcfuiy"},{"post_id":"cj1649bd3000emo11l1nukoyw","category_id":"cj1649bda000nmo11r0uji9ws","_id":"cj1649bdz001emo11yihca4cx"},{"post_id":"cj1649bdk0015mo11b6dbiitj","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649be0001hmo11w3iiwmwx"},{"post_id":"cj1649bd8000jmo11p9ir0zw5","category_id":"cj1649bda000nmo11r0uji9ws","_id":"cj1649be2001mmo11ybuceqoc"},{"post_id":"cj1649bdo0018mo11erenzd8y","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649be6001pmo11xhijes5f"},{"post_id":"cj1649bdy001dmo1183xd3z1r","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649be7001tmo11leu7d1q0"},{"post_id":"cj1649bdg000xmo11a2vk4yw9","category_id":"cj1649bdw001bmo11ezj036z7","_id":"cj1649bea001vmo11ss5w85p5"},{"post_id":"cj1649bdz001gmo11d36olml9","category_id":"cj1649bcn0003mo11shcy5iyp","_id":"cj1649bea001ymo116te7hw8o"},{"post_id":"cj1649bdh0010mo11riq01ntk","category_id":"cj1649bdw001bmo11ezj036z7","_id":"cj1649beb0021mo11zak6g68w"},{"post_id":"cj1649be1001lmo114gd01n73","category_id":"cj1649be6001rmo11ilz3jbb4","_id":"cj1649beb0023mo11gq5dycam"},{"post_id":"cj1649be4001omo11rstxyy6w","category_id":"cj1649bea001xmo11gwmbsts9","_id":"cj1649bec0025mo11z6nkh565"}],"PostTag":[{"post_id":"cj1649bcv0006mo11vp7ytolh","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649bcx000amo11igbgks95"},{"post_id":"cj1649bcc0000mo11g6frlc8j","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649bd2000dmo11lfeq62sk"},{"post_id":"cj1649bcx000bmo11u8ndwkkf","tag_id":"cj1649bcw0009mo11j1y1dnjt","_id":"cj1649bd7000imo114pg1qzrc"},{"post_id":"cj1649bcj0002mo11r5bmzjxf","tag_id":"cj1649bcw0009mo11j1y1dnjt","_id":"cj1649bd9000lmo116wb5s515"},{"post_id":"cj1649bcs0005mo11j1pi14hk","tag_id":"cj1649bcw0009mo11j1y1dnjt","_id":"cj1649bdc000rmo114pbhhuvf"},{"post_id":"cj1649bd9000mmo11ruq49kbi","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649bdf000umo11xh1akrsm"},{"post_id":"cj1649bdb000qmo116c3s52rx","tag_id":"cj1649bcw0009mo11j1y1dnjt","_id":"cj1649bdg000zmo11rejmo94k"},{"post_id":"cj1649bcv0007mo11uq979iy6","tag_id":"cj1649bda000omo11h4afnkus","_id":"cj1649bdi0012mo112fhrvc1q"},{"post_id":"cj1649bdd000smo11o5ak0jx6","tag_id":"cj1649bcw0009mo11j1y1dnjt","_id":"cj1649bdm0017mo11dk9lvh5n"},{"post_id":"cj1649bd3000emo11l1nukoyw","tag_id":"cj1649bda000omo11h4afnkus","_id":"cj1649bdt001amo11dm990gtl"},{"post_id":"cj1649bdk0015mo11b6dbiitj","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649bdz001fmo11d1iqqerd"},{"post_id":"cj1649bd8000jmo11p9ir0zw5","tag_id":"cj1649bda000omo11h4afnkus","_id":"cj1649be0001imo117mp191zu"},{"post_id":"cj1649bdo0018mo11erenzd8y","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649be3001nmo1127gxlpm6"},{"post_id":"cj1649bdy001dmo1183xd3z1r","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649be6001qmo114eaor8nu"},{"post_id":"cj1649bdg000xmo11a2vk4yw9","tag_id":"cj1649bdx001cmo119ehkz1nx","_id":"cj1649be8001umo11hllzb381"},{"post_id":"cj1649bdz001gmo11d36olml9","tag_id":"cj1649bcr0004mo11tseseiiv","_id":"cj1649bea001wmo11dkv0d674"},{"post_id":"cj1649bdh0010mo11riq01ntk","tag_id":"cj1649bdx001cmo119ehkz1nx","_id":"cj1649bea0020mo11rq42wx7b"},{"post_id":"cj1649be1001lmo114gd01n73","tag_id":"cj1649be7001smo11tz6s1t5n","_id":"cj1649beb0022mo11dl44ddfc"},{"post_id":"cj1649be4001omo11rstxyy6w","tag_id":"cj1649bea001zmo11ahqold4i","_id":"cj1649bec0024mo116pi5oe0g"}],"Tag":[{"name":"javascript","_id":"cj1649bcr0004mo11tseseiiv"},{"name":"数据结构与算法","_id":"cj1649bcw0009mo11j1y1dnjt"},{"name":"Node.JS","_id":"cj1649bda000omo11h4afnkus"},{"name":"LeetCode","_id":"cj1649bdx001cmo119ehkz1nx"},{"name":"css","_id":"cj1649be7001smo11tz6s1t5n"},{"name":"broswer","_id":"cj1649bea001zmo11ahqold4i"}]}}